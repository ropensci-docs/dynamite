[{"path":"https://docs.ropensci.org/dynamite/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dynamite","title":"Contributing to dynamite","text":"outlines propose change dynamite, modified usethis::use_tidy_contributing.","code":""},{"path":"https://docs.ropensci.org/dynamite/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dynamite","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://docs.ropensci.org/dynamite/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dynamite","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://docs.ropensci.org/dynamite/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dynamite","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ropensci/dynamite\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://docs.ropensci.org/dynamite/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to dynamite","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/dynamite/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Panel data common various fields social sciences. data consist multiple individuals followed several time points, often many observations per individual time, example, family status income individual time point interest. data can analyzed various ways, depending research questions characteristics data number individuals time points, assumed distribution response variables. social sciences, popular, somewhat overlapping modeling approaches include dynamic panel models, fixed effect models, dynamic structural equation models (Asparouhov, Hamaker, Muthén 2018), cross-lagged panel models (CLPM), various extensions CLPM fixed random effects (Arellano Bond 1991; Allison 2009; Bollen Brand 2010; Allison, Williams, Moral-Benito 2017; Hamaker, Kuiper, Grasman 2015; Mulder Hamaker 2021) general cross-lagged panel model (Zyphur et al. 2020). several R (R Core Team 2023) packages available Comprehensive R Archive Network (CRAN) focusing analysis panel data. plm package (Croissant Millo 2008) provides various estimation methods tests linear panel data models, fixest package (Bergé 2018) supports multiple fixed effects different distributions response variables. panelr package (Long 2020) contains tools panel data manipulation estimation methods -called “within-” models combine fixed effect random effect models. done using lme4, geepack, brms packages backend (Bates et al. 2015; Halekoh, Højsgaard, Yan 2006; Bürkner 2018). lavaan package (Rosseel 2012) provides methods general structural equation modeling (SEM) thus can used estimate various panel data models CLPMs fixed random intercepts. Similarly, also possible use general multilevel modeling packages lme4 brms directly panel data modeling. , lavaan brms support joint modeling multiple interdependent response variables, typically necessary multi-step predictions long-term causal effect estimation (Helske Tikka 2024). traditional panel data models ones supported aforementioned packages, number time points considered often assumed relatively small, say less 10, number individuals can hundreds thousands (Wooldridge 2010). especially true commonly used “wide format” SEM approaches unable consider large number time points (Asparouhov, Hamaker, Muthén 2018). Perhaps due small number time points, effects covariates typically assumed time-invariant, although extensions time-varying effects emerged (e.g., Sun, Carroll, Li 2009; Asparouhov, Hamaker, Muthén 2018; Hayakawa Hou 2019). hand, number time points moderate large, say hundreds thousands (sometimes referred intensive longitudinal data), can reasonable assume dynamics system change time, example form time-varying effects. Modeling time-varying effects (generalized) linear models can based state-space models (SSMs, Harvey Phillips 1982; Durbin Koopman 2012; Helske 2022), various R implementations walker (Helske 2022), shrinkTVP (Knaus et al. 2021), CausalImpact (Brodersen et al. 2014). However, implementations restricted non-panel setting single individual single response variable. approaches include methods based varying coefficients models (Hastie Tibshirani 1993; Eubank et al. 2004), implemented tvReg tvem packages (Casas Fernández-Casal 2022; Dziak et al. 2021). tvem supports multiple individuals, support multiple response variables per individual. tvReg package supports univariate single-individual responses. Also based SSMs differential equations, dynr package (Ou, Hunter, Chow 2019) provides methods modeling multivariate dynamic regime-switching models linear non-linear latent dynamics linear-Gaussian observations. multilevel models SEMs can defined SSMs (see e.g., Sallas Harville 1981; Helske 2017; Chow et al. 2010), packages supporting general SSMs suitable panel data analysis principle well, KFAS (Helske 2017), bssm (Helske Vihola 2021), pomp (King, Nguyen, Ionides 2016). However, SSMs often computationally demanding especially non-Gaussian observations marginal likelihood analytically intractable, large number individuals can problematic, particularly presence additional group-level random effects complicates construction corresponding state space model (Helske 2017). dynamite package (Tikka Helske 2024b) provides alternative approach panel data inference avoids limitations drawbacks aforementioned methods. First, dynamic multivariate panel data models (DMPMs), introduced Helske Tikka (2024) implemented dynamite package support estimation effects vary smoothly time according Bayesian P-splines (Lang Brezger 2004), penalization based random walk priors. allows modeling example effects interventions increase decrease time. Second, dynamite supports wide variety distributions response variables Gaussian, Poisson, binomial, categorical distributions. Third, dynamite, can model arbitrary number simultaneous measurements per individual. Finally, estimation fully Bayesian using Markov chain Monte Carlo (MCMC) simulation via Stan (Stan Development Team 2024b) leading transparent interpretable quantification parameter predictive uncertainty. comprehensive comparison DMPMs panel data modeling approaches can found (Helske Tikka 2024). One defining features dynamite high-performance prediction functionality, fully automated, supports multi-step predictions entire observed time interval, can operate individual level group level. stark contrast packages brms , presence lagged response variables covariates, obtaining predictions necessitates computation manual stepwise predictions can pose challenge even experienced user. Furthermore, jointly modeling endogenous variables simultaneously, dynamite allows us consider long-term effects interventions take account interdependence variables model. paper organized follows. Section 2 introduce dynamic multivariate panel model class models considered dynamite package describe assumptions made package respect models. Section 3 introduces software package core features along two illustrative examples using real dataset synthetic dataset. Sections 4 5 provide comprehensive technical overview define estimate models using package. use model fit objects prediction discussed Section 6. Finally, Section 7 summarizes contributions provides concluding remarks.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:model","dir":"Articles","previous_headings":"","what":"The dynamic multivariate panel model","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Consider individual \\(\\) time \\(t\\) observations \\(y_{t,} = (y_{1,t,},\\ldots, y_{C,t,})\\), \\(t=1,\\ldots,T\\), \\(= 1,\\ldots,N\\). words, time point \\(t\\) \\(C\\) observations \\(N\\) individuals, \\(C\\) number different response variables measured, call channels. response variables can univariate multivariate. assume element \\(y_{t,}\\) can depend past observations \\(y_{t-\\ell,}\\), \\(\\ell=1,\\ldots\\) (set past values can different channel) also additional exogenous covariates \\(x_{t,}\\). addition, response variable \\(y_{c,t,}\\) can depend observations time point \\(t\\), .e., elements \\(y_{t,}\\), following restriction. assume channels can ordered distribution \\(y_{t,}\\) factorizes according ordering \\(\\pi\\) responses. denote observations time point observation \\(y_{c,t,}\\) ordering \\(y_{\\pi(c),t,}\\). Thus, conditional distribution channel \\(c\\) completely defined observations time point channel ordering \\(\\pi\\), past observations, exogenous covariates, model parameters \\(c = 1,\\ldots,C\\). simplicity presentation, now assume channels univariate observations channel depend previous time points, .e., \\(\\ell = 1\\) channels. set model parameters denoted \\(\\theta\\). treat first \\(L\\) timepoints fixed data, \\(L\\) highest order lag dependence model. Now, assuming elements \\(y_{t,}\\) conditionally independent given \\(y_{t-1,}\\), \\(x_{t,}\\), \\(\\theta\\) \\[\\begin{equation}   y_{t,} \\sim p_t(y_{t,} | y_{1:t-1,},x_{t,},\\theta) = \\prod_{c = 1}^C p_{c,t}(y_{c,t,} | y_{\\pi(c),t,}, y_{1:t-1,}, x_{t,}, \\theta),   \\tag{1} \\end{equation}\\] \\(y_{1:t-1,}\\) denotes past values response variables across channels \\((y_{1,},\\ldots,y_{t-1,})\\). Importantly, parameters conditional distributions \\(p_{c,t}\\) can time-dependent, enabling us consider evolution dynamics system time. Given suitable link function depending distributional assumptions, define linear predictor \\(\\eta_{c,t,}\\) conditional distribution \\(p^c_t\\) channel \\(c\\) following general form: \\[\\begin{equation}   \\eta_{c,t,} = \\alpha_{c,t} + u^\\top_{c,t,} \\beta_c + w^\\top_{c,t,} \\delta_{c,t} + z^\\top_{c,t,} \\nu_{c,} + \\lambda^\\top_{c,} \\psi_{c,t},   \\tag{2} \\end{equation}\\] \\(\\alpha_{c,t}\\) (possibly time-varying) common intercept term, \\(u^\\top_{c,t,}\\) defines covariates corresponding vector time-invariant coefficients \\(\\beta_c\\), similarly \\(w^\\top_{c,t,}\\) defines covariates time-varying coefficients \\(\\delta_{c,t}\\). term \\(z^\\top_{c,t,} \\nu_{c,}\\) corresponds individual-specific random effects, \\(\\nu_{1,},\\ldots, \\nu_{C,}\\) assumed follow zero-mean Gaussian distribution, either diagonal full covariance matrix. Note covariates \\(u^\\top_{c,t,}\\), \\(w^\\top_{c,t,}\\), \\(z^\\top_{c,t,}\\) may contain values response variables time point appear channel \\(c\\) ordering \\(\\pi\\), past observations response channels (transformations ), exogenous covariates. Covariates \\(z^\\top_{c,t,}\\) can overlap \\(u^\\top_{c,t,}\\) \\(w^\\top_{c,t,}\\) resulting interpretation \\(\\nu_{c,}\\) corresponds individual-specific deviations population-level effects \\(\\beta_c\\) \\(\\delta_{c,t}\\), respectively. contrast, covariates \\(u^\\top_{c,t,}\\) \\(w^\\top_{c,t,}\\) general overlap ensure identifiability respective model parameters. final term \\(\\lambda^\\top_{c,} \\psi_{c,t}\\) product latent individual loadings \\(\\lambda_{c,}\\) univariate latent dynamic factor \\(\\psi_{c,t}\\). latent factors can correlated across channels. time-varying coefficients \\(\\delta_{c,t}\\) (similarly time-varying \\(\\alpha_{c,t}\\) latent factor \\(\\psi_{c,t}\\)), use Bayesian P-splines \\[   \\delta_{c,t,k} = b^\\top_t \\omega_{c,k}, \\quad k=1,\\ldots,K, \\] \\(K\\) number covariates, \\(b_t\\) vector B-spline basis function values time \\(t\\), \\(\\omega_{c,k}\\) vector corresponding spline coefficients. assume B-spline basis equally spaced knots time interval \\(L+1\\) \\(T\\) \\(D\\) degrees freedom. general, number B-splines \\(D\\) used constructing splines study period \\(1,\\ldots,T\\) can chosen freely, actual value important (long \\(D\\) larger degree spline, e.g., three cubic splines, Wood 2020). Therefore, use \\(D\\) basis functions time-varying effects. mitigate overfitting due large value \\(D\\), define random walk prior (Lang Brezger 2004) \\(\\omega_{c,k}\\) \\[   \\omega_{c,k,1} \\sim p(\\omega_{c,k,1}), \\quad   \\omega_{c,k,d} \\sim N(\\omega_{c,k,d-1}, \\tau^2_{c,k}), \\quad d=2, \\ldots, D, \\] user-defined prior \\(p(\\omega_{c,k,1})\\) first coefficient, due structure \\(b_1\\) corresponds prior \\(\\delta_{c,k,1}\\). , parameter \\(\\tau_{c,k}\\) controls smoothness spline curves. different time-varying coefficients modeled independent priori, latent factors \\(\\psi_{c,t}\\) can modeled correlated via correlated spline coefficients \\(\\omega_{c,k}\\). See Appendix details parametrization latent factor term. categorical, multivariate, distributions multiple dimensions components, can extend definition linear predictor Equation (2) account dimension simply replacing index \\(c\\) indices \\(c,s\\) \\(s\\) denotes index dimension, \\(s = 1,\\ldots,S(c)\\), \\(S(c)\\) number dimensions channel \\(c\\). extension also applies spline coefficients.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:dynamitepackage","dir":"Articles","previous_headings":"","what":"The dynamite package","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"dynamite package provides easy--use interface fitting DMPMs R. package part rOpenSci (https://ropensci.org), complies rigorous software standards development version dynamite can installed R-universe system (https://ropensci.org/r-universe/). stable version package available CRAN (https://cran.r-project.org/package=dynamite). software published GNU general public license (GPL \\(\\geq\\) 3) can obtained R running following commands: package takes advantage several well-established R packages. Estimation models carried Stan rstan cmdstanr interfaces available (Stan Development Team 2024a; Gabry Češnovar 2023). specifically, MCMC simulation uses -U-Turn sampler (NUTS, Hoffman Gelman 2014) extension Hamiltonian Monte Carlo (HMC, Neal 2011). data.table package (Barrett et al. 2024) used efficient computation memory management predictions internal data manipulations. posterior inference visualization, ggplot2 posterior packages leveraged (Wickham 2016; Bürkner et al. 2023). Leave-one-(LOO) leave-future-(LFO) cross-validation methods implemented help loo package (Vehtari et al. 2022). aforementioned dependencies available CRAN except cmdstanr whose installation optional needed user wishes use CmdStan backend Stan. Although required dynamite, also install dplyr, pder, pryr packages (Wickham et al. 2023; Croissant Millo 2022; Wickham 2023), use subsequent sections. Several example datasets corresponding model fit objects included dynamite used throughout paper illustrative purposes. script files generate datasets model fit objects can found package GitHub repository (https://https://github.com/ropensci/dynamite/) data-raw directory. Table 1 provides overview available functions methods package. presenting technical details, demonstrate key features package general workflow performing illustrative analysis real dataset synthetic dataset. Table 1:  functionality dynamite. Asterisks denote \"dynamitefit\" methods also available \"dynamiteformula\" objects.","code":"install.packages(\"dynamite\") library(\"dynamite\") install.packages(c(\"dplyr\", \"pder\", \"pryr\"))"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:seatbelt","dir":"Articles","previous_headings":"3 The dynamite package","what":"Bayesian inference of seat belt usage and traffic fatalities","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"first illustration, consider effect seat belt laws traffic fatalities using data pder package, originally analyzed Cohen Einav (2003). data consists number traffic fatalities related variables United States 51 states every year 1983 1997. time, many states passed laws regarding mandatory seat belt use. distinguish two types laws: secondary enforcement law primary enforcement law. Secondary enforcement means police can fine violators stopped offenses, whereas primary enforcement police can also stop fine based seat belt use violation . dataset named SeatBelt can loaded current R session running: begin, rename variables compute additional transformations make subsequent analyses straightforward. interested effect seat belt law traffic fatalities terms car occupants via changes seat belt usage. purpose, build joint model seat belt usage fatalities. model rate seat belt usage beta distribution (logit link) assume usage depends level seat belt law, state-level effects (modeled random intercepts), overall time-varying trend (modeled spline), captures potential changes general tendency use seat belt US. model number fatalities negative binomial distribution (log link) using total miles traveled offset. addition seat belt usage state-level random intercepts, also use several variables related traffic density, speed limit, alcohol usage, income (see ?pder::SeatBelt details) controls. First, construct model formula defines distributions response channels, covariates channel, splines used time-varying effects: Next, fit model can extract estimated coefficients summary() method shows clear positive effects secondary enforcement primary enforcement laws: coefficients can interpreted changes log-odds usual, also estimate marginal means using fitted() method returns posterior samples expected values responses time point given covariates. purpose, create new data frame level law factor assign every state uphold particular law. call fitted() using data, compute averages states finally posterior samples: estimates line results Cohen Einav (2003) report law effects seat belt usage increases 11 22 percentage points secondary enforcement primary enforcement laws, respectively. effect seat belt laws number traffic fatalities, compare number fatalities 68% seat belt usage 90% usage. values, coinciding national average 1996 target 2005, also used reported increase annual lives saved 1500–3000. comparing differences total fatalities across states year, averaging years, help fitted() method; example, model contain lagged responses covariates, enough compute predictions time point essentially independently using fitted() method. However, responses depend past values channels, case example cross-lagged panel models, estimating long-term causal effects \\(E(y_{t+k} | (y_t)), k = 1,\\ldots\\), \\((y_t)\\) denotes intervention \\(y_t\\) (Pearl 2009), complicated. illustrate next example.","code":"data(\"SeatBelt\", package = \"pder\") library(\"dplyr\") seatbelt <- SeatBelt |>   mutate(     miles = (vmturban + vmtrural) / 10000,     log_miles = log(miles),     fatalities = farsocc,     income10000 = percapin / 10000,     law = factor(       case_when(         dp == 1 ~ \"primary\",         dsp == 1 ~ \"primary\",         ds == 1 & dsp == 0 ~ \"secondary\",         TRUE ~ \"no_law\"       ),       levels = c(\"no_law\", \"secondary\", \"primary\")     )   ) seatbelt_formula <-   obs(usage ~ -1 + law + random(~1) + varying(~1), family = \"beta\") +   obs(     fatalities ~ usage + densurb + densrur +       bac08 + mlda21 + lim65 + lim70p + income10000 + unemp + fueltax +       random(~1) + offset(log_miles),      family = \"negbin\"   ) +   splines(df = 10) fit <- dynamite(   dformula = seatbelt_formula,   data = seatbelt, time = \"year\", group = \"state\",   chains = 4, refresh = 0 ) #> # A tibble: 2 × 5 #>   parameter                mean     sd    q5   q95 #>   <chr>                   <dbl>  <dbl> <dbl> <dbl> #> 1 beta_usage_lawsecondary 0.495 0.0473 0.416 0.572 #> 2 beta_usage_lawprimary   1.05  0.0864 0.907 1.19 seatbelt_new <- seatbelt seatbelt_new$law[] <- \"no_law\" pnl <- fitted(fit, newdata = seatbelt_new) seatbelt_new$law[] <- \"secondary\" psl <- fitted(fit, newdata = seatbelt_new) seatbelt_new$law[] <- \"primary\" ppl <- fitted(fit, newdata = seatbelt_new) bind_rows(no_law = pnl, secondary = psl, primary = ppl, .id = \"law\") |>   mutate(     law = factor(law, levels = c(\"no_law\", \"secondary\", \"primary\"))   ) |>   group_by(law, .draw) |>   summarize(mm = mean(usage_fitted)) |>   group_by(law) |>   summarize(     mean = mean(mm),     q5 = quantile(mm, 0.05),     q95 = quantile(mm, 0.95)   ) #> # A tibble: 3 × 4 #>   law        mean    q5   q95 #>   <fct>     <dbl> <dbl> <dbl> #> 1 no_law    0.359 0.346 0.373 #> 2 secondary 0.468 0.458 0.477 #> 3 primary   0.591 0.566 0.616 seatbelt_new <- seatbelt seatbelt_new$usage[] <- 0.68 p68 <- fitted(fit, newdata = seatbelt_new) seatbelt_new$usage[] <- 0.90 p90 <- fitted(fit, newdata = seatbelt_new) bind_rows(low = p68, high = p90, .id = \"usage\") |>   group_by(year, .draw) |>   summarize(     s = sum(       fatalities_fitted[usage == \"low\"] -         fatalities_fitted[usage == \"high\"]     )   ) |>   group_by(.draw) |>   summarize(m = mean(s)) |>   summarize(     mean = mean(m),     q5 = quantile(m, 0.05),     q95 = quantile(m, 0.95)   ) #> # A tibble: 1 × 3 #>    mean    q5   q95 #>   <dbl> <dbl> <dbl> #> 1 1553.  787. 2311."},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:multichannel","dir":"Articles","previous_headings":"3 The dynamite package","what":"Causal effects in a multichannel model","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"consider following simulated multichannel data available dynamite package estimation causal effects. data contains 50 unique groups (variable id), 20 time points (time), continuous variable \\(g_t\\) (g), variable non-negative integer values \\(p_t\\) (p), binary variable \\(b_t\\) (b). define following model (actually matches data-generating process used generate data): , aux() function creates deterministic transformation \\(p_t\\) defined \\(\\log(p_t + 1)\\) can subsequently used channels covariate correctly computes transformation predictions. model also contains lagged value logp, define initial value logp 0 first time point via past() declaration. Without initial value, receive warning message fitting model, case safely ignore warning model contains lags b g well meaning first time point model treated fixed enter model fitting process. makes past() declaration redundant instance, good practice always define initial values deterministic channels model contains lagged values avoid accidental NA values channel evaluated. directed acyclic graph (DAG) depicts causal relationships variables model shown Figure 1. fit model using dynamite() function. can obtain posterior samples summary statistics model using .data.frame(), coef(), summary() methods, opt visualizing results depicted Figure 2 using plot() method: Figure 2: Posterior means 90% posterior intervals time-invariant coefficients multichannel model. Note naming model parameters; example, beta_b_g_lag1 corresponds time-invariant coefficient beta channel b lagged covariate g. Assume now interested causal effect \\(b_5\\) \\(g_t\\) times \\(t = 6, \\ldots, 20\\). direct effect \\(b_5\\) \\(g_6\\), \\(g_t\\) affects \\(b_{t+1}\\) (\\(p_{t+1}\\)), turn affects variables \\(t+2\\), see indirect effect \\(b_5\\) \\(g_t\\) time \\(t = 7\\) onward. task, first create new dataset values response variables time \\(t = 5\\) assigned missing. obtain predictions time points \\(t = 6,\\ldots,20\\) \\(b_t\\) assigned 0 1 every individual time \\(t = 5\\), corresponding interventions \\((b_5 = 0)\\) \\((b_5 = 1)\\). default, output predict() single data frame containing original new data samples posterior predictive distribution new observations. defining type = \"mean\", specify interested posterior distribution expected values instead. case, predicted values output columns g_mean, p_mean, b_mean NA values newdata argument replaced posterior predictive samples model (output also contains additional column corresponding auxiliary channel logp posterior draw index variable .draw). can now compute summary statistics individuals posterior samples obtain posterior distribution expected causal effects \\(E(g_t | (b_5))\\) also possible perform marginalization groups within predict() using funs argument, can used provide named list lists functions applied corresponding channel. approach can save considerable amount memory case large number observations groups. names outermost list channel names. output now returned \"list\" two components, simulated observed, new samples original newdata respectively. case, can write resulting data frame sumrb equal previous sumr (apart stochasticity due simulation new trajectories). can visualize predictions shown Figure 3 writing: Figure 3: Expected causal effects interventions \\((b_5 = 0)\\) \\((b_5 = 1)\\) \\(g_t\\). black lines show posterior means gray areas show 90% posterior intervals. Predictions first 5 time points sumr NA groups design new data supplied predict() method interventions contained observations time points, set na.rm = TRUE avoid warning code. Note estimates indeed coincide causal effects (assuming course model correct), can apply backdoor adjustment formula (Pearl 1995) obtain expected causal effect: \\[    E(g_t | (b_5 = x)) = \\int E(g_t | b_5 = x, g_5, p_5)P(g_5, p_5)\\,dg_5 dp_5, \\] integral \\(p_5\\) understood sum \\(p_5\\) discrete. code , mean_t estimate expected value. addition, compute estimate difference \\[    E(g_t | (b_5 = 1)) -  E(g_t | (b_5 = 0)), \\] directly compare effects interventions writing: can also plot difference expected causal effects shown Figure 4 running: Figure 4: Difference expected causal effects \\(E(g_t | (b_5 = 1)) - E(g_t | (b_5 = 0))\\). black line shows posterior mean gray area shows 90% posterior interval. shows short-term effect \\(b_5\\) \\(g_t\\) size effect diminishes towards zero time, although posterior uncertainty quite large.","code":"head(multichannel_example) #>   id time          g  p b #> 1  1    1 -0.6264538  5 1 #> 2  1    2 -0.2660091 12 0 #> 3  1    3  0.4634939  9 1 #> 4  1    4  1.0451444 15 1 #> 5  1    5  1.7131026 10 1 #> 6  1    6  2.1382398  8 1 multi_formula <- obs(g ~ lag(g) + lag(logp), family = \"gaussian\") +   obs(p ~ lag(g) + lag(logp) + lag(b), family = \"poisson\") +   obs(b ~ lag(b) * lag(logp) + lag(b) * lag(g), family = \"bernoulli\") +   aux(numeric(logp) ~ log(p + 1) | init(0)) multichannel_fit <- dynamite(   dformula = multi_formula,   data = multichannel_example, time = \"time\", group = \"id\",   chains = 4, refresh = 0 ) library(\"ggplot2\") theme_set(theme_bw()) plot(multichannel_fit, types = \"beta\") +   labs(title = \"\") multichannel_newdata <- multichannel_example |>   mutate(across(g:b, ~ ifelse(time > 5, NA, .x))) new0 <- multichannel_newdata |>   mutate(b = ifelse(time == 5, 0, b)) pred0 <- predict(multichannel_fit, newdata = new0, type = \"mean\") new1 <- multichannel_newdata |>   mutate(b = ifelse(time == 5, 1, b)) pred1 <- predict(multichannel_fit, newdata = new1, type = \"mean\") head(pred0, n = 10) |>   round(3) #>    id time .draw g_mean p_mean b_mean  logp      g  p  b #> 1   1    1     1     NA     NA     NA 1.792 -0.626  5  1 #> 2   1    2     1     NA     NA     NA 2.565 -0.266 12  0 #> 3   1    3     1     NA     NA     NA 2.303  0.463  9  1 #> 4   1    4     1     NA     NA     NA 2.773  1.045 15  1 #> 5   1    5     1     NA     NA     NA 2.398  1.713 10  0 #> 6   1    6     1  1.853  3.592  0.698 1.099     NA NA NA #> 7   1    7     1  1.720  3.736  0.726 1.099     NA NA NA #> 8   1    8     1  1.666  1.409  0.729 0.693     NA NA NA #> 9   1    9     1  1.225  1.200  0.706 1.099     NA NA NA #> 10  1   10     1  1.416  4.148  0.704 1.792     NA NA NA sumr <- list(b0 = pred0, b1 = pred1) |>   bind_rows(.id = \"case\") |>   group_by(case, .draw, time) |>   summarize(mean_t = mean(g_mean)) |>   group_by(case, time) |>   summarize(     mean = mean(mean_t),     q5 = quantile(mean_t, 0.05, na.rm = TRUE),     q95 = quantile(mean_t, 0.95, na.rm = TRUE)   ) pred0b <- predict(   multichannel_fit, newdata = new0, type = \"mean\",   funs = list(g = list(mean_t = mean)) )$simulated pred1b <- predict(   multichannel_fit, newdata = new1, type = \"mean\",   funs = list(g = list(mean_t = mean)) )$simulated sumrb <- list(b0 = pred0b, b1 = pred1b) |>   bind_rows(.id = \"case\") |>   group_by(case, time) |>   summarize(     mean = mean(mean_t_g),     q5 = quantile(mean_t_g, 0.05, na.rm = TRUE),     q95 = quantile(mean_t_g, 0.95, na.rm = TRUE)   ) ggplot(sumr, aes(time, mean)) +   geom_ribbon(aes(ymin = q5, ymax = q95), alpha = 0.5) +   geom_line(na.rm = TRUE) +   scale_x_continuous(n.breaks = 10) +   facet_wrap(~ case) sumr_diff <- list(b0 = pred0, b1 = pred1) |>   bind_rows(.id = \"case\") |>   group_by(.draw, time) |>   summarize(     mean_t = mean(g_mean[case == \"b1\"] - g_mean[case == \"b0\"])   ) |>   group_by(time) |>   summarize(     mean = mean(mean_t),     q5 = quantile(mean_t, 0.05, na.rm = TRUE),     q95 = quantile(mean_t, 0.95, na.rm = TRUE)   ) ggplot(sumr_diff, aes(time, mean)) +   geom_ribbon(aes(ymin = q5, ymax = q95), alpha = 0.5) +   geom_line(na.rm = TRUE) +   scale_x_continuous(n.breaks = 10)"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:construction","dir":"Articles","previous_headings":"","what":"Model construction","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"describe various model components can included model formulas dynamite package. components modular easily combined order via specialized + operator ensuring model formula well-defined syntactically valid estimating model. model formula components define response channels, auxiliary channels, splines used time-varying coefficients, correlated random effects, latent factors.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:defining","dir":"Articles","previous_headings":"4 Model construction","what":"Defining response channels","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"response channels defined combining channel-specific formulas defined via function dynamiteformula() shorthand alias obs() also provided. henceforth use alias brevity. function obs() takes three arguments: formula, family, link define response variable channel depends covariates standard R formula syntax, family response variable \"character\" string, link function use \"character\" string, respectively. link function specification optional family default link. channel-specific definitions combined single model definition + operator \"dynamiteformula\" objects. example, following formula defines model two channels. First, declare y Gaussian response variable depending previous value x (lag(x)). Next, add second channel declaring x Poisson distributed depending exogenous variable z (define distribution). Note model formula can defined without referencing external data, just like R formula can. model formula object class \"dynamiteformula\" print() method provides summary defined channels, including response variable names, channel families formulas, model components: Currently, package supports following distributions observations: Bernoulli (\"bernoulli\") logit link. Beta (\"beta\") logit link, using mean precision parametrization. Binomial (\"binomial\") logit link. Categorical (\"categorical\") softmax link using first category reference. recommended use Stan version 2.23 higher enables use categorical_logit_glm function generated Stan code improved computational performance. See documentation categorical_logit_glm Stan function reference manual (https://mc-stan.org/users/documentation/) information. Exponential (\"exponential\") log link. Gamma (\"gamma\") log link, using mean shape parametrization. Gaussian (\"gaussian\") identity link, parameterized using mean standard deviation. Multinomial (\"multinomial\") softmax link using first category reference. MultivariateGaussian] (\"mvgaussian\") identity link dimension, parameterized using mean vector, standard deviation vector, Cholesky decomposition correlation matrix. Negative binomial (\"negbin\") log link, using mean dispersion parametrization, optional known offset variable. See documentation NegBinomial2() function Stan function reference manual. Ordered (\"cumulative\") logit probit link ordinal regression using cumulative parametrization class probabilities. Poisson (\"poisson\") log link, optional known offset variable. Student \\(t\\) (\"student\") identity link, parameterized using location, scale, degrees freedom. also special response variable type \"deterministic\" can used define deterministic transformations variables model. special channel type explained greater detail Section 4.8.","code":"dform <- obs(y ~ lag(x), family = \"gaussian\") +   obs(x ~ z, family = \"poisson\") print(dform) #>   Family   Formula    #> y gaussian y ~ lag(x) #> x poisson  x ~ z"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:lags","dir":"Articles","previous_headings":"4 Model construction","what":"Lagged responses and covariates","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Models dynamite package limited support contemporaneous dependencies avoid complex cyclic dependencies render processing missing data, subsequent predictions, causal inference challenging impossible. words, model structure must acyclic sense order response variables response time \\(t\\) can unambiguously defined order terms responses already defined time \\(t\\) terms variables model time \\(t-1\\) formulated Equation (1). acyclicity model implied model formula defined user checked automatically upon construction. demonstrate, following formula valid: following , y defined terms x, x defined terms z, z defined terms y, creating cycle y y. type model formulation produces error due cyclic definition responses: hand, limitations concerning dependence response variables previous values previous values exogenous covariates, .e., lags. first example Section 4.1, used syntax lag(x), shorthand lag(x, k = 1), defines first-order lag variable x used covariate. Higher-order lags can also defined adjusting argument k. argument x lag() can either response variable exogenous covariate. model component lags() can also used quickly add lagged responses covariates across multiple channels. component adds lagged value response model covariate every channel. example, calling add lag(y, k = 1) lag(x, k = 1) covariates x y. Therefore, previous code produce model writing function lags() can help simplify individual model formulas, especially model consists many channels containing large number lags. Just function lag(), argument k lags() can adjusted add higher-order lags response channel, lags() can also vector multiple lags can added . inclusion lagged response variables model implies time points must considered fixed estimation. number fixed time points model equal highest order lag \\(k\\) observed response variable model (defined either via lag() terms model component lags()). Lags exogenous covariates affect number fixed time points, covariates modeled.","code":"obs(y ~ x, family = \"gaussian\") +   obs(x ~ z, family = \"poisson\") obs(y ~ x, family = \"gaussian\") +   obs(x ~ z, family = \"poisson\") +   obs(z ~ y, family = \"categorical\") #> Error in `join_dynamiteformulas()`: #> ! The model must be acyclic. obs(y ~ z, family = \"gaussian\") +   obs(x ~ z, family = \"poisson\") +   lags(k = 1) obs(y ~ z + lag(y, k = 1) + lag(x, k = 1), family = \"gaussian\") +   obs(x ~ z + lag(y, k = 1) + lag(x, k = 1), family = \"poisson\")"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"time-varying-and-time-invariant-effects","dir":"Articles","previous_headings":"4 Model construction","what":"Time-varying and time-invariant effects","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"formula argument obs() can also contain special term varying(), defines time-varying part model equation. example, write define model equation time-invariant intercept, time-invariant effect z, time-varying effect w. also avoid defining duplicate intercept writing -1 within varying() order avoid identifiability issues model estimation. Alternatively, define time-varying intercept, case write: part formula wrapped varying() assumed correspond time-invariant part model, can alternatively defined special syntax fixed(). means following lines produce model: use fixed() therefore optional formula. time-varying time-invariant intercepts defined, model default using time-varying intercept appropriate warning provided user: defining time-varying effects, also need define respective regression coefficients depend time. purpose, splines() component added model formula, e.g., defines cubic B-spline 10 degrees freedom time-varying coefficients, corresponds coefficient variable w instance. model contains multiple time-varying coefficients, spline basis used coefficients, unique spline coefficients corresponding random-walk standard deviations coefficient. splines() component constructs matrix cardinal B-splines \\(B_t\\) using bs() function splines package based degrees freedom (df) degree polynomials used construct splines (degree, default 3 corresponding cubic B-splines). also possible switch centered (default) non-centered parametrization (Papaspiliopoulos, Roberts, Sköld 2007) spline coefficients using noncentered argument splines() component. can affect sampling efficiency Stan, depending model informativeness data (M. J. Betancourt Girolami 2013).","code":"obs(x ~ z + varying(~ -1 + w), family = \"poisson\") obs(x ~ -1 + z + varying(~ w), family = \"poisson\") obs(x ~ z + varying(~ -1 + w), family = \"poisson\") obs(x ~ -1 + fixed(~ z) + varying(~ -1 + w), family = \"poisson\") obs(x ~ fixed(~ z) + varying(~ -1 + w), family = \"poisson\") obs(y ~ 1 + varying(~1), family = \"gaussian\") #> Warning: Both time-constant and time-varying intercept specified: #> ℹ Defaulting to time-varying intercept. #>   Family   Formula             #> y gaussian y ~ 1 + varying(~1) obs(x ~ varying(~ -1 + w), family = \"poisson\") +   splines(df = 10)"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"group-level-random-effects","dir":"Articles","previous_headings":"4 Model construction","what":"Group-level random effects","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Random effect terms channel group can defined using special term random() within formula argument obs(), analogously varying() fixed(). default, random effects within group across channels modeled zero-mean multivariate Gaussian. optional model component random_spec() can used define non-correlated random effects random_spec(correlated = FALSE). addition, spline coefficients, possible switch centered non-centered (default) parametrization random effects using noncentered argument random_spec(). example, following code defines Gaussian response variable x time-invariant common effect z well group-specific intercept group-specific effect z. variable defines groups data provided call model fitting function dynamite() via group argument shown Section 5.","code":"obs(x ~ z + random(~1 + z), family = \"gaussian\")"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"latent-factors","dir":"Articles","previous_headings":"4 Model construction","what":"Latent factors","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Instead common time-varying intercept terms, possible define channel-specific univariate latent factors using lfactor() model component. latent factor modeled spline, degrees freedom spline degree defined via splines() component (case model also contains time-varying effects, spline basis definition currently used latent factors time-varying effects). argument responses lfactor() defines channels contain latent factor, argument correlated determines whether latent factors modeled correlated. , users can switch centered non-centered parametrizations using argument noncentered_psi. general, dynamic latent factors identifiable without imposing constraints factor loadings \\(\\lambda\\) latent factor \\(\\psi\\) (see e.g., Bai Wang 2015), especially context DMPMs dynamite. dynamite, identifiability problems addressed via internal reparametrization additional argument nonzero_lambda determines whether assume expected value factor loadings zero . theory thorough experiments regarding robustness identifiability constraints work progress, caution used regarding use lfactor() component.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:multivariate","dir":"Articles","previous_headings":"4 Model construction","what":"Multivariate channels","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"models one channel multivariate definition, also possible define individual channels whose responses follow multivariate distributions. obs(), multivariate response given specifying data variables define dimensions combining c(). instance, suppose wish define multivariate Gaussian channel whose dimensions given variables y1, y2, y3 time-invariant effect x dimension. write: also possible define distinct formula dimension separating dimension-specific definitions vertical bar |, example define covariates first dimension, x covariates second dimension, lagged value first dimension covariate third dimension. dimension-specific formulas can contain time-invariant time-varying effects, group-specific random effects, latent factors, just like univariate channel formulas can.","code":"obs(c(y1, y2, y3) ~ x, family = \"mvgaussian\") obs(c(y1, y2, y3) ~ 1 | x | lag(y1), family = \"mvgaussian\")"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"number-of-trials-and-offset-variables","dir":"Articles","previous_headings":"4 Model construction","what":"Number of trials and offset variables","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"special terms trials() offset() define number trials binomial multinomial channels, offset variable negative binomial Poisson channels, respectively. arguments special terms can exogenous covariates response variables model, long possible contemporaneous dependencies violate acyclicity model described Section 4.2. example, size population used offset modeling prevalence disease. Modeling population size addition prevalence enables future predictions prevalence future population size unknown. trials() offset() terms added formula similar varying() random() terms: code define model binomial response y time-invariant effect z number trials given variable n, Poisson response x time-invariant effect z variable w offset.","code":"obs(y ~ z + trials(n), family = \"binomial\") +   obs(x ~ z + offset(w), family = \"poisson\")"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:auxiliary","dir":"Articles","previous_headings":"4 Model construction","what":"Auxiliary channels","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"addition declaring response variables via obs(), can also use function aux() define auxiliary channels deterministic transformations variables model. Defining auxiliary variables explicitly instead defining implicitly right-hand side formulas, .e., using “” function (), makes subsequent prediction steps clearer allows easier checks model validity. , allow use () formula argument dynamiteformula(). values auxiliary variables computed automatically fitting model, dynamically prediction, making use lagged values transformations possible automatic prediction well. example model formula using auxiliary channel auxiliary channels, formula declaration via ~ understood mathematical equality assignment, right-hand side provides defining expression variable left-hand side. Thus, example defines new auxiliary channel whose response log1x defined logarithm 1 + x, assigns type \"numeric\". type declaration required, might possible unambiguously determine type response variable based expression alone data, especially expression contains \"factor\" type variables. Supported types include \"factor\", \"numeric\", \"integer\", \"logical\". warning issued user type declaration missing auxiliary channel definition, channel default \"numeric\" type: Auxiliary variables can used directly formulas channels, just like variable. function aux() use family argument, family automatically set \"deterministic\" special channel type obs() function. Note lagged values deterministic auxiliary channels imply fixed time points. Instead, must given starting values using one two special syntax variants, init() past() main formula separated | symbol. example , channel y contains lagged value log1x covariate, also need supply log1x single initial value determines value lag first time point. , init(0) defines initial value lag(log1x) zero individuals. general, model contains higher-order lags auxiliary channel, init() can supplied vector initializing lag. init() defines starting value used individuals, alternative, special syntax past() can used, takes R expression argument computes starting value individual based expression. expression evaluated context data supplied model fitting function dynamite(). example, instead init(0) example , write: defines value lag(log1x) first time point log(z) individual, using value z data supplied compute actual value expression. special syntax past() can also used model contains higher-order lags auxiliary responses. case, additional observations variables bound expression given argument simply used define initial values.","code":"obs(y ~ lag(log1x), family = \"gaussian\") +   obs(x ~ z, family = \"poisson\") +   aux(numeric(log1x) ~ log(1 + x) | init(0)) aux(log1x ~ log(1 + x) | init(0)) #> Warning: No type specified for deterministic channel `log1x`: #> ℹ Assuming type is <numeric>. #>       Family        Formula                      #> log1x deterministic log1x ~ log(1 + x) | init(0) obs(y ~ lag(log1x), family = \"gaussian\") +   obs(x ~ z, family = \"poisson\") +   aux(numeric(log1x) ~ log(1 + x) | past(log(z)))"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:modelvis","dir":"Articles","previous_headings":"4 Model construction","what":"Visualizing the model structure","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"plot() method available \"dynamiteformula\" objects can used easily visualize overall model structure DAG. method can produce either \"ggplot\" object model plot \"character\" string describing TikZ (Tantau 2024) code render figure report, example. illustration, produce analogous \"ggplot\" version DAG depicting multichannel model considered Section 3.2. Figure 5 shows plots obtained running following. Figure 5: DAGs multichannel model created using plot() method \"dynamitefit\" objects. left panel shows model structure including auxiliary channel logp right panel shows model structure auxiliary channel included. latter DAG obtained via functional projection parents logp become parents children logp logp removed graph timepoint. , used argument show_auxiliary project deterministic auxiliary variable logp DAG shown right panel Figure 5, produces DAG shown Figure @ref(fig:multichannel_dag). addition, argument show_covariates can used control whether exogenous covariates included plot (default FALSE hiding covariates). Vertical, horizontal, diagonal edges otherwise pass vertices automatically curved resulting figure avoid overlapping vertices, can still occur complicated models. demonstrated Figure 5, mathematical notation always rendered ideally \"ggplot\" figures. generate publication-quality figures vector graphics, argument tikz provided. setting tikz = TRUE, can obtain corresponding TikZ code figure follows: default style used generated TikZ code mimics style used Figure 1.","code":"plot(multi_formula) plot(multi_formula, show_auxiliary = FALSE) cat(plot(multi_formula, show_auxiliary = FALSE, tikz = TRUE)) #> % Preamble #> \\usepackage{tikz} #> \\usetikzlibrary{positioning, arrows.meta, shapes.geometric} #> \\tikzset{% #>   semithick, #>   >={Stealth[width=1.5mm,length=2mm]}, #>   obs/.style 2 args = { #>     name = #1, circle, draw, inner sep = 8pt, label = center:$#2$ #>   } #> } #> % DAG #> \\begin{tikzpicture} #>   \\node [obs = {v1}{g_{t - 1}}] at (-1, 3) {\\vphantom{0}}; #>   \\node [obs = {v2}{p_{t - 1}}] at (-1, 2) {\\vphantom{0}}; #>   \\node [obs = {v3}{b_{t - 1}}] at (-1, 1) {\\vphantom{0}}; #>   \\node [obs = {v4}{g_{t + 1}}] at (1, 3) {\\vphantom{0}}; #>   \\node [obs = {v5}{p_{t + 1}}] at (1, 2) {\\vphantom{0}}; #>   \\node [obs = {v6}{b_{t + 1}}] at (1, 1) {\\vphantom{0}}; #>   \\node [obs = {v7}{g_{t}}] at (0, 3) {\\vphantom{0}}; #>   \\node [obs = {v8}{p_{t}}] at (0, 2) {\\vphantom{0}}; #>   \\node [obs = {v9}{b_{t}}] at (0, 1) {\\vphantom{0}}; #>   \\draw [->] (v1) -- (v7); #>   \\draw [->] (v1) -- (v8); #>   \\draw [->] (v3) -- (v8); #>   \\draw [->] (v3) -- (v9); #>   \\draw [->] (v1) -- (v9); #>   \\draw [->] (v2) -- (v7); #>   \\draw [->] (v2) -- (v8); #>   \\draw [->] (v2) -- (v9); #>   \\draw [->] (v7) -- (v4); #>   \\draw [->] (v7) -- (v5); #>   \\draw [->] (v9) -- (v5); #>   \\draw [->] (v9) -- (v6); #>   \\draw [->] (v7) -- (v6); #>   \\draw [->] (v8) -- (v4); #>   \\draw [->] (v8) -- (v5); #>   \\draw [->] (v8) -- (v6); #> \\end{tikzpicture}"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:fitting","dir":"Articles","previous_headings":"","what":"Model fitting and posterior inference","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"estimate model, declared model formula supplied dynamite() function, following arguments: function parses model formula data generate custom Stan model, compiled used simulate posterior distribution model parameters. first three arguments function mandatory. first argument dformula \"dynamiteformula\" object defines model using model components described Section 4. second argument data \"data.frame\" \"data.table\" object contains variables used model formula. third argument time column name data specifies unique time points. remaining arguments function optional. group argument column name data specifies unique groups (individuals), group NULL assume single group (individual). argument priors supplies user-defined priors model parameters. Stan backend can selected using backend argument, accepts either \"rstan\" (default) \"cmdstanr\". options correspond using rstan cmdstanr packages estimation, respectively. verbose verbose_stan arguments control verbosity output dynamite() Stan, respectively. Additional C++ compiler options optimization level can specified stanc_options using \"cmdstanr\" backend. Stan supports -chain parallelization via cores parallel_chains arguments \"rstan\" \"cmdstanr\" backends, respectively, also supports within-chain parallelization. -chain parallelization, computations split single process assigned one Markov-chains whereas within-chain parallelization, computations related single Markov chain split, conditionally independent likelihood function evaluations. forms parallelization can leveraged via dynamite(). -chain parallelization, cores parallel_chains arguments can passed directly backend sampling function via ... (either rstan::sampling() sample() method \"CmdStanModel\" model object). within-chain parallelization, threaded variants likelihood functions implemented dynamite reduce-sum functionality Stan, following two arguments provided: threads_per_chain controls number threads use per chain, grainsize defines suggested size partial sums (see Stan manual information). custom Stan model code can provided via custom_stan_model, can either \"character\" string containing model code path .stan file contains model code. Using argument override automatically generated model code intended expert users . Model customization discussed greater length related package vignette can accessed writing vignette(\"dynamite_custom\", package = \"dynamite\"). debug argument can used various debugging options (see ?dynamite information options arguments function). data argument supplied long format, .e., \\(N \\times T\\) rows case balanced panel data. Acceptable column types data \"integer\", \"logical\", \"double\", \"character\", objects class \"factor\", objects class \"ordered factor\". Columns \"character\" type converted \"factor\" columns. Beyond standard types, special classes \"Date\" whose internal storage type one aforementioned types can used, classes dropped, columns converted respective storage types. List columns supported. time argument \"numeric\" \"factor\" column data. time \"factor\" column, converted \"integer\" column. Missing values response predictor columns supported non-finite values . Observations missing covariate response values omitted data model fitted. example, following function call estimate model using data data frame d, contains variables year id (defining time-index group-index variables data, respectively). Arguments chains cores passed rstan::sampling() uses two parallel Markov chains MCMC sampling model parameters (defined chains = 2 cores = 2). output dynamite() \"dynamitefit\" object standard S3 methods summary(), plot(), print(), fitted(), predict() provided along various methods utility functions describe following sections detail.","code":"dynamite(   dformula, data, time, group = NULL, priors = NULL, backend = \"rstan\",   verbose = TRUE, verbose_stan = FALSE, stanc_options = list(\"O0\"),   threads_per_chain = 1L, grainsize = NULL, custom_stan_model = NULL,   debug = NULL, ... ) dynamite(   dformula = obs(x ~ varying(~ -1 + w), family = \"poisson\") +     splines(df = 10),   data = d, time = \"year\", group = \"id\",   chains = 2, cores = 2 )"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"user-defined-priors","dir":"Articles","previous_headings":"5 Model fitting and posterior inference","what":"User-defined priors","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"function get_priors() can used determine parameters model whose prior distribution can customized. function can applied existing model fit object (\"dynamitefit\") model formula object (\"dynamiteformula\"). function returns \"data.frame\" object, user can manipulate include desired priors subsequently supply model fitting function dynamite(). rationale behind default prior specifications discussed detail related package vignette can viewed writing vignette(\"dynamite_priors\", package = \"dynamite\"). instance, using model fit object gaussian_example_fit available dynamite package, following priors: customize prior distribution, user needs manipulate prior column desired parameters \"data.frame\" using appropriate Stan syntax parametrization. categorical response variable, column category describes category parameter related . model parameters type response, vectorized form corresponding distribution automatically used generated Stan code applicable. definitions prior distributions checked validity model fitting process.","code":"get_priors(gaussian_example_fit) #>          parameter response             prior      type category #> 1 sigma_nu_y_alpha        y    normal(0, 3.1)  sigma_nu          #> 2          alpha_y        y  normal(1.5, 3.1)     alpha          #> 3      tau_alpha_y        y    normal(0, 3.1) tau_alpha          #> 4         beta_y_z        y    normal(0, 3.1)      beta          #> 5        delta_y_x        y    normal(0, 3.1)     delta          #> 6   delta_y_y_lag1        y    normal(0, 1.8)     delta          #> 7          tau_y_x        y    normal(0, 3.1)       tau          #> 8     tau_y_y_lag1        y    normal(0, 1.8)       tau          #> 9          sigma_y        y exponential(0.65)     sigma"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"extracting-model-fit-information","dir":"Articles","previous_headings":"5 Model fitting and posterior inference","what":"Extracting model fit information","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"can obtain simple model summary print() method objects class \"dynamitefit\". instance, model fit object gaussian_example_fit gives following output: default, argument full_diagnostics print() method set FALSE means model diagnostics computed time-invariant non-group-specific parameters. Setting argument TRUE compute diagnostics model parameters can time-consuming complex models. Convergence MCMC chains smallest effective sample sizes model parameters can assessed using mcmc_diagnostics() method \"dynamitefit\" object whose arguments model fit object n, number potentially problematic variables report (default 3). refer reader (Vehtari et al. 2021) documentation rstan::check_hmc_diagnostics() posterior::default_convergence_measures() functions detailed information diagnostics reported mcmc_diagnostics() function. note due CRAN file size restrictions, number stored posterior samples example \"dynamitefit\" object small, leading small effective sample sizes. Diagnostics specific HMC can extracted hmc_diagnostics() method. table posterior draws summaries parameter model can obtained methods .data.frame() .data.table() differ output type (\"data.frame\" \"data.table\"). specifically, output .data.frame() tibble; tidyverse variant data frames class \"tbl_df\" defined tibble package (Müller Wickham 2023). two methods following arguments: , x \"dynamitefit\" object types \"character\" vector determines types parameters included output. types used, \"character\" vector argument parameters can used specify exactly parameters model included. argument responses can used select parameters related specific response channels. determining suitable options arguments types parameters, methods get_parameter_types() get_parameter_names() can used. arguments times groups can used restrict parameters output include specific time points groups, respectively. argument summary determines whether provide summary statistics (mean, standard deviation, quantiles selected argument probs) parameter, full posterior draws. argument include_fixed determines whether include parameters related fixed time points output (see Section 4.2 details fixed time points). default arguments methods keep.rownames, row.names, optional, ... ignored \"dynamitefit\" objects. parameter types used dynamite described Table 2. Table 2:  parameter types used dynamite. instance, can extract posterior summary time-invariant regression coefficients (types = \"beta\") response variable y gaussian_example_fit object writing: \"dynamitefit\" objects, summary() method shortcut .data.frame(summary = TRUE). generated Stan code model can extracted method get_code() \"character\" string. feature geared towards advanced users may example need make slight modifications generated code order adapt model specific scenario accomplished dynamite model syntax. generated code also contains helpful annotations describing model blocks, parameters, complicated code sections. Using argument blocks, can extract specific blocks full model code. illustrate, extract parameters block gaussian_example_fit model code full model code large display. Conversely, customized Stan model code can supplied dynamite() using custom_stan_model argument.","code":"print(gaussian_example_fit) #> Model: #>   Family   Formula                                        #> y gaussian y ~ -1 + z + varying(~x + lag(y)) + random(~1) #>  #> Correlated random effects added for response(s): y #>  #> Data: gaussian_example (Number of observations: 1450) #> Grouping variable: id (Number of groups: 50) #> Time index variable: time (Number of time points: 30) #>  #> NUTS sampler diagnostics: #>  #> No divergences, saturated max treedepths or low E-BFMIs. #>  #> Smallest bulk-ESS: 178 (sigma_y) #> Smallest tail-ESS: 156 (tau_alpha_y) #> Largest Rhat: 1.018 (beta_y_z) #>  #> Elapsed time (seconds): #>         warmup sample #> chain:1  6.313  3.086 #> chain:2  6.472  3.322 #>  #> Summary statistics of the time- and group-invariant parameters: #> # A tibble: 6 × 10 #>   variable      mean median      sd     mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>        <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 beta_y_z    1.97   1.97   0.0112  0.0113  1.95   1.98  1.02      230.     175. #> 2 sigma_nu_y… 0.0955 0.0940 0.0117  0.0103  0.0791 0.120 1.00      195.     157. #> 3 sigma_y     0.198  0.198  0.00404 0.00401 0.192  0.205 0.995     178.     188. #> 4 tau_alpha_y 0.200  0.193  0.0463  0.0440  0.139  0.283 0.999     211.     156. #> 5 tau_y_x     0.364  0.348  0.0770  0.0746  0.253  0.497 1.01      198.     187. #> 6 tau_y_y_la… 0.105  0.102  0.0208  0.0195  0.0764 0.140 1.01      231.     186. mcmc_diagnostics(gaussian_example_fit) #> NUTS sampler diagnostics: #>  #> No divergences, saturated max treedepths or low E-BFMIs. #>  #> Smallest bulk-ESS values:  #>                        #> nu_y_alpha_id16    106 #> alpha_y[28]        118 #> delta_y_y_lag1[14] 118 #>  #> Smallest tail-ESS values:  #>                   #> alpha_y[7]    109 #> alpha_y[14]   111 #> delta_y_x[13] 114 #>  #> Largest Rhat values:  #>                      #> delta_y_x[12]   1.04 #> delta_y_x[8]    1.03 #> nu_y_alpha_id39 1.03 as.data.frame.dynamitefit(   x, keep.rownames, row.names = NULL, optional = FALSE, types = NULL,   parameters = NULL, responses = NULL, times = NULL, groups = NULL,   summary = FALSE, probs = c(0.05, 0.95), include_fixed = TRUE, ... ) as.data.frame(   gaussian_example_fit,   responses = \"y\", types = \"beta\", summary = TRUE ) #> # A tibble: 1 × 10 #>   parameter  mean     sd    q5   q95  time group category response type  #>   <chr>     <dbl>  <dbl> <dbl> <dbl> <int> <int> <chr>    <chr>    <chr> #> 1 beta_y_z   1.97 0.0112  1.95  1.98    NA    NA NA       y        beta cat(get_code(gaussian_example_fit, blocks = \"parameters\")) #> parameters { #>   // Random group-level effects #>   vector<lower=0>[M] sigma_nu; // standard deviations of random effects #>   matrix[N, M] nu_raw; #>   vector[K_fixed_y] beta_y; // Fixed coefficients #>   matrix[K_varying_y, D] omega_y; // Spline coefficients #>   vector<lower=0>[K_varying_y] tau_y; // SDs for the random walks #>   real a_y; // Mean of the first time point #>   row_vector[D - 1] omega_raw_alpha_y; // Coefficients for alpha #>   real<lower=0> tau_alpha_y; // SD for the random walk #>   real<lower=0> sigma_y; // SD of the normal distribution #> }"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"visualizing-the-posterior-distributions","dir":"Articles","previous_headings":"5 Model fitting and posterior inference","what":"Visualizing the posterior distributions","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"plot() method \"dynamitefit\" objects can used obtain plots various types model fit using ggplot2 package produce plots. method following arguments: arguments type, parameters, responses, groups times analogous .data.frame() method selecting parameters plotted. Arguments level, alpha, facet scales control visual aspects plot: level defines plotted posterior intervals 100 * (1 - 2 * level) % intervals, alpha opacity level ggplot2::geom_ribbon() plotting posterior intervals, facet determines whether time-invariant parameters plotted together (FALSE) separately using ggplot2::facet_wrap() (TRUE), scales selects whether vertical axis different parameters (\"fixed\") allowed vary parameters (\"free\"). Finally, n_params controls maximum number parameters type plot. default, number parameters limited prevent accidental plots large number parameters may take excessively long time render. Next, showcase example plots different plot types available via plot_type argument. instance, Figure 6 shows posterior means posterior intervals time-varying intercept (type \"alpha\") time-varying regression coefficients (type \"delta\") gaussian_example_fit model (using \"default\" option plot_type argument default). Figure 6: Posterior means (black lines) 90% posterior intervals (gray areas) time-varying coefficients response variable y gaussian_example_fit model. panels left right show time-varying intercept y, time-varying effect x y, time-varying effect lag(y) (previous time-point) y. plot_type = \"default\" produces plots Figure @ref(fig:parameter_posterior_plot), using plot_type = \"trace\" instead provides marginal posterior densities traceplots MCMC chains, shown Figure @ref(fig:gaussian_trace) also select time-invariant regression coefficients model plotted. Figure 7: Marginal posterior density traceplot MCMC chains time-invariant regression coefficient beta_y_z z response variable y gaussian_example_fit model. third option plot_type = \"dag\" can used visualize structure model DAG shown Figure 5 described Section 4.9.","code":"plot.dynamitefit(   x, plot_type = c(\"default\", \"trace\", \"dag\"), types = NULL,   parameters = NULL, responses = NULL, groups = NULL, times = NULL,   level = 0.05, alpha = 0.5, facet = TRUE, scales = c(\"fixed\", \"free\"),   n_params = NULL, ... ) plot(   gaussian_example_fit,   types = c(\"alpha\", \"delta\"), scales = \"free\" ) +   labs(title = \"\") plot(gaussian_example_fit, plot_type = \"trace\", types = \"beta\")"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"missing-data-and-multiple-imputation","dir":"Articles","previous_headings":"5 Model fitting and posterior inference","what":"Missing data and multiple imputation","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Panel data often contains missing observations various reasons. common approach Bayesian setting treat missing observations additional unknown parameters, sample along model parameters MCMC. However, MCMC sampling dynamite based Stan’s variant gradient-based NUTS algorithm (Hoffman Gelman 2014; M. Betancourt 2018), used sample discrete variables missing count data. Therefore, default behavior dynamite use complete-case approach unbiased data missing completely random well certain specific settings (van Buuren 2018). alternative complete-case analysis dynamite(), function dynamice() first performs multiple imputation using imputation algorithms mice package (van Buuren Groothuis-Oudshoorn 2011), runs MCMC imputed sample, combines posterior samples run, suggested example (Gelman et al. 2013). dynamice() function arguments dynamite() additions. argument mice_args \"list\" can used provide arguments underlying imputation function mice() mice package. Format data imputation can selected impute_format argument accepts either \"wide\" \"long\". Data wide format one group per row (observations different time points different columns) data long format corresponds standard data format dynamite() described Section 5. Argument keep_imputed \"logical\" value can used select whether imputed data sets included return object dynamice(). TRUE, imputed data sets found imputed field returned \"dynamitefit\" object. methods \"dynamitefit\" objects available also model fits obtained dynamice(), noted convergence measures effective samples sizes reported mcmc_diagnostics() may unreliable model fits.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"dynamite package provides comprehensive set features obtaining predictions based posterior distribution model parameters. package supports imputation missing exogenous covariate values (via last observation carried forward next observation carried backward), aggregated individual-level predictions, various methods account new levels group variable random effects. Counterfactual predictions can also obtained enables study causal effects intricate causal quantities. noted predictions directly support forecasting unambiguous way define splines time-varying regression coefficients behave outside observed time points. However, predictions can obtained augmenting original data missing values future time points. Furthermore, package can used generate data DMPM without existing model fit first specifying values model parameters fixed covariates (see package vignette data simulation information: vignette(\"dynamite_simulation\", package = \"dynamite\")). predict() method \"dynamitefit\" objects can used obtain predictions posterior predictive distribution. function following arguments: explain important arguments method refer reader package documentation information. first argument object \"dynamitefit\" object predictions based . argument newdata can used define groups, time points, covariate values predictions computed . newdata NULL, predictions computed original data supplied dynamite() function model fitted first non-fixed time point onward. type argument selects type computed predictions. default, type = \"response\" returns individual-level simulated predictions response variables model. Options \"link\" \"mean\" return linear predictor values expected values posterior predictive distribution, respectively. argument n_draws controls number posterior draws used prediction. default, draws used. Alternatively, argument thin can used select every thinth posterior draw used prediction task. example, can obtain posterior predictive samples first 4 groups gaussian_example dataset using corresponding model fit object gaussian_example_fit first 50 posterior draws. predictions shown Figure 8 can obtained follows: Figure 8: Posterior predictive samples first 4 groups gaussian_example data. Lines red represent observed values. fitted() method also provided \"dynamitefit\" objects. contrast multi-step predictions predict(), function computes expected values posterior predictive distributions time point conditional original observations. note multi-step predictions contain parameter uncertainty also inherent aleatoric (stochastic) uncertainty trajectories. Monte Carlo variation due finite number posterior samples can reduced increasing number iterations chains MCMC run (posterior summaries) combining samples multiple predict() calls case Monte Carlo error mostly due trajectory simulation.","code":"predict.dynamitefit(   object, newdata = NULL, type = c(\"response\", \"mean\", \"link\"),   funs = list(), impute = c(\"none\", \"locf\", \"nocb\"),   new_levels = c(\"none\", \"bootstrap\", \"gaussian\", \"original\"),   global_fixed = FALSE, n_draws = NULL, thin = 1,   expand = TRUE, df = TRUE, ... ) pred <- predict(gaussian_example_fit, n_draws = 50) pred |>   dplyr::filter(id < 5) |>   ggplot(aes(time, y_new, group = .draw)) +   geom_line(alpha = 0.5) +   geom_line(aes(y = y), colour = \"tomato\") +   facet_wrap(~ id)"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"aggregated-predictions-and-memory-conservation","dir":"Articles","previous_headings":"6 Prediction","what":"Aggregated predictions and memory conservation","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"large datasets complicated models, obtaining individual-level predictions can memory-intensive. example, data 100 groups, 100 time points, categorical response 4 categories, 1000 posterior draws result 40 million elements. simple way reduce memory usage set argument expand predict() FALSE (default TRUE). Disabling argument separates simulated values fixed covariates model two \"data.table\" objects output, called simulated observed, returned \"list\" object. optimization always carried internally, meaning value expand argument affects returned output. reduce memory usage, argument funs can used obtain aggregated predictions instead full individual-level predictions time point. argument accepts named list lists named functions response channel model, supplied functions applied individuals. resulting columns output named based function names response variables. expand argument automatically set FALSE using funs argument. example, compute mean standard deviation predictions response variable y gaussian_example dataset time point follows: reduction memory usage compared full individual-level predictions rather substantial even simple scenario: funs argument can also used aggregate expected values posterior predictive distribution type = \"mean\":","code":"pred_funs <- predict(   gaussian_example_fit,   funs = list(y = list(mean = mean, sd = sd)) ) head(pred_funs$simulated) #>     mean_y      sd_y time .draw #> 1       NA        NA    1     1 #> 2 1.504474 0.8527229    2     1 #> 3 1.705757 1.3061120    3     1 #> 4 1.722222 1.2155877    4     1 #> 5 2.121926 1.2646230    5     1 #> 6 2.186567 1.3738596    6     1 library(\"pryr\") pred_full <- predict(gaussian_example_fit) object_size(pred_full) #> 12.00 MB object_size(pred_funs) #> 188.34 kB pred_funs_mean <- predict(   gaussian_example_fit,   type = \"mean\",   funs = list(y = list(mean = mean, sd = sd)) ) head(pred_funs_mean$simulated) #>     mean_y      sd_y time .draw #> 1       NA        NA    1     1 #> 2 1.512491 0.8425512    2     1 #> 3 1.720646 1.3097006    3     1 #> 4 1.719707 1.1955273    4     1 #> 5 2.099282 1.2462898    5     1 #> 6 2.187195 1.3636075    6     1"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"sec:summary","dir":"Articles","previous_headings":"","what":"Summary","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"vignette, presented dynamite package Bayesian inference DMPMs. package provides user-friendly interface model construction, estimation, prediction, posterior inference, visualization extensive detailed documentation features. package designed general possible supporting multivariate models, many response variable distributions, custom prior distributions, common model features time-varying effects group-specific random effects. package design also aims high performance model estimation employing Stan general-purpose data manipulation using data.table especially reflected prediction. advanced users, Stan code generated dynamite can extracted adapted user-specific scenarios. future, plan extend capabilities dynamite adding support distributions. distributions Stan also lack efficient likelihood function variants, Bernoulli distribution, likely become available future subsequently implemented dynamite well.","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite.html","id":"app:latentfactor","dir":"Articles","previous_headings":"","what":"Details on latent factors","title":"dynamite: An R Package for Dynamic Multivariate Panel Models","text":"Latent factor models product terms \\(\\lambda_i\\psi_t\\) known suffer identifiability issues. example, possible multiply \\(\\lambda_i\\) constant \\(c\\) simultaneously multiplying \\(\\psi_i, t=1,\\ldots, T\\) reciprocal constant, leading likelihood value original model. case multiple latent factors (vector) autoregressive process \\(\\psi_t\\), discuss two alternative identifiability constraints, single factor model translate fixing \\(\\lambda_i = 1\\) \\(\\), constraining \\(\\lambda_i > 0\\) \\(\\), additional constraint standard deviation noise term \\(\\psi_t\\) 1. cases, need decide individual used reference constrained \\(\\lambda_i\\). choice can lead computational issues true value \\(\\lambda_i\\) compatible constrains (e.g., true value zero). Instead, define constraints via mean \\(\\lambda\\). Denote expected value factor loadings \\(\\bar \\lambda\\). Now write \\(\\lambda_i = \\bar \\lambda + \\sigma^\\ast_\\lambda \\lambda^\\ast_i\\) \\(\\lambda^\\ast_i \\sim N(0, 1)\\). dynamite models \\(\\psi_t\\) spline, ease exposition assume \\(\\psi_t\\) simple random walk \\(\\psi_t = \\psi_{t-1} + \\sigma_\\psi\\xi_t\\). Assume first \\(\\bar \\lambda \\neq 0\\). case, can write \\[   (\\bar\\lambda + \\sigma^\\ast_\\lambda \\lambda^\\ast_i)\\psi_t, \\quad \\psi_t = \\psi_{t-1} + \\sigma_\\psi\\xi_t \\] \\[   \\lambda_i\\psi_t, \\quad \\psi_t = \\psi_{t-1} + \\tau_\\psi\\xi_t, \\] \\(\\lambda_i = 1 + \\sigma_\\lambda\\lambda_i^\\ast\\), \\(\\sigma_\\lambda= \\sigma^\\ast_\\lambda / \\bar\\lambda\\), \\(\\tau_\\psi = \\bar\\lambda\\sigma_\\psi\\). Sampling \\(\\sigma_\\lambda\\) \\(\\tau_\\psi\\) can inefficient due strong negative correlation parameters, instead sample (set priors ) \\(\\zeta = \\sigma_\\lambda + \\tau_\\psi\\) \\(0 < \\kappa < 1\\) \\(\\sigma_\\lambda = \\kappa \\zeta\\) \\(\\tau_\\psi = (1 - \\kappa) \\zeta\\). instead \\(\\bar\\lambda = 0\\), \\(\\lambda_i\\psi_t = \\sigma^\\ast_\\lambda \\lambda^\\ast_i\\psi_t\\) uniquely identifiable, fix \\(\\tau_\\psi=1\\) sample \\(\\sigma_\\lambda\\) directly. However, still possible encounter multimodality due sign-switching, affect predictions obtained model, automatic diagnostics MCMC samples can misleading. default, dynamite tries fix adjusting signs \\(\\lambda\\) \\(\\psi\\) terms based mean spline coefficients corresponding \\(\\psi\\). However, works mean spline coefficients close zero, possible turn option user can try fix sign-switching post-processing steps, e.g., using algorithms label.switching package (Papastamoulis 2016).","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_custom.html","id":"using-modified-stan-code-with-dynamite","dir":"Articles","previous_headings":"","what":"Using modified Stan code with dynamite","title":"Model customization and non-MCMC estimation with dynamite","text":"get_code() method can used extract generated Stan code inspection: Calling cat(dynamite_code) code prints code, can write directly file example sink(). get_code() method also works dynamitefit objects, e.g., get_code(gaussian_example_fit). Consider example instead normal distribution random effects, like use \\(t\\)-distributed random effects. directly supported dynamite, previously obtained Stan code easy modify purpose. replace line to_vector(nu_raw) ~ std_normal(); model block original model code add real<lower=2> df; parameters block. Now can call dynamite new model code, using custom_stan_model argument, accepts either character string containing model code path .stan file. print() method recognize new parameter df, can extract samples manually stanfit object: important note order use post-processing functions dynamite, modifications Stan code alter names sizes higher level parameters random effect parameters nu example. Modifying priors, rewriting likelihood calculations transformed parameters efficiency gains, adding constraints parameters, computing additional variables generated quantities block potential modifications allows still use many useful functions dynamite. example, can visualize random effects custom model:  perform leave-one-cross-validation: compute predictions:","code":"f <- obs(y ~ -1 + z + varying(~ x + lag(y)) + random(~1), \"gaussian\") +   splines(df = 20) dynamite_code <- get_code(f, data = gaussian_example, time = \"time\",                           group = \"id\") df ~ gamma(2, 0.1); to_vector(nu_raw) ~ student_t(df, 0, 1); fit <- dynamite(   dformula = f, data = gaussian_example, time = \"time\",  group = \"id\",   custom_stan_model = \"custom_code.stan\", chains = 1, refresh = 0 ) as.array(fit$stanfit, pars = \"df\") |>   posterior::as_draws_df() |>   posterior::summarise_draws() #> # A tibble: 1 × 10 #>   variable  mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>   <chr>    <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 df        21.8   18.5  14.2  11.9  5.30  48.2  1.00     638.     551. plot(fit, type = \"nu\", n_params = 20) loo(fit) #>  #> Computed from 1000 by 1450 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo    244.0 27.0 #> p_loo        89.4  3.3 #> looic      -487.9 54.1 #> ------ #> MCSE of elpd_loo is 0.3. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.3, 1.8]). #>  #> All Pareto k estimates are good (k < 0.67). #> See help('pareto-k-diagnostic') for details. newdata <- data.frame(   time = 1:30,   id = 51,   y = rep(c(3, NA), times = c(10, 20)),   x = 0,   z = 1 )  pp <- predict(fit, newdata = newdata, new_levels = \"original\", n_draws = 50)  ggplot2::ggplot(pp, ggplot2::aes(time, y_new, group = .draw)) +   ggplot2::geom_line(alpha = 0.1) +   ggplot2::theme_bw()"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_custom.html","id":"using-non-mcmc-algorithms-in-dynamite","dir":"Articles","previous_headings":"","what":"Using non-MCMC algorithms in dynamite","title":"Model customization and non-MCMC estimation with dynamite","text":"dynamite written MCMC estimation DMPMs, can still use algorithms provided Stan. Continuing previous example, want variational inference instead, first extract input data Stan get_data(): Like get_code(), method available dynamiteformula dynamitefit objects. custom code corresponding input data, can call variational algorithm rstan: can analogously perform optimization rstan::optimization() analyze results standalone Stan model. However, vb() returns stanfit object samples approximate posterior, can also exploit functionality dynamite. Let’s assume want perform variational inference MCMC slow. first create dynamitefit object fit dynamite() call iterations, can replace fit$stanfit stanfit object returned rstan::vb(): Now methods dynamitefit objects summary() predict() work MCMC based output (note though example rhat ess values summary() meaningful):","code":"d <- get_data(fit) model <- rstan::stan_model(\"custom_code.stan\") fit_vb <- rstan::vb(model, data = d, iter = 1e5, refresh = 0) #> Warning: Pareto k diagnostic value is 2.45. Resampling is disabled. Decreasing #> tol_rel_obj may help if variational algorithm has terminated prematurely. #> Otherwise consider using sampling instead. fit_vb_dynamite <- fit fit_vb_dynamite$stanfit <- fit_vb summary(fit_vb_dynamite, types = \"beta\") #> # A tibble: 1 × 10 #>   parameter  mean      sd    q5   q95  time group category response type  #>   <chr>     <dbl>   <dbl> <dbl> <dbl> <int> <int> <chr>    <chr>    <chr> #> 1 beta_y_z   1.97 0.00696  1.96  1.98    NA    NA NA       y        beta pp2 <- predict(   fit_vb_dynamite, newdata = newdata, new_levels = \"original\", n_draws = 50 )  ggplot2::ggplot(pp2, ggplot2::aes(time, y_new, group = .draw)) +   ggplot2::geom_line(alpha = 0.1) +   ggplot2::theme_bw()"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"default-prior-distributions-in-dynamite","dir":"Articles","previous_headings":"","what":"Default prior distributions in dynamite","title":"Priors for dynamic multivariate panel models","text":"default priors dynamite chosen relatively uninformative (.e., weakly informative) provide computational stability slightly regularizing posterior. motivation behind default priors thus similar popular Stan-based R packages brms1 rstanarm2. Define \\(\\sigma_x=\\max(1, \\text{SD}(x))\\), \\(\\mbox{SD}(x)\\) standard deviation predictor variable \\(x\\) groups non-fixed time points (see section “Lagged responses predictors” main vignette information: vignette(\"dynamite\", package = \"dynamite\")). Define also \\[ \\sigma_y = \\begin{cases} \\max(1, \\text{SD}(y)), &\\text{family gaussian student}\\\\ 1, &\\text{otherwise} \\end{cases}, \\] \\(\\mbox{SD}(y)\\) standard deviation response variable groups non-fixed time points.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"regression-coefficients","dir":"Articles","previous_headings":"1 Default prior distributions in dynamite","what":"Regression coefficients","title":"Priors for dynamic multivariate panel models","text":"define default prior time-invariant regression coefficients \\(\\beta\\) well first time-varying coefficient \\(\\delta_1\\) zero-mean normal distribution standard deviation \\(2\\sigma_y/\\sigma_x\\). two maximums used definitions \\(\\sigma_y\\) \\(\\sigma_x\\) ensure prior standard deviation least 2.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"intercept","dir":"Articles","previous_headings":"1 Default prior distributions in dynamite","what":"Intercept","title":"Priors for dynamic multivariate panel models","text":"posterior correlations intercept \\(\\alpha\\) regression coefficients \\(\\beta\\) \\(\\delta\\) can cause computational inefficiencies gradient-based sampling algorithms Stan, sampling intercept performed indirectly via parameter \\(\\), intercept \\(\\alpha\\) (\\(\\alpha_1\\) case time-varying intercept) constructed \\[ \\alpha = - \\bar X^\\beta_1\\beta - \\bar X_1^\\delta\\delta_1, \\] \\(\\bar X^\\beta\\) \\(\\bar X^\\delta\\) means corresponding predictors first (non-fixed) time point. prior defined \\(\\) \\[ \\sim \\mbox{N}(\\bar y, 2\\sigma_y), \\] \\(\\bar y\\) mean response variable values first time point applying link function (except case categorical multinomial response \\(\\bar y\\) set zero).","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"standard-deviation-parameters","dir":"Articles","previous_headings":"1 Default prior distributions in dynamite","what":"Standard deviation parameters","title":"Priors for dynamic multivariate panel models","text":"prior standard deviation parameter \\(\\tau\\) random walk prior spline coefficients half-normal standard deviation \\(2\\sigma_y/\\sigma_x\\) (\\(\\sigma_x=1\\) case time-varying intercept). prior distribution also used standard deviations random effects. Note prior can uninformative cases especially \\(\\tau\\) parameters. boundary (zero) avoiding \\(Gamma(2, z)\\) prior suitable value \\(z\\) can often work better \\(\\tau\\) default prior leads divergences (alternatively, occasions switching centered noncentered parameterization splines can help).","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"correlation-matrices","dir":"Articles","previous_headings":"1 Default prior distributions in dynamite","what":"Correlation matrices","title":"Priors for dynamic multivariate panel models","text":"correlation matrix random effects latent factors uses \\(\\mbox{LKJ}(1)\\) prior Cholesky parameterization, see Stan documentation lkj_corr_cholesky details3. default corresponds uniform distribution valid correlation matrices.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"parameters-related-to-latent-factors","dir":"Articles","previous_headings":"1 Default prior distributions in dynamite","what":"Parameters related to latent factors","title":"Priors for dynamic multivariate panel models","text":"defining latent factor term nonzero_lambda = TRUE, priors set \\(\\zeta\\) \\(\\kappa\\), defaults \\(\\kappa \\sim N(0, 1)\\) \\(\\kappa \\sim Beta(2, 2)\\). used define standard deviation \\(\\sigma_\\lambda\\) loadings \\(\\sigma_\\lambda = \\kappa \\zeta\\), \\(\\tau_\\psi = (1 - \\kappa)\\zeta\\), standard deviation random walk prior \\(\\psi_t\\). case nonzero_lambda = FALSE, \\(\\tau_\\psi\\) fixed one, prior set directly $_$ \\(N(0, 1)\\). cases, prior first \\(\\psi_1 \\sim N(0, 1)\\).","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"family-specific-parameters","dir":"Articles","previous_headings":"1 Default prior distributions in dynamite","what":"Family-specific parameters","title":"Priors for dynamic multivariate panel models","text":"standard deviation parameter gaussian student’s \\(t\\) responses, use exponential prior rate parameter \\(\\frac{1}{2\\max(1,\\sigma_y)}\\). degrees--freedom parameter student’s \\(t\\)-distribution \\(\\mbox{Gamma}(2, 0.1)\\) prior, whereas family specific parameters set \\(\\phi \\sim \\mbox{Exponential}(1)\\).","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_priors.html","id":"defining-priors-of-dynamite-models","dir":"Articles","previous_headings":"","what":"Defining priors of dynamite models","title":"Priors for dynamic multivariate panel models","text":"dynamite() can used default prior choices, recommend check whether defaults make sense particular problem codify accordingly based domain knowledge. univariate unbounded continuous distributions supported Stan can used prior univariate model parameters (case parameter constrained positive, distribution automatically truncated). Naturally, univariate distribution bounded positive real line can used prior parameters constrained positive (e.g., standard deviation parameter). See Stan function reference possible distributions. custom priors, first get default priors get_priors() function, modify priors column obtained data frame supplying dynamite() function:","code":"f <- obs(y ~ -1 + z + varying(~ x + lag(y)) + random(~1 + z), \"gaussian\") +   random_spec(correlated = TRUE) + splines(df = 20) p <- get_priors(f, data = gaussian_example, time = \"time\", group = \"id\") p #>           parameter response                prior      type category #> 1  sigma_nu_y_alpha        y       normal(0, 3.1)  sigma_nu          #> 2      sigma_nu_y_z        y       normal(0, 3.1)  sigma_nu          #> 3           alpha_y        y     normal(1.5, 3.1)     alpha          #> 4       tau_alpha_y        y       normal(0, 3.1) tau_alpha          #> 5          beta_y_z        y       normal(0, 3.1)      beta          #> 6         delta_y_x        y       normal(0, 3.1)     delta          #> 7    delta_y_y_lag1        y       normal(0, 1.8)     delta          #> 8           tau_y_x        y       normal(0, 3.1)       tau          #> 9      tau_y_y_lag1        y       normal(0, 1.8)       tau          #> 10          sigma_y        y    exponential(0.65)     sigma          #> 11             L_nu          lkj_corr_cholesky(1)         L p$prior[p$type == \"sigma_nu\"] <- \"normal(0, 1)\" # change prior for sigma_nu p$prior[p$parameter == \"sigma_y\"] <- \"student_t(3, 0, 2)\" # prior for sigma_y p #>           parameter response                prior      type category #> 1  sigma_nu_y_alpha        y         normal(0, 1)  sigma_nu          #> 2      sigma_nu_y_z        y         normal(0, 1)  sigma_nu          #> 3           alpha_y        y     normal(1.5, 3.1)     alpha          #> 4       tau_alpha_y        y       normal(0, 3.1) tau_alpha          #> 5          beta_y_z        y       normal(0, 3.1)      beta          #> 6         delta_y_x        y       normal(0, 3.1)     delta          #> 7    delta_y_y_lag1        y       normal(0, 1.8)     delta          #> 8           tau_y_x        y       normal(0, 3.1)       tau          #> 9      tau_y_y_lag1        y       normal(0, 1.8)       tau          #> 10          sigma_y        y   student_t(3, 0, 2)     sigma          #> 11             L_nu          lkj_corr_cholesky(1)         L fit <- dynamite(f, data = gaussian_example, time = \"time\",  group = \"id\",                 priors = p)"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_simulation.html","id":"using-dynamite-to-generate-panel-data","dir":"Articles","previous_headings":"","what":"Using dynamite to generate panel data","title":"Simulating data from a dynamic multivariate panel model","text":"Dynamic multivariate panel models (DMPM) conceptually challenging due multichannel multivariate nature. models can also contain large number various parameters, especially model contains time-varying effects group-level random effects. poses challenge users wish generate data according models, manual specification parameters becomes cumbersome. main purpose dynamite fit dynamic multivariate panel models data obtain predictions, package can fortunately also used generate data according specified model. used need specify model formula, along data fixed covariates can used obtain dimensions parameters model via get_parameter_dims() function. name suggests, function return names dimensions parameters model need specified data simulation. However, practice necessary define values parameters, Stan automatically generate random initial values missing parameters. See documentation .data.frame.dynamitefit details various parameters. user specified parameter values, supplied dynamite() list via argument init, used Stan initialize parameters underlying Stan model. Furthermore, number iterations set 1 simulation algorithm \"Fixed_param\" posterior sampling carried . result dynamitefit object can subsequently used predict obtain desired simulated data.","code":""},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_simulation.html","id":"model-with-categorical-responses","dir":"Articles","previous_headings":"","what":"Model with categorical responses","title":"Simulating data from a dynamic multivariate panel model","text":"illustration, approach described vignette used generate package data categorical_example follows. First, define data first time index: Based initial data, goal generate categorical responses two channels, y x, 100 individuals 20 time points. expand initial data missing values remaining time points. also add random noise variable z observed individual time index. Next, define model formula DMPM response variables. Based formula, now need define values parameters model implies. First, must determine parameters called dimensions via get_parameter_dims(). dynamiteformula objects, method provided arguments dynamite: model formula, data, time index variable optional grouping variable. function fits temporary Stan model define required parameters, meaning may take seconds obtain result. words, beta parameters vectors length 5, parameters scalars. type parameters centered versions intercepts alpha first time index (see package vignette default priors information: vignette(\"dynamite_priors\", package = \"dynamite\")). Now required information specify values parameters model. actual values chosen naturally depends scenario user. set following values simulation list init. fit model fixed values. Note wrap init object another list, init argument chain specific, thus first element provides initial values first (case ) chain. categorical_example data package can now obtained simple call predict(). Finally, simply rename simulated values responses, select variables interest.","code":"library(\"dynamite\") set.seed(1) n_id <- 100L n_time <- 20L d <- data.frame(   y = sample(factor(c(\"a\", \"b\", \"c\")), size = n_id, replace = TRUE),   x = sample(factor(c(\"A\", \"B\", \"C\")), size = n_id, replace = TRUE),   time = 1,   id = seq_len(n_id) ) d <- dplyr::right_join(   d,   data.frame(     time = rep(seq_len(n_time), each = n_id),     id = seq_len(n_id)   ),   by = c(\"time\", \"id\") ) d$z <- rnorm(nrow(d)) f <- obs(x ~ z + lag(x) + lag(y), family = \"categorical\") +   obs(y ~ z + lag(x) + lag(y), family = \"categorical\") get_parameter_dims(x = f, data = d, time = \"time\", group = \"id\") #> $beta_x_B #> [1] 5 #>  #> $a_x_B #> [1] 1 #>  #> $beta_x_C #> [1] 5 #>  #> $a_x_C #> [1] 1 #>  #> $beta_y_b #> [1] 5 #>  #> $a_y_b #> [1] 1 #>  #> $beta_y_c #> [1] 5 #>  #> $a_y_c #> [1] 1 init <- list(   beta_x_B = c(2, 0.8, 0.2, 0, 0),   a_x_B = -0.1,   beta_x_C = c(1, 0.5, 2, 0.2, 0.1),   a_x_C = 0.2,   beta_y_b = c(0, 1, 0.8, 0.3, 0.5),   a_y_b = 0.1,   beta_y_c = c(1, 0.2, 0, 0.3, -0.5),   a_y_c = -0.5 ) fit <- dynamite(   dformula = f,   data = d,   time = \"time\",   group = \"id\",   chains = 1,   iter = 1,   algorithm = \"Fixed_param\",   init = list(init), ) categorical_example <- predict(fit, type = \"response\") |>   dplyr::mutate(x = x_new, y = y_new) |>   dplyr::select(id, time, x, y, z)"},{"path":"https://docs.ropensci.org/dynamite/articles/dynamite_simulation.html","id":"model-with-time-varying-effects","dir":"Articles","previous_headings":"","what":"Model with time-varying effects","title":"Simulating data from a dynamic multivariate panel model","text":"mentioned earlier, simulation model time-varying effects challenging due inclusion p-splines means must also define initial values spline coefficients. consider single-channel model gaussian response time-varying effect single covariate. expand data missing values full time period add fixed covariate x. Next, define model formula response variable y DMPM define splines time-varying effects. , apply get_parameter_dims() function get model parameters dimensions. , omega_y defines spline coefficients time-varying effects. parameter 2 10 matrix 2 time-varying effects, x lag(y), degrees freedom splines 10. parameter tau_y defines standard deviations random walk priors two time-varying effects. choose following values model parameters: fit model fixed values. Finally, generate data using predict(). can plot individual trajectories y time visualize data.","code":"library(\"dynamite\") set.seed(1) n_id <- 8L n_time <- 20L d <- data.frame(   y = rnorm(n_id, 1, 0.5),   time = 1,   id = seq_len(n_id) ) d <- dplyr::right_join(   d,   data.frame(     time = rep(seq_len(n_time), each = n_id),     id = seq_len(n_id)   ),   by = c(\"time\", \"id\") ) d$x <- rnorm(nrow(d)) f <- obs(y ~ 1 + varying(~ -1 + x + lag(y)), family = \"gaussian\") +   splines(df = 10) get_parameter_dims(x = f, data = d, time = \"time\", group = \"id\") init <- list(   omega_y = rbind(     c(0.0,  0.2, -0.8, 1.0, 0.5, 0.0, 0.1, -0.2, -0.5,  0.1),     c(0.3, -0.4,  0.7, 0.5, 0.0, 0.0, 0.0,  0.6,  0.9, -0.8)   ),   tau_y = c(1.0, 0.75),   a_y = -1,   sigma_y = 0.5 ) gaussian_simulation_fit <- dynamite(   dformula = f,   data = d,   time = \"time\",   group = \"id\",   chains = 1,   iter = 1,   algorithm = \"Fixed_param\",   refresh = 0,   init = list(init), ) sim <- predict(gaussian_simulation_fit, type = \"response\") |>   dplyr::mutate(y = y_new) |>   dplyr::select(id, time, x, y) library(\"ggplot2\") sim |>   dplyr::filter(id < 9) |>   ggplot(aes(time, y, color = factor(id))) +   geom_line() +   theme_bw()"},{"path":"https://docs.ropensci.org/dynamite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Santtu Tikka. Author, maintainer. Jouni Helske. Author. Nicholas Clark. Reviewer. Lucy D'Agostino McGowan. Reviewer.","code":""},{"path":"https://docs.ropensci.org/dynamite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tikka S, Helske J (2024). “dynamite: R Package Dynamic Multivariate Panel Models.” doi:10.48550/arXiv.2302.01607, https://arxiv.org/abs/2302.01607. Tikka S, Helske J (2024). “Estimating Causal Effects Panel Data Dynamic Multivariate Panel Models.” Advances Life Course Research, 60, 100617. doi:10.1016/j.alcr.2024.100617. Tikka S, Helske J (2024). dynamite: Bayesian Modeling Causal Inference Multivariate Longitudinal Data. R package version 1.5.4, https://github.com/ropensci/dynamite.","code":"@Misc{dynamitepaper,   doi = {10.48550/arXiv.2302.01607},   url = {https://arxiv.org/abs/2302.01607},   author = {Santtu Tikka and Jouni Helske},   title = {dynamite: An R Package for Dynamic Multivariate Panel Models},   year = {2024}, } @Article{dmpmpaper,   title = {Estimating Causal Effects from Panel Data with Dynamic     Multivariate Panel Models},   author = {Santtu Tikka and Jouni Helske},   journal = {Advances in Life Course Research},   volume = {60},   pages = {100617},   year = {2024},   doi = {10.1016/j.alcr.2024.100617}, } @Manual{dynamite,   title = {dynamite: Bayesian Modeling and Causal Inference for Multivariate     Longitudinal Data},   author = {Santtu Tikka and Jouni Helske},   note = {R package version 1.5.4},   year = {2024},   url = {https://github.com/ropensci/dynamite}, }"},{"path":"https://docs.ropensci.org/dynamite/index.html","id":"dynamite-bayesian-modeling-and-causal-inference-for-multivariate-longitudinal-data-","dir":"","previous_headings":"","what":"Bayesian Modeling and Causal Inference for Multivariate Longitudinal Data","title":"Bayesian Modeling and Causal Inference for Multivariate Longitudinal Data","text":"dynamite R package provides easy--use interface Bayesian inference complex panel (time series) data comprising multiple measurements per multiple individuals measured time via dynamic multivariate panel models (DMPM). main features distinguishing package underlying methodology many approaches : Support regular time-invariant effects, group-level random effects, time-varying effects modeled via Bayesian P-splines. Joint modeling multiple measurements per individual (multiple channels) based directly assumed data-generating process. Individual channels can univariate multivariate. Support various distributions: Currently Gaussian, Multivariate Gaussian, Student t, Categorical, Ordered, Multinomial, Poisson, Bernoulli, Binomial, Negative Binomial, Gamma, Exponential, Beta distributions available, can combined arbitrarily multichannel models. Allows evaluating realistic long-term counterfactual predictions take account dynamic structure model efficient posterior predictive distribution simulation. Transparent quantification parameter predictive uncertainty due fully Bayesian approach. Various visualization methods including method drawing producing TikZ code directed acyclic graph (DAG) model structure. User-friendly efficient R interface state---art estimation via Stan. rstan cmdstanr backends supported, parallel chains within-chain parallelization. dynamite package developed support Research Council Finland grant 331817 (PREDLIFE). information DMPMs dynamite package, see related papers: Helske J. Tikka S. (2024). Estimating Causal Effects Panel Data Dynamic Multivariate Panel Models. Advances Life Course Research, 60, 100617. (Journal version, SocArXiv preprint) Tikka S. Helske J. (2024). dynamite: R Package Dynamic Multivariate Panel Models. (arXiv preprint)","code":""},{"path":"https://docs.ropensci.org/dynamite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Modeling and Causal Inference for Multivariate Longitudinal Data","text":"can install recent stable version dynamite CRAN development version R-universe running one following lines:","code":"install.packages(\"dynamite\") install.packages(\"dynamite\", repos = \"https://ropensci.r-universe.dev\")"},{"path":"https://docs.ropensci.org/dynamite/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bayesian Modeling and Causal Inference for Multivariate Longitudinal Data","text":"single-channel model time-invariant effect z, time-varying effect x, lagged value response variable y group-specific random intercepts: Summary model: Posterior estimates time-varying effects:  group-specific intercepts (first 10 groups):  Traceplots density plots time-invariant parameters:  Posterior predictive samples first 4 groups (using samples based posterior distribution model parameters observed data first time point):  Visualizing model structure DAG (snapshot time t):  examples, see package vignettes blog post dynamite.","code":"set.seed(1) library(\"dynamite\") gaussian_example_fit <- dynamite(   obs(y ~ -1 + z + varying(~ x + lag(y)) + random(~1), family = \"gaussian\") +     splines(df = 20),   data = gaussian_example, time = \"time\", group = \"id\",   iter = 2000, chains = 2, cores = 2, refresh = 0 ) print(gaussian_example_fit) #> Model: #>   Family   Formula                                        #> y gaussian y ~ -1 + z + varying(~x + lag(y)) + random(~1) #>  #> Correlated random effects added for response(s): y #>  #> Data: gaussian_example (Number of observations: 1450) #> Grouping variable: id (Number of groups: 50) #> Time index variable: time (Number of time points: 30) #>  #> NUTS sampler diagnostics: #>  #> No divergences, saturated max treedepths or low E-BFMIs. #>  #> Smallest bulk-ESS: 651 (sigma_nu_y_alpha) #> Smallest tail-ESS: 853 (sigma_nu_y_alpha) #> Largest Rhat: 1.002 (beta_y_z) #>  #> Elapsed time (seconds): #>         warmup sample #> chain:1 10.157  6.377 #> chain:2 10.431  5.864 #>  #> Summary statistics of the time- and group-invariant parameters: #> # A tibble: 6 × 10 #>   variable      mean median      sd     mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>        <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 beta_y_z    1.97   1.97   0.0118  0.0119  1.95   1.99  1.00     3946.    1727. #> 2 sigma_nu_y… 0.0946 0.0938 0.0116  0.0108  0.0772 0.115 1.00      651.     853. #> 3 sigma_y     0.198  0.198  0.00371 0.00378 0.192  0.204 1.00     2734.    1459. #> 4 tau_alpha_y 0.213  0.207  0.0481  0.0456  0.146  0.302 1.00     1797.    1634. #> 5 tau_y_x     0.362  0.352  0.0683  0.0607  0.269  0.488 1.00     2600.    1492. #> 6 tau_y_y_la… 0.107  0.104  0.0204  0.0193  0.0777 0.144 0.999    2118.    1899. plot(gaussian_example_fit, types = c(\"alpha\", \"delta\"), scales = \"free\") plot(gaussian_example_fit, types = \"nu\", groups = 1:10) plot(gaussian_example_fit, plot_type = \"trace\", types = \"beta\") library(\"ggplot2\") pred <- predict(gaussian_example_fit, n_draws = 100) pred |>   dplyr::filter(id < 5) |>   ggplot(aes(time, y_new, group = .draw)) +   geom_line(alpha = 0.25) +   # observed values   geom_line(aes(y = y), colour = \"tomato\") +   facet_wrap(~id) +   theme_bw() plot(gaussian_example_fit, plot_type = \"dag\", show_covariates = TRUE)"},{"path":"https://docs.ropensci.org/dynamite/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Bayesian Modeling and Causal Inference for Multivariate Longitudinal Data","text":"dynamite package uses Stan via rstan cmdstanr (see also https://mc-stan.org), probabilistic programming language general Bayesian modelling. brms package also uses Stan, can used fit various complex multilevel models. Regression modeling time-varying coefficients based kernel smoothing least squares estimation available package tvReg. tvem package provides similar functionality gaussian, binomial poisson responses mgcv backend. plm contains various methods estimate linear models panel data, e.g., fixed effect models. lavaan provides tools structural equation modeling, can used model various panel data models well.","code":""},{"path":"https://docs.ropensci.org/dynamite/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Bayesian Modeling and Causal Inference for Multivariate Longitudinal Data","text":"Contributions welcome, see CONTRIBUTING.md general guidelines.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.frame.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","title":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","text":"Provides data.frame representation posterior samples model parameters.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.frame.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' as.data.frame(   x,   row.names = NULL,   optional = FALSE,   types = NULL,   parameters = NULL,   responses = NULL,   times = NULL,   groups = NULL,   summary = FALSE,   probs = c(0.05, 0.95),   include_fixed = TRUE,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.frame.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","text":"x [dynamitefit] model fit object. row.names Ignored. optional Ignored. types [character()] Type(s) parameters samples extracted. See details possible values. Default values listed details except spline coefficients omega. argument mutually exclusive parameters. parameters [character()] Parameter(s) samples extracted. Possible options can found function get_parameter_names(). Default parameters specific type responses. argument mutually exclusive types. responses [character()] Response(s) samples extracted. Possible options elements unique(x$priors$response), default entire vector. Ignored argument parameters supplied. omega_alpha, omega_psi. See also get_parameter_types(). times [double()] Time point(s) keep. NULL (default), time points kept. groups [character()] Group name(s) keep. NULL (default), groups kept. summary [logical(1)] TRUE, returns posterior mean, standard deviation, posterior quantiles (defined probs argument) parameters. FALSE (default), returns posterior samples instead. probs [numeric()] Quantiles interest. Default c(0.05, 0.95). include_fixed [logical(1)] TRUE (default), time-varying parameters 1:fixed time points included output NA values. FALSE, fixed time points omitted completely output. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.frame.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","text":"tibble containing either samples summary statistics model parameters long format. wide format, see as_draws.dynamitefit().","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.frame.dynamitefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","text":"arguments responses types can used extract subset model parameters (.e., certain types parameters related certain response variable). Potential values types argument : alpha Intercept terms (time-invariant time-varying). beta Time-invariant regression coefficients. cutpoint Cutpoints ordinal regression. delta Time-varying regression coefficients. nu Group-level random effects. lambda Factor loadings. kappa Contribution latent factor loadings total variation. psi Latent factors. tau Standard deviations spline coefficients delta. tau_alpha Standard deviations spline coefficients time-varying alpha. sigma_nu Standard deviations random effects nu. corr_nu Pairwise within-group correlations random effects nu. Samples full correlation matrix can extracted manually rstan::extract(fit$stanfit, pars = \"corr_matrix_nu\") necessary. sigma_lambda Standard deviations latent factor loadings lambda. corr_psi Pairwise correlations noise terms latent factors. Samples full correlation matrix can extracted manually rstan::extract(fit$stanfit, pars = \"corr_matrix_psi\") necessary. sigma Standard deviations Gaussian responses. corr Pairwise correlations multivariate Gaussian responses. phi Describes various distributional parameters, : Dispersion parameter Negative Binomial distribution. Shape parameter Gamma distribution. Precision parameter Beta distribution. Degrees freedom Student t-distribution. omega Spline coefficients regression coefficients delta. omega_alpha Spline coefficients time-varying alpha. omega_psi Spline coefficients latent factors psi. Note case nonzero_lambda = FALSE, mean used flip sign psi avoid multimodality due sign-switching, omega_psi variables modified. zeta Total variation latent factors, .e., sum sigma_lambda tau_psi.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.frame.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Samples From a dynamitefit Object as a Data Frame — as.data.frame.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN as.data.frame(   gaussian_example_fit,   responses = \"y\",   types = \"beta\" ) #> # A tibble: 200 × 10 #>    parameter value  time category group response type  .draw .iteration .chain #>    <chr>     <dbl> <int> <chr>    <int> <chr>    <chr> <int>      <int>  <int> #>  1 beta_y_z   1.96    NA NA          NA y        beta      1          1      1 #>  2 beta_y_z   1.97    NA NA          NA y        beta      2          2      1 #>  3 beta_y_z   1.96    NA NA          NA y        beta      3          3      1 #>  4 beta_y_z   1.95    NA NA          NA y        beta      4          4      1 #>  5 beta_y_z   1.96    NA NA          NA y        beta      5          5      1 #>  6 beta_y_z   1.97    NA NA          NA y        beta      6          6      1 #>  7 beta_y_z   1.96    NA NA          NA y        beta      7          7      1 #>  8 beta_y_z   1.96    NA NA          NA y        beta      8          8      1 #>  9 beta_y_z   1.97    NA NA          NA y        beta      9          9      1 #> 10 beta_y_z   1.95    NA NA          NA y        beta     10         10      1 #> # ℹ 190 more rows  # Basic summaries can be obtained automatically with summary = TRUE as.data.frame(   gaussian_example_fit,   responses = \"y\",   types = \"beta\",   summary = TRUE ) #> # A tibble: 1 × 10 #>   parameter  mean     sd    q5   q95  time group category response type  #>   <chr>     <dbl>  <dbl> <dbl> <dbl> <int> <int> <chr>    <chr>    <chr> #> 1 beta_y_z   1.97 0.0112  1.95  1.98    NA    NA NA       y        beta   # Time-varying coefficients \"delta\" as.data.frame(   gaussian_example_fit,   responses = \"y\",   types = \"delta\",   summary = TRUE ) #> # A tibble: 60 × 10 #>    parameter   mean      sd     q5    q95  time group category response type  #>    <chr>      <dbl>   <dbl>  <dbl>  <dbl> <int> <int> <chr>    <chr>    <chr> #>  1 delta_y_x NA     NA      NA     NA         1    NA NA       y        delta #>  2 delta_y_x -0.161  0.0299 -0.214 -0.110     2    NA NA       y        delta #>  3 delta_y_x -0.909  0.0351 -0.966 -0.852     3    NA NA       y        delta #>  4 delta_y_x -0.882  0.0253 -0.924 -0.839     4    NA NA       y        delta #>  5 delta_y_x -0.916  0.0217 -0.959 -0.884     5    NA NA       y        delta #>  6 delta_y_x -1.06   0.0202 -1.10  -1.03      6    NA NA       y        delta #>  7 delta_y_x -1.14   0.0224 -1.18  -1.10      7    NA NA       y        delta #>  8 delta_y_x -0.997  0.0226 -1.04  -0.962     8    NA NA       y        delta #>  9 delta_y_x -0.902  0.0248 -0.942 -0.864     9    NA NA       y        delta #> 10 delta_y_x -1.01   0.0223 -1.05  -0.975    10    NA NA       y        delta #> # ℹ 50 more rows  # Obtain summaries for a specific parameters as.data.frame(   gaussian_example_fit,   parameters = c(\"tau_y_x\", \"sigma_y\"),   summary = TRUE ) #> # A tibble: 2 × 10 #>   parameter  mean      sd    q5   q95  time group category response type  #>   <chr>     <dbl>   <dbl> <dbl> <dbl> <int> <int> <chr>    <chr>    <chr> #> 1 tau_y_x   0.364 0.0770  0.253 0.497    NA    NA NA       y        tau   #> 2 sigma_y   0.198 0.00404 0.192 0.205    NA    NA NA       y        sigma"},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.table.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Samples From a dynamitefit Object as a Data Table — as.data.table.dynamitefit","title":"Extract Samples From a dynamitefit Object as a Data Table — as.data.table.dynamitefit","text":"Provides data.table representation posterior samples model parameters. See .data.frame.dynamitefit() details.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.table.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Samples From a dynamitefit Object as a Data Table — as.data.table.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' as.data.table(   x,   keep.rownames = FALSE,   row.names = NULL,   optional = FALSE,   types = NULL,   parameters = NULL,   responses = NULL,   times = NULL,   groups = NULL,   summary = FALSE,   probs = c(0.05, 0.95),   include_fixed = TRUE,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.table.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Samples From a dynamitefit Object as a Data Table — as.data.table.dynamitefit","text":"x [dynamitefit] model fit object. keep.rownames [logical(1)] used. row.names Ignored. optional Ignored. types [character()] Type(s) parameters samples extracted. See details possible values. Default values listed details except spline coefficients omega. argument mutually exclusive parameters. parameters [character()] Parameter(s) samples extracted. Possible options can found function get_parameter_names(). Default parameters specific type responses. argument mutually exclusive types. responses [character()] Response(s) samples extracted. Possible options elements unique(x$priors$response), default entire vector. Ignored argument parameters supplied. omega_alpha, omega_psi. See also get_parameter_types(). times [double()] Time point(s) keep. NULL (default), time points kept. groups [character()] Group name(s) keep. NULL (default), groups kept. summary [logical(1)] TRUE, returns posterior mean, standard deviation, posterior quantiles (defined probs argument) parameters. FALSE (default), returns posterior samples instead. probs [numeric()] Quantiles interest. Default c(0.05, 0.95). include_fixed [logical(1)] TRUE (default), time-varying parameters 1:fixed time points included output NA values. FALSE, fixed time points omitted completely output. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.table.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Samples From a dynamitefit Object as a Data Table — as.data.table.dynamitefit","text":"data.table containing either samples summary statistics model parameters.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/as.data.table.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Samples From a dynamitefit Object as a Data Table — as.data.table.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN as.data.table(   gaussian_example_fit,   responses = \"y\",   types = \"beta\",   summary = FALSE ) #>      parameter    value  time category group response   type .draw .iteration #>         <char>    <num> <int>   <char> <int>   <char> <char> <int>      <int> #>   1:  beta_y_z 1.958289    NA     <NA>    NA        y   beta     1          1 #>   2:  beta_y_z 1.972815    NA     <NA>    NA        y   beta     2          2 #>   3:  beta_y_z 1.956837    NA     <NA>    NA        y   beta     3          3 #>   4:  beta_y_z 1.949148    NA     <NA>    NA        y   beta     4          4 #>   5:  beta_y_z 1.962168    NA     <NA>    NA        y   beta     5          5 #>  ---                                                                          #> 196:  beta_y_z 1.960357    NA     <NA>    NA        y   beta   196         96 #> 197:  beta_y_z 1.967019    NA     <NA>    NA        y   beta   197         97 #> 198:  beta_y_z 1.968887    NA     <NA>    NA        y   beta   198         98 #> 199:  beta_y_z 1.960676    NA     <NA>    NA        y   beta   199         99 #> 200:  beta_y_z 1.961960    NA     <NA>    NA        y   beta   200        100 #>      .chain #>       <int> #>   1:      1 #>   2:      1 #>   3:      1 #>   4:      1 #>   5:      1 #>  ---        #> 196:      2 #> 197:      2 #> 198:      2 #> 199:      2 #> 200:      2"},{"path":"https://docs.ropensci.org/dynamite/reference/as_draws-dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","title":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","text":"Converts output dynamite() call draws_df format posterior package, enabling use diagnostics plotting methods posterior bayesplot packages. Note function returns variables wide format, whereas .data.frame.dynamitefit() uses long format.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as_draws-dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' as_draws_df(   x,   parameters = NULL,   responses = NULL,   types = NULL,   times = NULL,   groups = NULL,   ... )  # S3 method for class 'dynamitefit' as_draws(x, parameters = NULL, responses = NULL, types = NULL, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/as_draws-dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","text":"x [dynamitefit] model fit object. parameters [character()] Parameter(s) samples extracted. Possible options can found function get_parameter_names(). Default parameters specific type responses. argument mutually exclusive types. responses [character()] Response(s) samples extracted. Possible options elements unique(x$priors$response), default entire vector. Ignored argument parameters supplied. omega_alpha, omega_psi. See also get_parameter_types(). types [character()] Type(s) parameters samples extracted. See details possible values. Default values listed details except spline coefficients omega. argument mutually exclusive parameters. times [double()] Time point(s) keep. NULL (default), time points kept. groups [character()] Group name(s) keep. NULL (default), groups kept. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as_draws-dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","text":"draws_df object. draws_df object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/as_draws-dynamitefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","text":"can use arguments parameters, responses types extract subset model parameters (.e., certain types parameters related certain response variable). See potential values types argument .data.frame.dynamitefit() get_parameter_names() potential values parameters argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/as_draws-dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert dynamite Output to draws_df Format — as_draws_df.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN as_draws(gaussian_example_fit, types = c(\"sigma\", \"beta\")) #> # A draws_df: 100 iterations, 2 chains, and 2 variables #>    beta_y_z sigma_y #> 1       2.0    0.20 #> 2       2.0    0.20 #> 3       2.0    0.20 #> 4       1.9    0.19 #> 5       2.0    0.19 #> 6       2.0    0.20 #> 7       2.0    0.20 #> 8       2.0    0.20 #> 9       2.0    0.20 #> 10      2.0    0.20 #> # ... with 190 more draws #> # ... hidden reserved variables {'.chain', '.iteration', '.draw'}  # Compute MCMC diagnostics using the posterior package posterior::summarise_draws(as_draws(gaussian_example_fit)) #> # A tibble: 143 × 10 #>    variable      mean median     sd    mad      q5   q95  rhat ess_bulk ess_tail #>    <chr>        <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl> <dbl>    <dbl>    <dbl> #>  1 alpha_y[2]  0.0587 0.0604 0.0309 0.0286 0.00452 0.103 1.00      156.     188. #>  2 alpha_y[3]  0.0951 0.0955 0.0411 0.0424 0.0336  0.160 1.01      206.     168. #>  3 alpha_y[4]  0.171  0.169  0.0392 0.0317 0.103   0.233 1.01      252.     181. #>  4 alpha_y[5]  0.264  0.263  0.0410 0.0438 0.199   0.326 0.998     229.     191. #>  5 alpha_y[6]  0.304  0.298  0.0383 0.0370 0.250   0.372 1.00      246.     151. #>  6 alpha_y[7]  0.336  0.334  0.0390 0.0400 0.276   0.400 1.02      153.     109. #>  7 alpha_y[8]  0.422  0.424  0.0366 0.0349 0.365   0.481 1.00      119.     177. #>  8 alpha_y[9]  0.458  0.456  0.0390 0.0417 0.392   0.520 1.00      157.     187. #>  9 alpha_y[10] 0.418  0.419  0.0443 0.0435 0.350   0.492 1.01      178.     185. #> 10 alpha_y[11] 0.407  0.409  0.0409 0.0426 0.340   0.473 1.00      247.     185. #> # ℹ 133 more rows"},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Categorical Multivariate Panel Data — categorical_example","title":"Simulated Categorical Multivariate Panel Data — categorical_example","text":"simulated data containing multiple individuals two categorical response variables.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Categorical Multivariate Panel Data — categorical_example","text":"","code":"categorical_example"},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Categorical Multivariate Panel Data — categorical_example","text":"data frame 2000 rows 5 variables: id Variable defining individuals (1 100). time Variable defining time point measurement (1 20). x Categorical variable three levels, , B, C. y Categorical variable three levels, , b, c. z continuous covariate.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Categorical Multivariate Panel Data — categorical_example","text":"data generated via categorical_example.R https://github.com/ropensci/dynamite/tree/main/data-raw/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Fit for the Simulated Categorical Multivariate Panel Data — categorical_example_fit","title":"Model Fit for the Simulated Categorical Multivariate Panel Data — categorical_example_fit","text":"dynamitefit object obtained running dynamite categorical_example dataset Note small number samples due size restrictions CRAN.","code":"set.seed(1) library(dynamite) f <- obs(x ~ z + lag(x) + lag(y), family = \"categorical\") +   obs(y ~ z + lag(x) + lag(y), family = \"categorical\") categorical_example_fit <- dynamite(   f,   data = categorical_example,   time = \"time\",   group = \"id\",   chains = 1,   refresh = 0,   thin = 5,   save_warmup = FALSE )"},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Fit for the Simulated Categorical Multivariate Panel Data — categorical_example_fit","text":"","code":"categorical_example_fit"},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example_fit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model Fit for the Simulated Categorical Multivariate Panel Data — categorical_example_fit","text":"dynamitefit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/categorical_example_fit.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Model Fit for the Simulated Categorical Multivariate Panel Data — categorical_example_fit","text":"data generated via categorical_example_fit.R https://github.com/ropensci/dynamite/tree/main/data-raw/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/coef.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Regression Coefficients of a dynamite Model — coef.dynamitefit","title":"Extract Regression Coefficients of a dynamite Model — coef.dynamitefit","text":"Extracts either time-varying time-invariant parameters model.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/coef.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Regression Coefficients of a dynamite Model — coef.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' coef(   object,   types = c(\"alpha\", \"beta\", \"delta\"),   parameters = NULL,   responses = NULL,   times = NULL,   groups = NULL,   summary = TRUE,   probs = c(0.05, 0.95),   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/coef.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Regression Coefficients of a dynamite Model — coef.dynamitefit","text":"object [dynamitefit] model fit object. types [character()] Type(s) parameters samples extracted. See details possible values. Default values listed details except spline coefficients omega. argument mutually exclusive parameters. parameters [character()] Parameter(s) samples extracted. Possible options can found function get_parameter_names(). Default parameters specific type responses. argument mutually exclusive types. responses [character()] Response(s) samples extracted. Possible options elements unique(x$priors$response), default entire vector. Ignored argument parameters supplied. omega_alpha, omega_psi. See also get_parameter_types(). times [double()] Time point(s) keep. NULL (default), time points kept. groups [character()] Group name(s) keep. NULL (default), groups kept. summary [logical(1)] TRUE (default), returns posterior mean, standard deviation, posterior quantiles (defined probs argument) parameters. FALSE, returns posterior samples instead. probs [numeric()] Quantiles interest. Default c(0.05, 0.95). ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/coef.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Regression Coefficients of a dynamite Model — coef.dynamitefit","text":"tibble containing either samples summary statistics model parameters long format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/coef.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Regression Coefficients of a dynamite Model — coef.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN betas <- coef(gaussian_example_fit, type = \"beta\") deltas <- coef(gaussian_example_fit, type = \"delta\")"},{"path":"https://docs.ropensci.org/dynamite/reference/confint.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Credible Intervals for dynamite Model Parameters — confint.dynamitefit","title":"Credible Intervals for dynamite Model Parameters — confint.dynamitefit","text":"Extracts credible intervals dynamitefit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/confint.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Credible Intervals for dynamite Model Parameters — confint.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' confint(object, parm, level = 0.95, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/confint.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Credible Intervals for dynamite Model Parameters — confint.dynamitefit","text":"object [dynamitefit] model fit object. parm Ignored. level [numeric(1)] Credible interval width. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/confint.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Credible Intervals for dynamite Model Parameters — confint.dynamitefit","text":"rows resulting matrix named using following logic: {parameter}_{time}_{category}_{group} parameter name parameter, time time index parameter, category specifies level response parameter related response categorical, group determines group observations parameter related case random effects loadings. Non-applicable fields syntax set NA.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/confint.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Credible Intervals for dynamite Model Parameters — confint.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN confint(gaussian_example_fit, level = 0.9) #>                                      5%          95% #> alpha_y_1_NA_NA                      NA           NA #> alpha_y_2_NA_NA            4.523993e-03  0.102596029 #> alpha_y_3_NA_NA            3.359892e-02  0.160444793 #> alpha_y_4_NA_NA            1.027873e-01  0.232540083 #> alpha_y_5_NA_NA            1.990054e-01  0.325578658 #> alpha_y_6_NA_NA            2.495795e-01  0.372449363 #> alpha_y_7_NA_NA            2.757729e-01  0.399835032 #> alpha_y_8_NA_NA            3.646104e-01  0.480932301 #> alpha_y_9_NA_NA            3.919917e-01  0.519677560 #> alpha_y_10_NA_NA           3.500797e-01  0.491642343 #> alpha_y_11_NA_NA           3.403296e-01  0.472880570 #> alpha_y_12_NA_NA           3.721109e-01  0.517069255 #> alpha_y_13_NA_NA           4.256413e-01  0.563701653 #> alpha_y_14_NA_NA           4.508549e-01  0.566089018 #> alpha_y_15_NA_NA           4.244461e-01  0.563042309 #> alpha_y_16_NA_NA           4.056710e-01  0.539230818 #> alpha_y_17_NA_NA           4.032323e-01  0.533287337 #> alpha_y_18_NA_NA           3.952055e-01  0.526240097 #> alpha_y_19_NA_NA           3.632834e-01  0.493968029 #> alpha_y_20_NA_NA           3.202149e-01  0.452028381 #> alpha_y_21_NA_NA           2.602953e-01  0.397567475 #> alpha_y_22_NA_NA           1.545481e-01  0.288289473 #> alpha_y_23_NA_NA           8.637629e-03  0.118678163 #> alpha_y_24_NA_NA          -5.573237e-02  0.053260588 #> alpha_y_25_NA_NA          -3.262542e-02  0.078526519 #> alpha_y_26_NA_NA          -3.935294e-06  0.100660195 #> alpha_y_27_NA_NA           1.267877e-02  0.122305659 #> alpha_y_28_NA_NA           3.753272e-02  0.162030500 #> alpha_y_29_NA_NA           1.727556e-01  0.293282789 #> alpha_y_30_NA_NA           6.511299e-01  0.803205032 #> beta_y_z_NA_NA_NA          1.949136e+00  1.984239847 #> delta_y_x_1_NA_NA                    NA           NA #> delta_y_x_2_NA_NA         -2.140651e-01 -0.109780116 #> delta_y_x_3_NA_NA         -9.661983e-01 -0.852173569 #> delta_y_x_4_NA_NA         -9.239329e-01 -0.839499886 #> delta_y_x_5_NA_NA         -9.587950e-01 -0.884174732 #> delta_y_x_6_NA_NA         -1.098449e+00 -1.033927809 #> delta_y_x_7_NA_NA         -1.175602e+00 -1.100404037 #> delta_y_x_8_NA_NA         -1.035984e+00 -0.962228004 #> delta_y_x_9_NA_NA         -9.418789e-01 -0.864142998 #> delta_y_x_10_NA_NA        -1.046748e+00 -0.974574117 #> delta_y_x_11_NA_NA        -1.223947e+00 -1.165802005 #> delta_y_x_12_NA_NA        -1.404571e+00 -1.332891359 #> delta_y_x_13_NA_NA        -1.486715e+00 -1.424051353 #> delta_y_x_14_NA_NA        -1.487714e+00 -1.422547170 #> delta_y_x_15_NA_NA        -1.446169e+00 -1.381804106 #> delta_y_x_16_NA_NA        -1.446872e+00 -1.389537774 #> delta_y_x_17_NA_NA        -1.456185e+00 -1.384385479 #> delta_y_x_18_NA_NA        -1.398059e+00 -1.335546923 #> delta_y_x_19_NA_NA        -1.381143e+00 -1.316983285 #> delta_y_x_20_NA_NA        -1.388983e+00 -1.313945369 #> delta_y_x_21_NA_NA        -1.306640e+00 -1.240737017 #> delta_y_x_22_NA_NA        -1.253168e+00 -1.176769426 #> delta_y_x_23_NA_NA        -1.279166e+00 -1.211951431 #> delta_y_x_24_NA_NA        -1.245856e+00 -1.170451671 #> delta_y_x_25_NA_NA        -1.109322e+00 -1.036566113 #> delta_y_x_26_NA_NA        -9.370633e-01 -0.864553806 #> delta_y_x_27_NA_NA        -7.805103e-01 -0.699271552 #> delta_y_x_28_NA_NA        -6.777650e-01 -0.597374303 #> delta_y_x_29_NA_NA        -6.759793e-01 -0.573684019 #> delta_y_x_30_NA_NA        -2.639551e-01 -0.170006895 #> delta_y_y_lag1_1_NA_NA               NA           NA #> delta_y_y_lag1_2_NA_NA     2.693359e-02  0.111502050 #> delta_y_y_lag1_3_NA_NA     1.276624e-01  0.201562837 #> delta_y_y_lag1_4_NA_NA     1.332381e-01  0.185436403 #> delta_y_y_lag1_5_NA_NA     1.362361e-01  0.184274517 #> delta_y_y_lag1_6_NA_NA     1.577467e-01  0.201269787 #> delta_y_y_lag1_7_NA_NA     1.869231e-01  0.231708845 #> delta_y_y_lag1_8_NA_NA     2.108034e-01  0.251270852 #> delta_y_y_lag1_9_NA_NA     2.574953e-01  0.302521289 #> delta_y_y_lag1_10_NA_NA    3.359790e-01  0.384805049 #> delta_y_y_lag1_11_NA_NA    4.385428e-01  0.477644495 #> delta_y_y_lag1_12_NA_NA    5.064863e-01  0.543360361 #> delta_y_y_lag1_13_NA_NA    5.126052e-01  0.543766133 #> delta_y_y_lag1_14_NA_NA    4.751510e-01  0.503739288 #> delta_y_y_lag1_15_NA_NA    4.226538e-01  0.452675141 #> delta_y_y_lag1_16_NA_NA    3.899357e-01  0.420632883 #> delta_y_y_lag1_17_NA_NA    3.754850e-01  0.411599622 #> delta_y_y_lag1_18_NA_NA    3.777250e-01  0.409423065 #> delta_y_y_lag1_19_NA_NA    3.671966e-01  0.399022882 #> delta_y_y_lag1_20_NA_NA    3.396516e-01  0.377676931 #> delta_y_y_lag1_21_NA_NA    3.079593e-01  0.343735055 #> delta_y_y_lag1_22_NA_NA    2.680208e-01  0.305820595 #> delta_y_y_lag1_23_NA_NA    2.366441e-01  0.271021339 #> delta_y_y_lag1_24_NA_NA    2.183647e-01  0.256928862 #> delta_y_y_lag1_25_NA_NA    2.152175e-01  0.256754306 #> delta_y_y_lag1_26_NA_NA    1.808735e-01  0.220963619 #> delta_y_y_lag1_27_NA_NA    1.133814e-01  0.154441741 #> delta_y_y_lag1_28_NA_NA    2.137628e-02  0.072069728 #> delta_y_y_lag1_29_NA_NA   -6.947449e-02 -0.008900573 #> delta_y_y_lag1_30_NA_NA    9.616872e-03  0.098969316 #> nu_y_alpha_NA_NA_1        -1.489707e-01 -0.034425961 #> nu_y_alpha_NA_NA_2        -1.101465e-01  0.006639100 #> nu_y_alpha_NA_NA_3         2.966781e-02  0.153729578 #> nu_y_alpha_NA_NA_4        -2.249542e-02  0.092851192 #> nu_y_alpha_NA_NA_5        -1.041095e-01  0.021548818 #> nu_y_alpha_NA_NA_6         6.437379e-02  0.177625091 #> nu_y_alpha_NA_NA_7        -1.614390e-02  0.098079460 #> nu_y_alpha_NA_NA_8        -1.508397e-01 -0.022266947 #> nu_y_alpha_NA_NA_9        -8.749513e-02  0.028928615 #> nu_y_alpha_NA_NA_10       -1.412191e-01 -0.021662580 #> nu_y_alpha_NA_NA_11        5.074919e-02  0.175470198 #> nu_y_alpha_NA_NA_12       -8.573498e-02  0.037627269 #> nu_y_alpha_NA_NA_13       -3.651632e-02  0.093432080 #> nu_y_alpha_NA_NA_14       -6.406755e-02  0.051779504 #> nu_y_alpha_NA_NA_15       -1.334432e-01 -0.022891301 #> nu_y_alpha_NA_NA_16        1.189248e-01  0.247382674 #> nu_y_alpha_NA_NA_17       -4.465580e-03  0.107305388 #> nu_y_alpha_NA_NA_18       -2.810331e-01 -0.167231896 #> nu_y_alpha_NA_NA_19       -2.179973e-02  0.105130364 #> nu_y_alpha_NA_NA_20       -2.558402e-02  0.077005680 #> nu_y_alpha_NA_NA_21       -1.747152e-01 -0.059276472 #> nu_y_alpha_NA_NA_22       -7.679899e-02  0.050340768 #> nu_y_alpha_NA_NA_23       -1.877313e-01 -0.071091299 #> nu_y_alpha_NA_NA_24       -1.482093e-01 -0.033621879 #> nu_y_alpha_NA_NA_25       -1.007265e-01  0.017994418 #> nu_y_alpha_NA_NA_26       -1.800573e-01 -0.070422226 #> nu_y_alpha_NA_NA_27        2.113455e-02  0.139184008 #> nu_y_alpha_NA_NA_28       -1.012392e-01  0.017283459 #> nu_y_alpha_NA_NA_29       -1.425264e-01 -0.017553696 #> nu_y_alpha_NA_NA_30        4.230518e-02  0.164018405 #> nu_y_alpha_NA_NA_31       -9.036620e-02  0.034262600 #> nu_y_alpha_NA_NA_32       -1.037199e-01  0.030813037 #> nu_y_alpha_NA_NA_33       -1.829814e-03  0.110442403 #> nu_y_alpha_NA_NA_34        3.036013e-02  0.157468985 #> nu_y_alpha_NA_NA_35       -2.336594e-02  0.102503742 #> nu_y_alpha_NA_NA_36        3.356255e-02  0.169358423 #> nu_y_alpha_NA_NA_37        1.987934e-02  0.152544564 #> nu_y_alpha_NA_NA_38       -6.984231e-02  0.057836406 #> nu_y_alpha_NA_NA_39       -5.890937e-02  0.061691569 #> nu_y_alpha_NA_NA_40       -9.800524e-02  0.025874339 #> nu_y_alpha_NA_NA_41       -1.265697e-01 -0.001644795 #> nu_y_alpha_NA_NA_42       -3.286195e-02  0.088924471 #> nu_y_alpha_NA_NA_43       -1.672104e-01 -0.055155832 #> nu_y_alpha_NA_NA_44        1.552476e-01  0.279116344 #> nu_y_alpha_NA_NA_45        2.483351e-02  0.150806854 #> nu_y_alpha_NA_NA_46       -1.104029e-01  0.009186959 #> nu_y_alpha_NA_NA_47       -4.150920e-02  0.086011583 #> nu_y_alpha_NA_NA_48       -9.088547e-02  0.029514883 #> nu_y_alpha_NA_NA_49       -1.392437e-02  0.117751149 #> nu_y_alpha_NA_NA_50       -6.897436e-02  0.053294097 #> sigma_y_NA_NA_NA           1.920934e-01  0.205189135 #> sigma_nu_y_alpha_NA_NA_NA  7.913559e-02  0.119782251 #> tau_y_x_NA_NA_NA           2.533038e-01  0.497250450 #> tau_y_y_lag1_NA_NA_NA      7.639169e-02  0.139829649 #> tau_alpha_y_NA_NA_NA       1.386284e-01  0.283403259"},{"path":"https://docs.ropensci.org/dynamite/reference/dynamice.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Bayesian Dynamic Multivariate Panel Model With Multiple Imputation — dynamice","title":"Estimate a Bayesian Dynamic Multivariate Panel Model With Multiple Imputation — dynamice","text":"Applies multiple imputation using mice::mice() supplied data fits dynamic multivariate panel model imputed data set using dynamite(). Posterior samples imputation run combined. using wide format imputation, long format data automatically converted wide format imputation preserve longitudinal structure, converted back long format estimation.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Bayesian Dynamic Multivariate Panel Model With Multiple Imputation — dynamice","text":"","code":"dynamice(   dformula,   data,   time,   group = NULL,   priors = NULL,   backend = \"rstan\",   verbose = TRUE,   verbose_stan = FALSE,   stanc_options = list(\"O0\"),   threads_per_chain = 1L,   grainsize = NULL,   custom_stan_model = NULL,   debug = NULL,   mice_args = list(),   impute_format = \"wide\",   keep_imputed = FALSE,   stan_csv_dir = tempdir(),   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/dynamice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Bayesian Dynamic Multivariate Panel Model With Multiple Imputation — dynamice","text":"dformula [dynamiteformula] model formula. See dynamiteformula() 'Details'. data [data.frame, tibble::tibble, data.table::data.table] data contains variables model long format. Supported column types integer, logical, double, factor. Columns type character converted factors. Unused factor levels dropped. data can contain missing values simply ignored estimation case-wise fashion (per time-point per channel). Input data converted channel specific matrix representations via stats::model.matrix.lm(). time [character(1)] column name data denotes time index observations. variable factor, integer representation levels used internally defining time indexing. group [character(1)] column name data denotes unique groups NULL corresponding scenario without groups. group NULL, new column .group created constant value 1L created indicating observations belong group. case name conflicts data, see group_var element return object get column name new variable. priors [data.frame] optional data frame prior definitions. See get_priors() 'Details'. backend [character(1)] Defines backend interface Stan,  either \"rstan\" (default) \"cmdstanr\". Note cmdstanr needs installed separately CRAN. also needs actual CmdStan software. See https://mc-stan.org/cmdstanr/ details. verbose [logical(1)] warnings messages suppressed set FALSE. Defaults TRUE. Setting FALSE also disable checks perfect collinearity model matrix. verbose_stan [logical(1)] verbose argument rstan::sampling(). Defaults FALSE. stanc_options [list()] stanc_options argument passed compile method CmdStanModel object via cmdstan_model() backend = \"cmdstanr\". Defaults list(\"O0\"). enable level one compiler optimizations, use list(\"O1\"). See https://mc-stan.org/cmdstanr/reference/cmdstan_model.html details. threads_per_chain [integer(1)] Positive integer defining number parallel threads use within chain. Default 1. See rstan::rstan_options() https://mc-stan.org/cmdstanr/reference/model-method-sample.html details. grainsize [integer(1)] positive integer defining suggested size partial sums using within-chain parallelization. Default number time points divided threads_per_chain. Setting 1 leads workload division entirely internal scheduler. performance within-chain parallelization can sensitive choice grainsize, see Stan manual reduce-sum details. custom_stan_model [character(1)] optional character string either contains customized Stan model code path .stan file contains code. Using override generated model code. expert users . debug [list()] named list form name = TRUE indicating additional objects environment dynamite function added return object. Additionally, values no_compile = TRUE no_sampling = TRUE can used skip compilation Stan code sampling steps respectively. can useful debugging combined model_code = TRUE, adds Stan model code return object. mice_args [list()] Arguments passed mice::mice() excluding data. impute_format [character(1)] Format data passed imputation method. either \"wide\" (default) \"long\" corresponding wide format long format imputation. keep_imputed [logical(1)] imputed datasets kept return object? default FALSE. TRUE, imputations included imputed field return object otherwise NULL. stan_csv_dir [character(1)] directory path output Stan .csv files backend \"cmdstanr\". files saved via $save_output_files() avoid garbage collection sampling runs different imputed datasets. ... dynamite(), additional arguments rstan::sampling() $sample() method CmdStanModel object (see https://mc-stan.org/cmdstanr/reference/model-method-sample.html), chains cores (chains parallel_chains cmdstanr). summary(), additional arguments .data.frame.dynamitefit(). print(), arguments print method tibbles (see tibble::formatting). used formula().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions in the dynamite Package — dynamite-deprecated","title":"Deprecated Functions in the dynamite Package — dynamite-deprecated","text":"functions provided compatibility older versions package. eventually completely removed.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Functions in the dynamite Package — dynamite-deprecated","text":"","code":"plot_betas(x, ...) plot_deltas(x,  ...) plot_nus(x, ...) plot_lambdas(x,  ...) plot_psis(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated Functions in the dynamite Package — dynamite-deprecated","text":"x [dynamitefit] model fit object. ... used.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated Functions in the dynamite Package — dynamite-deprecated","text":"ggplot object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated Functions in the dynamite Package — dynamite-deprecated","text":"plot_betas now called via plot(., types = \"beta\") plot_deltas now called via plot(., types = \"delta\") plot_nus now called via plot(., types = \"nu\") plot_lambdas now called via plot(., types = \"lambda\") plot_psis now called via plot(., types = \"psi\")","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The dynamite Package — dynamite-package","title":"The dynamite Package — dynamite-package","text":"Easy--use efficient interface Bayesian inference complex panel data consisting multiple individuals multiple measurements time using dynamic multivariate panel models. Supports several observational distributions, time-varying effects realistic counterfactual predictions take account dynamic structure model.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-package.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See Also","title":"The dynamite Package — dynamite-package","text":"package vignettes dynamiteformula() information defining models. dynamite() information fitting models. https://github.com/ropensci/dynamite/issues/ submit bug report feature request.","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The dynamite Package — dynamite-package","text":"Maintainer: Santtu Tikka santtuth@gmail.com (ORCID) Authors: Jouni Helske jouni.helske@iki.fi (ORCID) contributors: Nicholas Clark [reviewer] Lucy D'Agostino McGowan [reviewer]","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"Fit Bayesian dynamic multivariate panel model (DMPM) using Stan Bayesian inference. dynamite package supports wide range distributions allows user flexibly customize priors model parameters. dynamite model specified using standard R formula syntax via dynamiteformula(). information examples, see 'Details' package vignettes. formula method returns model definition quoted expression. Information estimated dynamite model can obtained via print() including following: model formula, data, smallest effective sample sizes, largest Rhat summary statistics time-invariant group-invariant model parameters. summary() method provides statistics posterior samples model; alias .data.frame.dynamitefit() summary = TRUE.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"","code":"dynamite(   dformula,   data,   time,   group = NULL,   priors = NULL,   backend = \"rstan\",   verbose = TRUE,   verbose_stan = FALSE,   stanc_options = list(\"O0\"),   threads_per_chain = 1L,   grainsize = NULL,   custom_stan_model = NULL,   debug = NULL,   ... )  # S3 method for class 'dynamitefit' formula(x, ...)  # S3 method for class 'dynamitefit' print(x, full_diagnostics = FALSE, ...)  # S3 method for class 'dynamitefit' summary(object, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"dformula [dynamiteformula] model formula. See dynamiteformula() 'Details'. data [data.frame, tibble::tibble, data.table::data.table] data contains variables model long format. Supported column types integer, logical, double, factor. Columns type character converted factors. Unused factor levels dropped. data can contain missing values simply ignored estimation case-wise fashion (per time-point per channel). Input data converted channel specific matrix representations via stats::model.matrix.lm(). time [character(1)] column name data denotes time index observations. variable factor, integer representation levels used internally defining time indexing. group [character(1)] column name data denotes unique groups NULL corresponding scenario without groups. group NULL, new column .group created constant value 1L created indicating observations belong group. case name conflicts data, see group_var element return object get column name new variable. priors [data.frame] optional data frame prior definitions. See get_priors() 'Details'. backend [character(1)] Defines backend interface Stan,  either \"rstan\" (default) \"cmdstanr\". Note cmdstanr needs installed separately CRAN. also needs actual CmdStan software. See https://mc-stan.org/cmdstanr/ details. verbose [logical(1)] warnings messages suppressed set FALSE. Defaults TRUE. Setting FALSE also disable checks perfect collinearity model matrix. verbose_stan [logical(1)] verbose argument rstan::sampling(). Defaults FALSE. stanc_options [list()] stanc_options argument passed compile method CmdStanModel object via cmdstan_model() backend = \"cmdstanr\". Defaults list(\"O0\"). enable level one compiler optimizations, use list(\"O1\"). See https://mc-stan.org/cmdstanr/reference/cmdstan_model.html details. threads_per_chain [integer(1)] Positive integer defining number parallel threads use within chain. Default 1. See rstan::rstan_options() https://mc-stan.org/cmdstanr/reference/model-method-sample.html details. grainsize [integer(1)] positive integer defining suggested size partial sums using within-chain parallelization. Default number time points divided threads_per_chain. Setting 1 leads workload division entirely internal scheduler. performance within-chain parallelization can sensitive choice grainsize, see Stan manual reduce-sum details. custom_stan_model [character(1)] optional character string either contains customized Stan model code path .stan file contains code. Using override generated model code. expert users . debug [list()] named list form name = TRUE indicating additional objects environment dynamite function added return object. Additionally, values no_compile = TRUE no_sampling = TRUE can used skip compilation Stan code sampling steps respectively. can useful debugging combined model_code = TRUE, adds Stan model code return object. ... dynamite(), additional arguments rstan::sampling() $sample() method CmdStanModel object (see https://mc-stan.org/cmdstanr/reference/model-method-sample.html), chains cores (chains parallel_chains cmdstanr). summary(), additional arguments .data.frame.dynamitefit(). print(), arguments print method tibbles (see tibble::formatting). used formula(). x [dynamitefit] model fit object. full_diagnostics default, effective sample size (ESS) Rhat computed time- group-invariant parameters (full_diagnostics = FALSE). Setting TRUE computes ESS Rhat values model parameters, can take time complex models. object [dynamitefit] model fit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"dynamite returns dynamitefit object list containing following components: stanfit stanfit object, see rstan::sampling() details. dformulas list dynamiteformula objects internal use. data processed version input data. data_name Name input data object. stan list containing various elements related Stan model construction sampling. group_var Name variable defining groups. time_var Name variable defining time index. priors Data frame containing used priors. backend Either \"rstan\" \"cmdstanr\" indicating package used sampling. permutation Randomized permutation posterior draws. call Original function call object class call. formula returns quoted expression. print returns x invisibly. summary returns data.frame.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"best-case scalability dynamite terms data size approximately linear terms number time points number groups, wall-clock time MCMC algorithms provided Stan can depend discrepancy data model (subsequent shape posterior), can vary greatly.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"Santtu Tikka Jouni Helske (2023). dynamite: R Package Dynamic Multivariate Panel Models. arXiv preprint, https://arxiv.org/abs/2302.01607. Jouni Helske Santtu Tikka (2022). Estimating Causal Effects Panel Data Dynamic Multivariate Panel Models. SocArxiv preprint, https://osf.io/preprints/socarxiv/mdwu5/.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/dynamite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a Bayesian Dynamic Multivariate Panel Model — dynamite","text":"","code":"data.table::setDTthreads(1) # For CRAN # \\donttest{ # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   fit <- dynamite(     dformula = obs(y ~ -1 + varying(~x), family = \"gaussian\") +       lags(type = \"varying\") +       splines(df = 20),     gaussian_example,     \"time\",     \"id\",     chains = 1,     refresh = 0   ) } # }  data.table::setDTthreads(1) # For CRAN formula(gaussian_example_fit) #> obs(y ~ -1 + z + varying(~x + lag(y)) + random(~1), family = \"gaussian\") +  #>     splines(df = 20, degree = 3, lb_tau = 0, noncentered = FALSE,  #>         override = FALSE) + random_spec(correlated = FALSE, noncentered = TRUE)  data.table::setDTthreads(1) # For CRAN print(gaussian_example_fit) #> Model: #>   Family   Formula                                        #> y gaussian y ~ -1 + z + varying(~x + lag(y)) + random(~1) #>  #> Correlated random effects added for response(s): y #>  #> Data: gaussian_example (Number of observations: 1450) #> Grouping variable: id (Number of groups: 50) #> Time index variable: time (Number of time points: 30) #>  #> NUTS sampler diagnostics: #>  #> No divergences, saturated max treedepths or low E-BFMIs. #>  #> Smallest bulk-ESS: 178 (sigma_y) #> Smallest tail-ESS: 156 (tau_alpha_y) #> Largest Rhat: 1.018 (beta_y_z) #>  #> Elapsed time (seconds): #>         warmup sample #> chain:1  6.313  3.086 #> chain:2  6.472  3.322 #>  #> Summary statistics of the time- and group-invariant parameters: #> # A tibble: 6 × 10 #>   variable      mean median      sd     mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>        <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 beta_y_z    1.97   1.97   0.0112  0.0113  1.95   1.98  1.02      230.     175. #> 2 sigma_nu_y… 0.0955 0.0940 0.0117  0.0103  0.0791 0.120 1.00      195.     157. #> 3 sigma_y     0.198  0.198  0.00404 0.00401 0.192  0.205 0.995     178.     188. #> 4 tau_alpha_y 0.200  0.193  0.0463  0.0440  0.139  0.283 0.999     211.     156. #> 5 tau_y_x     0.364  0.348  0.0770  0.0746  0.253  0.497 1.01      198.     187. #> 6 tau_y_y_la… 0.105  0.102  0.0208  0.0195  0.0764 0.140 1.01      231.     186.  data.table::setDTthreads(1) # For CRAN summary(gaussian_example_fit,   types = \"beta\",   probs = c(0.05, 0.1, 0.9, 0.95) ) #> # A tibble: 1 × 12 #>   parameter  mean     sd    q5   q10   q90   q95  time group category response #>   <chr>     <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <int> <int> <chr>    <chr>    #> 1 beta_y_z   1.97 0.0112  1.95  1.95  1.98  1.98    NA    NA NA       y        #> # ℹ 1 more variable: type <chr>"},{"path":"https://docs.ropensci.org/dynamite/reference/dynamiteformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Formula for dynamite — dynamiteformula","title":"Model Formula for dynamite — dynamiteformula","text":"Defines new observational new auxiliary channel model using standard R formula syntax. Formulas individual response variables can joined together via +. See 'Details' package vignettes information. function obs shorthand alias dynamiteformula, aux shorthand alias dynamiteformula(formula, family = \"deterministic\").","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamiteformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Formula for dynamite — dynamiteformula","text":"","code":"dynamiteformula(formula, family, link = NULL)  obs(formula, family, link = NULL)  aux(formula)  # S3 method for class 'dynamiteformula' e1 + e2  # S3 method for class 'dynamiteformula' print(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/dynamiteformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Formula for dynamite — dynamiteformula","text":"formula [formula] R formula describing model. family [character(1)] family name. See 'Details' supported families. link [character(1)] name link function use NULL. See details supported link functions default values specific families. e1 [dynamiteformula] model formula specification. e2 [dynamiteformula] model formula specification. x [dynamiteformula] model formula. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamiteformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Formula for dynamite — dynamiteformula","text":"dynamiteformula object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/dynamiteformula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Formula for dynamite — dynamiteformula","text":"Currently dynamite package supports following distributions observations: Categorical: categorical (softmax link using first category reference). See documentation categorical_logit_glm Stan function reference manual https://mc-stan.org/users/documentation/. Multinomial: multinomial (softmax link, first category reference). Gaussian: gaussian (identity link, parameterized using mean standard deviation). Multivariate Gaussian: mvgaussian (identity link, parameterized using mean vector, standard deviation vector Cholesky decomposition correlation matrix). Poisson: poisson (log-link, optional known offset variable). Negative-binomial: negbin (log-link, using mean dispersion parameterization, optional known offset variable). See documentation NegBinomial2 Stan function reference manual. Bernoulli: bernoulli (logit-link). Binomial: binomial (logit-link). Exponential: exponential (log-link). Gamma: gamma (log-link, using mean shape parameterization). Beta: beta (logit-link, using mean precision parameterization). Student t: student (identity link, parameterized using degrees freedom, location scale) models dynamite package defined combining channel-specific formulas defined via R formula syntax. channel defined via obs function, channels combined +. example formula obs(y ~ lag(x), family = \"gaussian\") + obs(x ~ z, family = \"poisson\") defines model two channels; first declare y Gaussian variable depending previous value x (lag(x)), add second channel declaring x Poisson distributed depending exogenous variable z (define distribution). Number trials binomial channels defined via trials model component, e.g., obs(y ~ x + trials(n), family = \"binomial\"), n data variable defining number trials. multinomial channels, number trials automatically defined sum observations categories, can also defined using trials component, example prediction. Multivariate channels defined providing single formula components providing component-specific formulas separated |. response variables correspond components joined c(). instance, following define c(y1, y2) multivariate gaussian x predictor mean first component x z predictors mean second component: obs(c(y1, y2) ~ x | x + z, family = \"mvgaussian\"). multinomial channel single formula. addition declaring response variables via obs, can also use function aux define auxiliary channels deterministic functions variables. values auxiliary variables computed dynamically prediction, making use lagged values transformations possible. function aux also use family argument, automatically set deterministic special channel type obs. Note lagged values deterministic aux channels imply fixed time points. Instead must given starting values using special function init directly initializes lags specified values, past computes initial values based R expression. init past appear right hand side model formula, separated primary defining expression via |. formula within obs can also contain additional special function varying, defines time-varying part model equation, case write example obs(x ~ z + varying(~ -1 + w), family = \"poisson\"), defines model equation constant intercept time-invariant effect z, time-varying effect w. also remove duplicate intercept -1 order avoid identifiability issues model estimation (also define time varying intercept, case write obs(x ~ -1 + z + varying(~ w), family = \"poisson)). part formula wrapped varying assumed correspond fixed part model, obs(x ~ z + varying(~ -1 + w), family = \"poisson\") actually identical obs(x ~ -1 + fixed(~ z) + varying(~ -1 + w), family = \"poisson\") obs(x ~ fixed(~ z) + varying(~ -1 + w), family = \"poisson\"). defining varying effects, also need define time-varying regression coefficient behave. , splines component added model, e.g., obs(x ~ varying(~ -1 + w), family = \"poisson) + splines(df = 10) defines cubic B-spline 10 degrees freedom time-varying coefficient corresponding w. model contains multiple time-varying coefficients, spline basis used coefficients, unique spline coefficients standard deviation. desired model contains lagged predictors response channel, can quickly added model either time-invariant time-varying predictors via lags() instead writing manually channel. also possible define group-specific (random) effects term using special syntax random() similarly varying(). example, random(~1) leads model addition common intercept, individual/group intercept zero-mean normal prior unknown standard deviation analogously typical mixed models. additional model component random_spec() can used define whether random effects allowed correlate within across channels whether use centered noncentered parameterization random effects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/dynamiteformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Formula for dynamite — dynamiteformula","text":"","code":"data.table::setDTthreads(1) # For CRAN # A single gaussian response channel with a time-varying effect of 'x', # and a time-varying effect of the lag of 'y' using B-splines with # 20 degrees of freedom for the coefficients of the time-varying terms. obs(y ~ -1 + varying(~x), family = \"gaussian\") +   lags(type = \"varying\") +   splines(df = 20) #>   Family   Formula              #> y gaussian y ~ -1 + varying(~x) #>  #> Lagged responses added as varying predictors with: k = 1  # A two-channel categorical model with time-invariant predictors # here, lag terms are specified manually obs(x ~ z + lag(x) + lag(y), family = \"categorical\") +   obs(y ~ z + lag(x) + lag(y), family = \"categorical\") #>   Family      Formula                 #> x categorical x ~ z + lag(x) + lag(y) #> y categorical y ~ z + lag(x) + lag(y)  # The same categorical model as above, but with the lag terms # added using 'lags' obs(x ~ z, family = \"categorical\") +   obs(y ~ z, family = \"categorical\") +   lags(type = \"fixed\") #>   Family      Formula #> x categorical x ~ z   #> y categorical y ~ z   #>  #> Lagged responses added as fixed predictors with: k = 1  # A multichannel model with a gaussian, Poisson and a Bernoulli response and # an auxiliary channel for the logarithm of 'p' plus one obs(g ~ lag(g) + lag(logp), family = \"gaussian\") +   obs(p ~ lag(g) + lag(logp) + lag(b), family = \"poisson\") +   obs(b ~ lag(b) * lag(logp) + lag(b) * lag(g), family = \"bernoulli\") +   aux(numeric(logp) ~ log(p + 1)) #>      Family        Formula                                  #> g    gaussian      g ~ lag(g) + lag(logp)                   #> p    poisson       p ~ lag(g) + lag(logp) + lag(b)          #> b    bernoulli     b ~ lag(b) * lag(logp) + lag(b) * lag(g) #> logp deterministic numeric(logp) ~ log(p + 1)                data.table::setDTthreads(1) # For CRAN obs(y ~ x, family = \"gaussian\") + obs(z ~ w, family = \"exponential\") #>   Family      Formula #> y gaussian    y ~ x   #> z exponential z ~ w    data.table::setDTthreads(1) # For CRAN x <- obs(y ~ x + random(~ 1 + lag(d)), family = \"gaussian\") +   obs(z ~ varying(~w), family = \"exponential\") +   aux(numeric(d) ~ log(y) | init(c(0, 1))) +   lags(k = 2) +   splines(df = 5) +   random_spec(correlated = FALSE) #> Warning: Both time-constant and time-varying intercept specified: #> ℹ Defaulting to time-varying intercept. print(x) #>   Family        Formula                             #> y gaussian      y ~ x + random(~1 + lag(d))         #> z exponential   z ~ varying(~w)                     #> d deterministic numeric(d) ~ log(y) | init(c(0, 1)) #>  #> Lagged responses added as fixed predictors with: k = 2 #> Random effects added for response(s): y"},{"path":"https://docs.ropensci.org/dynamite/reference/fitted.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Fitted Values of a dynamite Model — fitted.dynamitefit","title":"Extract Fitted Values of a dynamite Model — fitted.dynamitefit","text":"Fitted values dynamitefit object, .e., \\(E(y_t | newdata, \\theta)\\) \\(\\theta\\) contains model parameters. See also predict.dynamitefit() multi-step predictions.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/fitted.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Fitted Values of a dynamite Model — fitted.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' fitted(   object,   newdata = NULL,   n_draws = NULL,   thin = 1,   expand = TRUE,   df = TRUE,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/fitted.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Fitted Values of a dynamite Model — fitted.dynamitefit","text":"object [dynamitefit] model fit object. newdata [data.frame] Data used predictions. NULL (default), data used model estimation used predictions well. new time points present data used fit model, new group levels can included. n_draws [integer(1)] Number posterior samples use, default NULL uses samples without permuting (chains concatenated). n_drawsis smaller ndraws(object), random subset n_draws posterior samples used. thin [integer(1)] Use every thin posterior sample. can beneficial model object contains large number samples. Default 1 meaning samples used. expand [logical(1)] TRUE (default), output single data.frame containing original newdata predicted values. Otherwise, list returned two components, simulated observed, first contains predicted values, second contains original newdata. Setting expand FALSE can help conserve memory newdata replicated n_draws times output. argument ignored funs provided. df [logical(1)] TRUE (default) output consists data.frame objects, data.table objects otherwise. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/fitted.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Fitted Values of a dynamite Model — fitted.dynamitefit","text":"data.frame containing fitted values.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/fitted.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Fitted Values of a dynamite Model — fitted.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN fitted(gaussian_example_fit, n_draws = 2L) #>      id time .draw     y_fitted             x z            y #> 1     1    1     1           NA -0.5753469626 0  0.404690656 #> 2     1    2     1  1.824046192  1.0527114656 1  1.366561787 #> 3     1    3     1  0.128558253  0.1192452364 0  0.104795746 #> 4     1    4     1  0.516781440 -0.5211173176 0  0.929566554 #> 5     1    5     1  1.055191096  1.3011759922 1  0.860590438 #> 6     1    6     1  2.529136158 -0.2052992575 1  2.116082005 #> 7     1    7     1  2.107358891  0.4922285701 1  2.297089650 #> 8     1    8     1 -0.002202432  0.8719649541 0 -0.139421359 #> 9     1    9     1  2.393703127 -0.0973692675 1  2.317530179 #> 10    1   10     1  1.992218666 -0.8338435805 0  1.937360674 #> 11    1   11     1  1.646959737 -0.3970305203 0  1.657080795 #> 12    1   12     1  0.024069550  0.8636484342 0  0.218155954 #> 13    1   13     1 -1.017791932  1.0610952533 0 -0.944676028 #> 14    1   14     1  1.179201492  0.5397906055 1  1.386499245 #> 15    1   15     1  6.464033354 -2.5079178022 1  6.593880944 #> 16    1   16     1  3.732969632  0.9112096768 1  3.852378758 #> 17    1   17     1  0.174081803  2.5754497637 1  0.322540139 #> 18    1   18     1  1.294150195  0.7841708791 1  1.529191330 #> 19    1   19     1 -2.875650295  2.7973911470 0 -3.053726414 #> 20    1   20     1 -0.861219924  1.4819340159 1 -0.916626670 #> 21    1   21     1  2.716591941 -0.6249283875 1  2.478956305 #> 22    1   22     1  2.146478031  0.5102732511 1  2.471760969 #> 23    1   23     1  2.321368257  0.2018374723 1  2.483551899 #> 24    1   24     1  1.615127984  0.7412773772 1  1.558667362 #> 25    1   25     1  0.841957507  1.3426239200 1  0.603979578 #> 26    1   26     1 -1.643357189  1.9001363349 0 -1.670883500 #> 27    1   27     1  1.622586754  0.0650680195 1  1.583935930 #> 28    1   28     1  2.581659139 -0.8682240473 1  2.719419770 #> 29    1   29     1  2.189518220 -0.2382486959 1  1.834727911 #> 30    1   30     1  2.897871366 -0.6860240001 1  2.840950465 #> 31    2    1     1           NA  0.6079643222 1  0.799914607 #> 32    2    2     1  2.235243320 -1.0491770067 1  2.149899777 #> 33    2    3     1  2.167377446  0.2436874296 1  2.040891783 #> 34    2    4     1  2.819917063 -0.4898704531 1  2.954428636 #> 35    2    5     1  1.915255857  0.7567747638 1  2.145966376 #> 36    2    6     1  1.890228596  0.6511932816 1  1.911350810 #> 37    2    7     1  2.355216870  0.2678350153 1  2.347386937 #> 38    2    8     1  3.253895707 -0.3484724490 1  2.997893465 #> 39    2    9     1  3.026341425  0.2161525418 1  2.973068796 #> 40    2   10     1  2.837021824  0.5787223746 1  2.749272526 #> 41    2   11     1  4.999666475 -1.2175999878 1  5.134904795 #> 42    2   12     1  1.199546155  1.3805145283 0  1.299656939 #> 43    2   13     1  1.469117183 -0.2128482786 0  1.431866443 #> 44    2   14     1  0.277861259  0.6164557164 0  0.139077598 #> 45    2   15     1  4.646757142 -1.5652817650 1  4.307466136 #> 46    2   16     1  1.951454569  0.1424584320 0  1.645318818 #> 47    2   17     1  2.721252135 -1.1852888106 0  2.739822928 #> 48    2   18     1  0.222223168  2.2996193612 1  0.400544920 #> 49    2   19     1 -3.325511988  2.8322260239 0 -3.232121868 #> 50    2   20     1 -0.086344890 -0.6129877549 0 -0.096106520 #> 51    2   21     1  0.973900506  0.9571642742 1  0.808179646 #> 52    2   22     1  0.837342480 -0.3331209012 0  0.806465525 #> 53    2   23     1  2.740166675 -0.4271963863 1  2.966742075 #> 54    2   24     1  1.756369469  0.7532950478 1  1.682595750 #> 55    2   25     1  0.927967178 -0.5035252869 0  0.841259557 #> 56    2   26     1  0.066320178  0.1100091234 0  0.401112094 #> 57    2   27     1 -0.387959903  0.5785892916 0 -0.596732278 #> 58    2   28     1 -0.480807717  0.7295603610 0 -0.103846778 #> 59    2   29     1  3.080053279 -1.5578549039 1  3.318138732 #> 60    2   30     1  2.609353541  0.9934799821 1  2.385513284 #> 61    3    1     1           NA -1.6178827083 0  1.589469150 #> 62    3    2     1  0.525766685 -1.2601552448 0  0.617471337 #> 63    3    3     1  1.200662501  1.2324758785 1  0.933796334 #> 64    3    4     1  2.350739201  0.0471544328 1  2.464414121 #> 65    3    5     1  2.339187093 -1.7267303991 0  2.393225576 #> 66    3    6     1  0.527464356  0.2737664910 0  0.443974132 #> 67    3    7     1  1.785883006  0.6532576795 1  2.049700719 #> 68    3    8     1  2.468764073  0.5185037659 1  2.358937157 #> 69    3    9     1  2.380430666  0.8824651644 1  2.186053658 #> 70    3   10     1  4.367620714 -1.0875807141 1  4.528401569 #> 71    3   11     1  2.583883218  1.6875894829 1  2.426948131 #> 72    3   12     1 -0.875162024  1.9662480155 0 -1.006076800 #> 73    3   13     1  2.217744668 -0.0936367939 1  2.184646963 #> 74    3   14     1  2.764039584  0.6165678175 1  2.457425439 #> 75    3   15     1  1.755699916 -0.0776732006 0  1.814345957 #> 76    3   16     1  5.211058123 -1.3894835240 1  5.341931014 #> 77    3   17     1  2.560609181  0.1009198590 0  2.612250999 #> 78    3   18     1  3.298975424  0.1567029874 1  3.492895037 #> 79    3   19     1  5.454396281 -1.2187118163 1  5.591424183 #> 80    3   20     1  3.031843382  1.1161366155 1  2.959620779 #> 81    3   21     1  0.221254036  2.4244891412 1  0.323614017 #> 82    3   22     1  2.492854297 -0.0659609464 1  2.617828575 #> 83    3   23     1  0.513339256  0.2681028700 0  0.358802880 #> 84    3   24     1  2.511194648 -0.2626705034 1  2.476196111 #> 85    3   25     1  1.924977929  0.7166833209 1  2.114982126 #> 86    3   26     1  1.509702359  1.1403868251 1  1.189201279 #> 87    3   27     1  3.135078270 -1.1692066215 1  3.239107424 #> 88    3   28     1  0.064032400  0.5002658724 0 -0.008853710 #> 89    3   29     1 -0.072425704  0.7613098954 0 -0.360347074 #> 90    3   30     1  2.776584305  0.0385235991 1  2.857669749 #> 91    4    1     1           NA -0.0555619655 1 -0.509070404 #> 92    4    2     1  1.601006727  3.2410399349 1  1.662914737 #> 93    4    3     1  2.898060013 -0.5160638309 1  2.713559641 #> 94    4    4     1 -0.372959549  1.3001986777 0 -0.654154140 #> 95    4    5     1  2.776297408 -0.6015067080 1  2.880026657 #> 96    4    6     1 -0.188454594  1.0246732348 0 -0.512214487 #> 97    4    7     1  2.433727177 -0.1227086610 1  2.357019808 #> 98    4    8     1  1.487638131 -0.3906849786 0  1.333609316 #> 99    4    9     1  2.722522426  0.2055975045 1  2.563418561 #> 100   4   10     1 -0.027673496  1.4840309316 0 -0.153086411 #> 101   4   11     1  0.421039560 -0.0160025272 0  0.516660645 #> 102   4   12     1  2.808669402 -0.0283950547 1  2.768632032 #> 103   4   13     1  4.170855449 -0.0867141350 1  4.435263347 #> 104   4   14     1  7.210314273 -1.6921015209 1  7.245585692 #> 105   4   15     1  5.385362915  0.2062940448 1  5.307947840 #> 106   4   16     1  3.941990479 -0.8660377447 0  3.940906546 #> 107   4   17     1  6.634495864 -1.7799772880 1  6.330504622 #> 108   4   18     1  4.957228931  0.0467335275 1  5.208499829 #> 109   4   19     1  3.866498189  0.4690319560 1  3.772663633 #> 110   4   20     1  2.456486044  1.0365480099 1  2.449861713 #> 111   4   21     1  4.383373309 -0.9159792437 1  4.337403489 #> 112   4   22     1  3.648271812 -0.1152217094 1  3.491070826 #> 113   4   23     1  4.533954952 -1.2304309254 1  4.648292859 #> 114   4   24     1  1.588238243 -0.3125438690 0  1.476969981 #> 115   4   25     1  1.300830883 -0.7496685841 0  1.071210218 #> 116   4   26     1  1.637155370  0.7680813047 1  1.339660702 #> 117   4   27     1 -0.269051813  0.8061848554 0 -0.236030426 #> 118   4   28     1  1.723013892  0.6342502537 1  1.998996179 #> 119   4   29     1 -0.349727189  1.1291443956 0 -0.516310824 #> 120   4   30     1  2.633787630  0.5361489758 1  2.477371860 #> 121   5    1     1           NA  0.5194072039 1 -1.015564748 #> 122   5    2     1  0.037979449 -0.4168575882 0 -0.358001992 #> 123   5    3     1  0.850532494 -0.9925071504 0  0.995924635 #> 124   5    4     1  0.340116453  2.2930789738 1  0.435371740 #> 125   5    5     1  2.569927705 -0.3520464566 1  2.686379055 #> 126   5    6     1  1.820938455  0.8176594464 1  1.914369287 #> 127   5    7     1  3.118254710 -0.4136765136 1  2.890286451 #> 128   5    8     1  2.179685456 -1.0927872091 0  2.177077263 #> 129   5    9     1  3.591326790 -0.6164358429 1  3.387878492 #> 130   5   10     1  2.795528020 -1.1862065853 0  3.071519967 #> 131   5   11     1  2.473126250  1.0749450773 1  2.484300724 #> 132   5   12     1  6.751559862 -2.2490510903 1  6.432870397 #> 133   5   13     1  1.720053741  1.4414617561 0  1.555910025 #> 134   5   14     1  0.712381026  0.3687420580 0  0.642576596 #> 135   5   15     1  2.292675850  0.2768724589 1  2.794626863 #> 136   5   16     1  1.771320135 -0.1632849322 0  1.975275125 #> 137   5   17     1  2.298573014  0.5898359230 1  2.377354020 #> 138   5   18     1  1.172185129  0.0965858341 0  1.423748628 #> 139   5   19     1  1.170492055 -0.2112469186 0  1.104385321 #> 140   5   20     1  2.906487971 -0.1624831319 1  2.927595835 #> 141   5   21     1  1.835657805  1.0576641709 1  1.804799350 #> 142   5   22     1  3.492246130 -0.6505126188 1  3.468711050 #> 143   5   23     1  3.035516872 -0.1361368722 1  2.773317033 #> 144   5   24     1  0.558380983  0.0735986090 0  0.090839406 #> 145   5   25     1  2.521773676 -0.4785282105 1  2.581973374 #> 146   5   26     1  1.574798545 -1.1680916221 0  1.427473427 #> 147   5   27     1  1.934103116  0.3073900762 1  2.249363143 #> 148   5   28     1  1.868368621  0.4236450456 1  1.653165083 #> 149   5   29     1  0.343667469 -0.2951078307 0  0.109843919 #> 150   5   30     1  2.801910564 -0.5236266979 1  3.098508130 #> 151   6    1     1           NA  0.3011533622 0  0.100858666 #> 152   6    2     1  0.111712151  0.2982275915 0 -0.077473924 #> 153   6    3     1  0.645985143  1.6756969324 1  0.688756122 #> 154   6    4     1 -0.954744124  1.5475810590 0 -1.018973558 #> 155   6    5     1  1.467477914  0.7035239028 1  1.760778549 #> 156   6    6     1  2.847687219 -0.2097931712 1  3.171997074 #> 157   6    7     1  5.933562990 -2.6431489520 1  6.241876948 #> 158   6    8     1  0.732337161  1.2100105104 0  0.821080598 #> 159   6    9     1  1.454864985 -0.7347992519 0  1.595493535 #> 160   6   10     1  2.917153808  0.1010791514 1  2.785827430 #> 161   6   11     1  6.754158763 -2.6016996703 1  6.873161645 #> 162   6   12     1  4.081767977  0.0315260046 0  4.057492642 #> 163   6   13     1  1.047924958  1.1250718923 0  0.965979753 #> 164   6   14     1  1.620966772  0.9678592099 1  1.992564997 #> 165   6   15     1  2.212058312  0.8215067804 1  1.748782349 #> 166   6   16     1 -0.425131353  2.5530261135 1 -0.398741205 #> 167   6   17     1 -1.265612424  1.0966084717 0 -1.243935377 #> 168   6   18     1 -0.162678680  0.0697662309 0  0.090187707 #> 169   6   19     1  0.209137401  0.1870511466 0  0.304185792 #> 170   6   20     1  1.816998188 -0.9759266928 0  2.119589527 #> 171   6   21     1  1.976047589  0.8251497278 1  2.270608134 #> 172   6   22     1  5.457239382 -2.0186886591 1  5.462765820 #> 173   6   23     1  2.429341524  0.8257908317 1  3.031629934 #> 174   6   24     1 -0.446272006  1.0630177893 0 -0.290063217 #> 175   6   25     1 -0.413886230  0.4387217506 0 -0.255384632 #> 176   6   26     1  2.186498482 -0.1711126523 1  2.058993810 #> 177   6   27     1  2.154913977  0.2638060136 1  2.451878672 #> 178   6   28     1  0.408106406 -0.2018380447 0  0.355040854 #> 179   6   29     1  1.966060775  0.5362428184 1  1.722045860 #> 180   6   30     1  3.166240817 -1.1512213349 1  3.055582569 #> 181   7    1     1           NA  0.1056761941 1  3.022104185 #> 182   7    2     1  2.310169272  0.6365696740 1  2.055910950 #> 183   7    3     1  2.916657787 -0.4411632169 1  2.967003529 #> 184   7    4     1  2.845259297 -0.1331509643 1  2.800330659 #> 185   7    5     1  0.895694923 -0.1056713340 0  0.788323885 #> 186   7    6     1  2.112995179  0.3781677722 1  2.396762471 #> 187   7    7     1  3.023550384 -0.0929410185 1  3.098144938 #> 188   7    8     1  2.497278846  0.7409000113 1  2.668812770 #> 189   7    9     1  3.431176602 -0.1318027930 1  3.393338137 #> 190   7   10     1  1.241754548  0.5329892868 0  1.093863440 #> 191   7   11     1  3.498597485 -0.4531978300 1  3.421389098 #> 192   7   12     1  2.073650429  0.2055612084 0  2.053310858 #> 193   7   13     1  2.454194303  0.8344015678 1  2.108926160 #> 194   7   14     1  1.771048572  1.2765786815 1  1.739126254 #> 195   7   15     1  1.618017581 -0.1941524093 0  1.851509719 #> 196   7   16     1  5.899528471 -1.8602275742 1  5.822541133 #> 197   7   17     1  0.844862801  1.4456622411 0  0.465610117 #> 198   7   18     1  3.245741512 -1.8484727753 0  3.539276284 #> 199   7   19     1  3.544021281  0.2275427286 1  3.881829904 #> 200   7   20     1  5.316111626 -1.0891451909 1  5.067313416 #> 201   7   21     1  4.149012128 -0.0701942243 1  3.807179482 #> 202   7   22     1  2.928998754  0.3488349702 1  2.635644332 #> 203   7   23     1  5.507628999 -2.1741246492 1  5.332999549 #> 204   7   24     1  2.858229161  0.4260204867 1  2.915745587 #> 205   7   25     1  1.564210168 -0.6791122705 0  1.211932662 #> 206   7   26     1  1.193605481  1.3052615363 1  1.365926521 #> 207   7   27     1  1.934916766  0.5084847916 1  1.974232311 #> 208   7   28     1  0.356599921 -0.0768658984 0 -0.001635648 #> 209   7   29     1  2.504050245 -0.2758904748 1  2.352680629 #> 210   7   30     1  2.737313150  0.9147522410 1  2.680799332 #> 211   8    1     1           NA -0.6407060083 1 -0.428615845 #> 212   8    2     1  2.041059782 -0.4837806257 1  2.011674191 #> 213   8    3     1  1.010422446 -0.7230659699 0  1.096189866 #> 214   8    4     1  1.746837590 -1.7565273956 0  1.519444885 #> 215   8    5     1  3.557702193 -1.2586486281 1  3.745340843 #> 216   8    6     1  3.851178881 -0.9454088311 1  3.345610826 #> 217   8    7     1  0.502566378  0.4302846964 0  0.684066387 #> 218   8    8     1  0.762821640  1.7242622392 1  0.750975243 #> 219   8    9     1  2.297814076  0.3100169866 1  2.394660844 #> 220   8   10     1  2.608061103  0.5867353391 1  2.481019325 #> 221   8   11     1  4.230865178 -0.6754822916 1  4.208841294 #> 222   8   12     1  4.773980519 -0.1553453471 1  4.703960196 #> 223   8   13     1  5.314090304 -0.2873407998 1  5.417760935 #> 224   8   14     1  3.402972921 -0.2249612710 0  3.637277813 #> 225   8   15     1  2.250345803  1.2145887945 1  2.413492795 #> 226   8   16     1 -0.231796256  1.1310546518 0 -0.581707387 #> 227   8   17     1  4.824085495 -1.9251452518 1  4.797526268 #> 228   8   18     1  4.584223033 -1.6711270586 0  4.538173643 #> 229   8   19     1  3.791680718 -1.2619004629 0  3.527386042 #> 230   8   20     1  2.966689752  0.4577869579 1  2.623029058 #> 231   8   21     1  3.677414008 -0.4536463741 1  3.713207248 #> 232   8   22     1  2.201832293  0.7616395076 1  2.227958566 #> 233   8   23     1  4.384970954 -1.4879261874 1  4.253492117 #> 234   8   24     1  1.246124251  1.4330075108 1  1.243802590 #> 235   8   25     1  4.075016149 -1.7029648351 1  4.268532761 #> 236   8   26     1  2.000327273  0.8760961096 1  2.172244960 #> 237   8   27     1  0.363558266 -0.1163584399 0  0.424825880 #> 238   8   28     1  1.568637130  0.6873641133 1  1.653377917 #> 239   8   29     1 -0.243004663  0.6823152451 0 -0.204850369 #> 240   8   30     1  2.567501966  0.2380714916 1  2.112486402 #> 241   9    1     1           NA -0.8497043460 1  1.145681218 #> 242   9    2     1  1.999130305  0.5168620443 1  2.060451984 #> 243   9    3     1  3.426093330 -1.2362731189 1  3.611234909 #> 244   9    4     1  2.981762667 -0.3887798641 1  3.104076490 #> 245   9    5     1  1.064791090  1.6844357081 1  0.940592347 #> 246   9    6     1  1.450001326  0.8569230109 1  1.580796088 #> 247   9    7     1  0.012919810  0.5353988409 0 -0.002035771 #> 248   9    8     1  2.275384475  0.0651539326 1  2.594268388 #> 249   9    9     1  4.081612229 -1.0396803527 1  4.121756260 #> 250   9   10     1  4.126228239 -0.3017466639 1  3.899953027 #> 251   9   11     1  5.531436245 -1.2229261794 1  5.915908246 #> 252   9   12     1  4.679814242  0.5682886208 1  4.433565492 #> 253   9   13     1  4.193303876  0.3732414342 1  4.147687449 #> 254   9   14     1  4.899991390 -0.3218925862 1  4.969679632 #> 255   9   15     1  5.816963623 -0.9215160429 1  6.092338705 #> 256   9   16     1  3.619952292 -0.5272342572 0  3.489168459 #> 257   9   17     1  3.147299330  0.4127694972 1  3.195334402 #> 258   9   18     1  3.686735723 -0.0775389668 1  3.835236782 #> 259   9   19     1  3.400645285  0.2855895802 1  3.322878015 #> 260   9   20     1  3.583117031 -0.0711267337 1  3.614633925 #> 261   9   21     1 -0.605085551  1.5753077068 0 -0.320646125 #> 262   9   22     1  3.695141943 -1.2887162354 1  3.634863633 #> 263   9   23     1  4.316297845 -1.1619375576 1  4.398863271 #> 264   9   24     1  2.970213594 -0.0076368704 1  2.877896868 #> 265   9   25     1 -0.712996002  1.2651684352 0 -0.642107011 #> 266   9   26     1  1.410723953  0.4637961416 1  1.542273722 #> 267   9   27     1  1.470003264  0.9255460985 1  1.349542380 #> 268   9   28     1 -0.021355448  0.1716315069 0  0.070331551 #> 269   9   29     1  2.227210975 -0.1172907147 1  2.294627288 #> 270   9   30     1  2.844766455 -0.2390677595 1  2.631366744 #> 271  10    1     1           NA -1.0241287906 1 -0.243098210 #> 272  10    2     1  1.883180802  0.3689645274 1  1.845338526 #> 273  10    3     1  3.400082096 -1.2847157223 1  3.415391240 #> 274  10    4     1  2.520409430  0.0892072231 1  2.671626886 #> 275  10    5     1 -0.281169818  0.9113912918 0 -0.186934534 #> 276  10    6     1  0.651750369 -0.4610383389 0  0.529066321 #> 277  10    7     1  0.962364495 -0.5552783513 0  0.655498983 #> 278  10    8     1  1.326223681  1.1250027458 1  1.248016943 #> 279  10    9     1  2.866971947 -0.1843088688 1  3.226234221 #> 280  10   10     1  3.384833611  0.0795019953 1  3.622796787 #> 281  10   11     1  2.121492684  1.5466091542 1  1.914785204 #> 282  10   12     1 -0.040520604  1.0106779645 0  0.150112460 #> 283  10   13     1  1.883778298  0.4032903312 1  1.829617664 #> 284  10   14     1 -0.850992275  1.4878378319 0 -0.887358328 #> 285  10   15     1  1.693401978 -1.2084427204 0  1.765303631 #> 286  10   16     1  0.676459117  1.6659909000 1  0.713818111 #> 287  10   17     1  0.290644889  1.5933699514 1  0.277424068 #> 288  10   18     1  3.167030903 -0.5810673806 1  3.547790179 #> 289  10   19     1  1.295111179  1.7492473631 1  1.052654357 #> 290  10   20     1  0.270038292  1.7791026669 1  0.380044556 #> 291  10   21     1  4.927936414 -2.0054578182 1  4.868335599 #> 292  10   22     1  1.567006743  1.4824027185 1  1.899864315 #> 293  10   23     1  4.394755123 -1.5890896941 1  4.186120484 #> 294  10   24     1 -0.409914740  1.1256676052 0 -0.423094959 #> 295  10   25     1  1.450027966  0.3603572379 1  1.716701519 #> 296  10   26     1  1.827914906  0.4771142454 1  1.800642044 #> 297  10   27     1  1.679555032  0.6482297737 1  1.564769319 #> 298  10   28     1  2.557118730 -0.8301085743 1  2.341021040 #> 299  10   29     1  0.296470458 -0.3446758639 0  0.205609773 #> 300  10   30     1  2.600993371  0.0692353265 1  2.473965339 #> 301  11    1     1           NA  0.1176465971 1 -0.478543238 #> 302  11    2     1  2.183561222 -0.2153805076 1  1.845366106 #> 303  11    3     1  3.007367380 -0.5739734793 1  2.727937010 #> 304  11    4     1  0.035993303  0.8450130041 0  0.198378009 #> 305  11    5     1  2.155876780  0.2374302725 1  2.233113146 #> 306  11    6     1  0.218966813  2.4167733538 1  0.351792428 #> 307  11    7     1  0.548993377  1.7795029098 1  0.465082022 #> 308  11    8     1 -1.319142303  1.9754190540 0 -1.104607879 #> 309  11    9     1  1.346012659  0.9672672602 1  1.298585289 #> 310  11   10     1  2.019151958  0.9612641518 1  1.966557917 #> 311  11   11     1  3.081399579 -1.4152819198 0  3.582249207 #> 312  11   12     1  5.128911453 -0.5179824302 1  5.366516935 #> 313  11   13     1  4.995351699 -1.0416732943 0  5.263842597 #> 314  11   14     1  5.630832887 -1.6679280458 0  5.711074986 #> 315  11   15     1  4.796995910 -1.2289861776 0  4.771647033 #> 316  11   16     1  6.099380070 -1.1392006400 1  6.050091377 #> 317  11   17     1  3.608266463 -0.4140158630 0  3.461478853 #> 318  11   18     1  3.806605279  0.0547365251 1  3.850571492 #> 319  11   19     1  4.204074975 -0.1640900041 1  3.962837714 #> 320  11   20     1  1.249193279  0.5351379605 0  1.097999232 #> 321  11   21     1  3.618742267 -0.6431947916 1  3.662140687 #> 322  11   22     1  0.888900612  0.3851548237 0  1.171066353 #> 323  11   23     1  1.964988365  0.4195830393 1  1.870576721 #> 324  11   24     1  1.532695986  0.8830023110 1  1.178325128 #> 325  11   25     1  3.048803775 -0.5836394406 1  2.937608154 #> 326  11   26     1  3.167527587 -0.4914053002 1  3.062103470 #> 327  11   27     1  0.702223626 -0.1502093742 0  0.419404059 #> 328  11   28     1  2.371716143 -0.2901591198 1  2.432464613 #> 329  11   29     1  2.220962281  0.1116204982 1  2.227757210 #> 330  11   30     1  2.636509618  1.3259083426 1  2.885934394 #> 331  12    1     1           NA -0.9474746142 1 -0.710417122 #> 332  12    2     1  2.008911481  0.0652930335 1  1.877130021 #> 333  12    3     1  1.864829521  0.6179858172 1  1.759789006 #> 334  12    4     1  1.633228354  0.9625279685 1  2.007909574 #> 335  12    5     1  1.412390812  1.2181086103 1  1.569199613 #> 336  12    6     1  4.297029368 -1.6510488957 1  4.501533363 #> 337  12    7     1  0.980057107  0.2864244196 0  0.781702796 #> 338  12    8     1  2.891904195 -0.2814821150 1  3.055072341 #> 339  12    9     1  3.418353832 -0.1082800912 1  2.966020532 #> 340  12   10     1  2.966744652 -1.4564659171 0  2.671380225 #> 341  12   11     1  3.231537328  0.3183902604 1  3.092213141 #> 342  12   12     1  4.451196995 -0.2940953272 1  4.284924656 #> 343  12   13     1  7.298545647 -1.7283045153 1  7.095562643 #> 344  12   14     1  6.557340846 -0.4368299769 1  6.566440836 #> 345  12   15     1  2.289368912  0.7422970242 0  2.598539978 #> 346  12   16     1  3.281597880  0.1436232347 1  3.476017315 #> 347  12   17     1  4.118403827 -0.2121505321 1  3.779509451 #> 348  12   18     1  6.823867795 -2.1112083733 1  6.937739948 #> 349  12   19     1  5.313644273 -0.1629267107 1  5.242251503 #> 350  12   20     1  2.808662828 -0.3719448752 0  2.698440156 #> 351  12   21     1  5.055062133 -1.4368434437 1  4.979191840 #> 352  12   22     1 -0.076394527  1.3416402950 0 -0.242383956 #> 353  12   23     1  1.289969207 -0.9929283498 0  1.219076741 #> 354  12   24     1  1.589656825  0.6120834609 1  1.624147700 #> 355  12   25     1  4.550840122 -1.9940787873 1  4.294265260 #> 356  12   26     1  4.069558485 -1.3193853133 1  3.937380702 #> 357  12   27     1 -0.162633273  1.0403770193 0 -0.142081642 #> 358  12   28     1  2.871457028 -1.3191257242 1  2.749138011 #> 359  12   29     1  2.329278702 -0.2834053150 1  2.349048730 #> 360  12   30     1  3.048565857 -0.6981666346 1  2.931330481 #> 361  13    1     1           NA -0.4905574437 1 -0.211244628 #> 362  13    2     1  2.145672398 -0.0340672537 1  1.964347649 #> 363  13    3     1 -0.432309653  1.1098481389 0 -0.384748019 #> 364  13    4     1  1.593422308  0.6843094294 1  1.386224740 #> 365  13    5     1  3.771086801 -1.3387742872 1  3.621573592 #> 366  13    6     1  3.479627845 -0.4639872430 1  3.771304119 #> 367  13    7     1  3.051607305  0.1263158585 1  2.855508307 #> 368  13    8     1  4.510126128 -1.3229511128 1  4.239562380 #> 369  13    9     1  4.388978392 -0.6984206676 1  4.270753061 #> 370  13   10     1  4.824549168 -0.7817397115 1  4.642428416 #> 371  13   11     1  3.615469566  0.8464362856 1  3.587746197 #> 372  13   12     1  1.880244211  0.3978422088 0  1.745698465 #> 373  13   13     1  2.559877320  0.6418300277 1  2.870533862 #> 374  13   14     1  3.315241408  0.4574620794 1  3.593126593 #> 375  13   15     1  2.244735014 -0.0829199423 0  2.048333565 #> 376  13   16     1  2.923567283 -1.0995509417 0  3.010070006 #> 377  13   17     1  3.757881779 -0.0365372222 1  3.634684524 #> 378  13   18     1  4.032110344 -1.4986982545 0  3.855345251 #> 379  13   19     1  2.082282457  1.3985720063 1  1.932605725 #> 380  13   20     1  4.491575317 -1.0255422485 1  3.935054380 #> 381  13   21     1  1.863434431  1.3953134389 1  1.816196897 #> 382  13   22     1  4.024164329 -0.9571704712 1  4.029602296 #> 383  13   23     1  5.814006988 -2.1645470853 1  5.733825052 #> 384  13   24     1  2.946266198  0.4147007068 1  2.711618747 #> 385  13   25     1 -1.268917280  1.9022097714 0 -1.352296430 #> 386  13   26     1  0.684836736  1.2954257908 1  0.571076697 #> 387  13   27     1  1.964768032  0.2925586849 1  2.114426736 #> 388  13   28     1  2.872981100 -0.9670319027 1  2.896752984 #> 389  13   29     1  0.618690260 -0.5910171645 0  0.545245811 #> 390  13   30     1  3.026986146 -0.7494084445 1  2.930446699 #> 391  14    1     1           NA -0.2560921922 1  1.641784471 #> 392  14    2     1  1.782205836  2.1284518990 1  1.766273151 #> 393  14    3     1  1.686222154  0.7075883538 1  1.666752499 #> 394  14    4     1  3.502502525 -1.3952743498 1  3.769974415 #> 395  14    5     1  2.118923409  0.6608202978 1  2.196038201 #> 396  14    6     1  1.703924093  0.8253798628 1  1.472755020 #> 397  14    7     1  1.148177508  1.2722667795 1  0.982327760 #> 398  14    8     1  0.848444083 -0.2393515671 0  0.993337541 #> 399  14    9     1  2.913982117 -0.2759451684 1  3.110890711 #> 400  14   10     1  1.168392460  0.3204023143 0  0.973104533 #> 401  14   11     1  2.520431916  0.1781901884 1  2.170241162 #> 402  14   12     1  4.233154579 -0.5502237415 1  4.453769005 #> 403  14   13     1  7.011836223 -1.5293105312 1  6.712950111 #> 404  14   14     1  6.055667783 -1.6177737654 0  6.145593274 #> 405  14   15     1  3.925959634  0.7898179218 1  4.232926926 #> 406  14   16     1  2.802762910  0.9035164264 1  2.572192862 #> 407  14   17     1  2.841323265  0.3650187514 1  3.194480550 #> 408  14   18     1  3.140078927 -1.1014834389 0  3.199120265 #> 409  14   19     1  0.363314670  0.8983962407 0  0.286807054 #> 410  14   20     1  1.167473989 -0.5824016746 0  1.332989954 #> 411  14   21     1  0.948761120 -0.1907034326 0  1.126239265 #> 412  14   22     1  0.279080782  0.1667812884 0  0.417321336 #> 413  14   23     1  2.895357772 -0.6375687651 1  3.323694884 #> 414  14   24     1  3.044421066 -0.2798823971 1  3.376918940 #> 415  14   25     1 -0.912275580  3.3903708213 1 -0.849651674 #> 416  14   26     1  1.110535899 -1.4202194917 0  1.265949757 #> 417  14   27     1 -0.344049485  0.6687513994 0 -0.046682017 #> 418  14   28     1  0.092024938 -0.1446110701 0 -0.101025883 #> 419  14   29     1  2.349330169 -0.3159369312 1  2.342796362 #> 420  14   30     1  0.980539754 -0.6196150527 0  0.980781509 #> 421  15    1     1           NA  1.8438620052 0  0.301846721 #> 422  15    2     1  0.092225224 -0.7413360963 0  0.495252865 #> 423  15    3     1  0.351665062 -0.3636572971 0  0.081746629 #> 424  15    4     1  1.291823722  0.8496430456 1  1.067041408 #> 425  15    5     1  2.724373298 -0.5229123763 1  2.712106652 #> 426  15    6     1  2.049732821  0.5101325469 1  2.243000103 #> 427  15    7     1  1.454671583 -0.7184662213 0  1.438761680 #> 428  15    8     1  0.851552052 -0.2140412400 0  0.674679057 #> 429  15    9     1 -0.528203679  1.1146485454 0 -0.547628510 #> 430  15   10     1  2.467422361 -0.4447819783 1  2.742100485 #> 431  15   11     1  4.506267553 -0.8752554775 1  4.499200885 #> 432  15   12     1  2.542137526  0.0912673835 0  2.775975748 #> 433  15   13     1  3.800869690  0.0016836885 1  4.103435953 #> 434  15   14     1  1.956552155  0.2796278624 0  1.630500930 #> 435  15   15     1  3.382118617 -0.2677064216 1  3.589473495 #> 436  15   16     1  1.641061012  1.4837794887 1  1.791492550 #> 437  15   17     1  2.014355655  0.6651598757 1  1.941862547 #> 438  15   18     1  1.628483428  0.9860582211 1  1.804358312 #> 439  15   19     1  5.112146918 -1.6484948184 1  5.111800381 #> 440  15   20     1  3.624644308  0.3428883929 1  3.508261291 #> 441  15   21     1  3.975127847 -0.5246711995 1  3.904585504 #> 442  15   22     1  3.267033127 -0.1000139589 1  3.362658354 #> 443  15   23     1  3.222940436 -0.3906352515 1  2.975793986 #> 444  15   24     1  2.685290541 -0.1090375092 1  2.571090473 #> 445  15   25     1  2.243251432  0.2074804074 1  2.791354140 #> 446  15   26     1  3.273391621 -0.9388959197 1  3.524172544 #> 447  15   27     1  2.789163949 -0.5941776416 1  3.144103270 #> 448  15   28     1  1.252482342 -1.7981325564 0  1.403434919 #> 449  15   29     1  0.083387428 -0.0081521523 0  0.220362779 #> 450  15   30     1  2.978331413 -1.5849912682 1  2.852695037 #> 451  16    1     1           NA -0.6519499017 1  0.487329123 #> 452  16    2     1  2.477941372 -1.0959962671 1  2.357684577 #> 453  16    3     1  2.623415513  0.0597499374 1  2.646066711 #> 454  16    4     1  3.143298133 -0.4465572164 1  2.999906565 #> 455  16    5     1  2.249765600  0.6837455219 1  2.376575775 #> 456  16    6     1  3.503189867 -0.5894810385 1  3.598665235 #> 457  16    7     1  3.757279215 -0.4503386239 1  4.047490557 #> 458  16    8     1  3.404035544  0.1516805045 1  3.552219136 #> 459  16    9     1  3.128094030  0.5500439612 1  3.337472839 #> 460  16   10     1  2.442969509  1.3700039940 1  2.901271922 #> 461  16   11     1  0.831117169  0.9411658067 0  0.893628678 #> 462  16   12     1  5.762955440 -1.9617075989 1  5.642701283 #> 463  16   13     1  3.311635419  0.2502478213 0  3.339448062 #> 464  16   14     1  1.567467039  1.8778640211 1  1.521178197 #> 465  16   15     1  2.171498871 -0.5918921022 0  2.375538626 #> 466  16   16     1 -1.136723050  1.9507210064 0 -1.095355089 #> 467  16   17     1 -1.721134594  1.3178208837 0 -1.853402656 #> 468  16   18     1  1.353808044 -1.0984900071 0  1.282890679 #> 469  16   19     1  2.738652918  0.2285569733 1  2.716720231 #> 470  16   20     1  4.131802769 -0.4509346471 1  4.217960493 #> 471  16   21     1 -0.257761137  3.1840444741 1 -0.392473088 #> 472  16   22     1  1.336110148  0.7685074319 1  1.344661764 #> 473  16   23     1  1.544769158  0.8567854738 1  1.463797299 #> 474  16   24     1  2.285805112  0.2293954957 1  1.806331832 #> 475  16   25     1 -0.236293644  0.8498066475 0 -0.014859892 #> 476  16   26     1  1.655977575  0.6289649925 1  1.565840376 #> 477  16   27     1  1.264050011  1.5804318370 1  1.405650328 #> 478  16   28     1  3.389373938 -1.6885424746 1  3.335212109 #> 479  16   29     1  0.250549594  0.2074951407 0 -0.007513032 #> 480  16   30     1  0.732707837  0.8196281375 0  0.764720098 #> 481  17    1     1           NA  0.2353865723 0  0.838735792 #> 482  17    2     1  0.222667333  0.0377883992 0  0.191608243 #> 483  17    3     1  2.774326872 -0.7045964637 1  2.836624491 #> 484  17    4     1  0.555174403  0.1748027002 0  0.653172813 #> 485  17    5     1  0.478657166 -0.0608219547 0  0.306873124 #> 486  17    6     1  1.472527569 -0.9967807422 0  1.705717923 #> 487  17    7     1 -1.871770059  2.3974524800 0 -2.193663792 #> 488  17    8     1  0.236093932  1.7123049773 1  0.121438359 #> 489  17    9     1  1.380369212  1.2366758001 1  1.596277213 #> 490  17   10     1  0.392315602  0.6732538634 0  0.180485342 #> 491  17   11     1  0.327616922  0.1705880818 0  0.353068387 #> 492  17   12     1  4.187843873 -1.1198997214 1  3.984045736 #> 493  17   13     1  3.814926957  0.5638673903 1  3.722570306 #> 494  17   14     1  4.369368009 -0.0040606534 1  4.025459778 #> 495  17   15     1  4.770480362 -0.3683525751 1  4.721923734 #> 496  17   16     1  3.289227112  0.7976006576 1  3.231237734 #> 497  17   17     1  3.905204473 -0.0954875904 1  3.857280417 #> 498  17   18     1  5.092991192 -0.7995139536 1  5.463013161 #> 499  17   19     1  2.349668970  1.6535472347 1  2.514261858 #> 500  17   20     1  2.648386757  0.5142301202 1  2.888844778 #> 501  17   21     1  3.371781442 -0.0500372679 1  3.463829304 #> 502  17   22     1  3.963441807 -0.5758595679 1  3.676885378 #> 503  17   23     1  4.391889429 -1.1037521360 1  4.640561008 #> 504  17   24     1  3.096767875  0.0488888907 1  3.102241922 #> 505  17   25     1  1.484678569  1.2245603121 1  1.294413427 #> 506  17   26     1  3.487064407 -1.2621945494 1  3.525196361 #> 507  17   27     1  2.568165958 -0.0039889443 1  2.516307109 #> 508  17   28     1  1.570376664  1.1025651994 1  1.379699687 #> 509  17   29     1 -0.596085431  1.5324236216 0 -0.575068235 #> 510  17   30     1  0.720806025  0.1923696467 0  0.978592497 #> 511  18    1     1           NA  0.0779608496 1  2.071741513 #> 512  18    2     1  1.922727560  0.3104807494 1  1.857768347 #> 513  18    3     1  2.757110347 -0.7172181616 1  2.728081877 #> 514  18    4     1  2.267725689  0.0745511772 1  2.138159274 #> 515  18    5     1 -0.256403934  0.6329607130 0  0.089484971 #> 516  18    6     1 -0.092604504  0.1444757047 0 -0.102025046 #> 517  18    7     1  2.022244428  0.0111291872 1  2.008031701 #> 518  18    8     1  0.991093062 -0.3261438925 0  0.976781721 #> 519  18    9     1  2.334627798  0.1390978572 1  2.489165776 #> 520  18   10     1  1.001814273  0.0721667524 0  0.985810670 #> 521  18   11     1  3.799209610 -1.0634979064 1  3.961389858 #> 522  18   12     1  6.062559008 -1.3277554756 1  6.212309452 #> 523  18   13     1  5.210208465  0.1894262375 1  5.260302609 #> 524  18   14     1  5.184849765 -0.2784540250 1  4.837006811 #> 525  18   15     1  6.883730358 -1.8526168242 1  6.980944689 #> 526  18   16     1  2.426876196  1.8432662546 1  2.432770913 #> 527  18   17     1  0.874835915  0.1962780455 0  1.045285564 #> 528  18   18     1  2.412333999  0.0798738187 1  2.431079292 #> 529  18   19     1  1.148704013  1.4152763499 1  1.137069591 #> 530  18   20     1  2.937657661 -0.3343380522 1  2.921649866 #> 531  18   21     1  3.573669658 -0.4437493119 1  3.720244429 #> 532  18   22     1  2.995913445 -0.0100976720 1  3.137863821 #> 533  18   23     1  1.146607233  1.1612892557 1  1.044611601 #> 534  18   24     1  0.894065142  0.9432244684 1  0.549582742 #> 535  18   25     1  2.656974501 -0.7018044335 1  2.493005577 #> 536  18   26     1  2.758576857 -0.5518704133 1  2.322867854 #> 537  18   27     1  1.454110152  0.8478427689 1  1.430312510 #> 538  18   28     1  2.237851398 -0.5766189242 1  2.290170663 #> 539  18   29     1  2.700059304 -1.3579978310 1  2.710422679 #> 540  18   30     1  0.609400283  0.2071719742 0  0.686783445 #> 541  19    1     1           NA -0.9618566341 1  0.775618842 #> 542  19    2     1  0.068022317  0.4365234789 0 -0.135926899 #> 543  19    3     1 -0.717170537  0.8846504990 0 -0.678071348 #> 544  19    4     1  1.645091433  0.4281667650 1  1.786451002 #> 545  19    5     1  1.237515848  1.3355176151 1  1.448957290 #> 546  19    6     1  0.545658394 -0.0143074132 0  0.856978333 #> 547  19    7     1  0.671584066  1.6335684214 1  0.728988578 #> 548  19    8     1  2.185809362  0.3730046558 1  2.148104617 #> 549  19    9     1  2.643017818  0.4102750965 1  2.720378428 #> 550  19   10     1  2.895167814 -1.5077573175 0  2.998676399 #> 551  19   11     1  3.388753668 -1.3880490476 0  3.403829026 #> 552  19   12     1  3.384873110 -0.8536236967 0  3.068515873 #> 553  19   13     1  3.197594441 -0.7328538063 0  3.437243572 #> 554  19   14     1  3.446404437  0.4749117140 1  3.559906566 #> 555  19   15     1  5.607635646 -1.1696152604 1  5.864572177 #> 556  19   16     1  3.041715082  1.2464239087 1  3.030252780 #> 557  19   17     1 -1.921994948  2.4879978772 0 -1.562994549 #> 558  19   18     1  0.176592169 -0.3227463618 0  0.289248540 #> 559  19   19     1  1.867651643  0.4199516038 1  1.752528650 #> 560  19   20     1  3.097647541 -0.1055599088 1  3.337717122 #> 561  19   21     1  2.977396098  0.2998652501 1  3.237240592 #> 562  19   22     1  5.342572059 -1.7786591487 1  4.768469828 #> 563  19   23     1  2.715006578  0.3983627156 1  2.830445800 #> 564  19   24     1  2.779122766 -0.1093171232 1  2.662006792 #> 565  19   25     1  1.023857586 -0.3511962296 0  1.168046018 #> 566  19   26     1  3.304719077 -1.1827995068 1  3.402614460 #> 567  19   27     1  0.569552300 -0.1001165259 0  0.665776861 #> 568  19   28     1  3.224586393 -1.8516917296 1  3.256093902 #> 569  19   29     1  2.234126972 -0.1996190506 1  2.274342063 #> 570  19   30     1  2.844988622 -0.0433473543 1  3.005001569 #> 571  20    1     1           NA -0.0713080861 1 -1.427111353 #> 572  20    2     1  2.089852154 -0.4583653327 1  2.078818744 #> 573  20    3     1  3.374135816 -1.0155925786 1  3.540753332 #> 574  20    4     1  2.762154666  0.0246749828 1  2.425098742 #> 575  20    5     1  2.653456048  0.0072900903 1  2.526145178 #> 576  20    6     1  2.698100936 -1.7902812373 0  2.584246143 #> 577  20    7     1  4.496616740 -1.4385066449 1  4.694977468 #> 578  20    8     1  3.802909699 -0.2276840649 1  3.502254970 #> 579  20    9     1  4.021353167 -0.5584569123 1  3.741714412 #> 580  20   10     1  3.795831239  0.0261002253 1  4.207689549 #> 581  20   11     1  1.928569847  2.0867174345 1  1.392179171 #> 582  20   12     1  4.152344238 -0.6933045279 1  3.839355500 #> 583  20   13     1  3.115776954  0.9863658599 1  3.364322556 #> 584  20   14     1  4.600481582 -0.2790721708 1  4.593655939 #> 585  20   15     1  4.555254332 -1.4420346464 0  4.606931184 #> 586  20   16     1  4.552373825 -0.1318749118 1  4.425437545 #> 587  20   17     1  3.641984987  0.4310989281 1  4.043984795 #> 588  20   18     1  3.858412656  0.1464171787 1  4.011484064 #> 589  20   19     1  1.057187130  0.7212208071 0  0.687971627 #> 590  20   20     1  1.646348634 -0.7305096728 0  1.520897801 #> 591  20   21     1  4.897803381 -1.5684246208 1  5.021885784 #> 592  20   22     1  4.645587756 -0.7776214429 1  4.661008193 #> 593  20   23     1  2.818891105  0.3623521576 1  3.145323555 #> 594  20   24     1  2.891336600 -0.0703769216 1  2.918932641 #> 595  20   25     1  2.643187269 -1.7271210366 0  2.895925331 #> 596  20   26     1  2.095169321  0.6206635577 1  1.798757799 #> 597  20   27     1  0.562721710 -0.2796299070 0  0.423089873 #> 598  20   28     1  0.236188979 -0.1128632394 0  0.074750868 #> 599  20   29     1 -0.036579187  0.6315231278 0 -0.045826471 #> 600  20   30     1  2.899698949 -0.5101604414 1  2.575135379 #> 601  21    1     1           NA  1.4445508584 1 -1.033511335 #> 602  21    2     1  2.014179784 -1.0633261340 1  1.839926355 #> 603  21    3     1  0.545400642  1.9552939655 1  0.697085271 #> 604  21    4     1  3.501001860 -1.6674750976 1  3.464059881 #> 605  21    5     1  1.672250207  1.0175586370 1  1.900393453 #> 606  21    6     1  2.420778409  0.0345510671 1  2.391162601 #> 607  21    7     1  2.880240326 -0.1905168020 1  2.834442444 #> 608  21    8     1  2.914975641  0.0204507085 1  3.281776717 #> 609  21    9     1  2.660767513  0.6053706689 1  2.613047265 #> 610  21   10     1  3.516618899 -0.3164158682 1  3.064417782 #> 611  21   11     1  2.468865739 -0.6785031454 0  2.280400552 #> 612  21   12     1  2.944486644  0.3823051425 1  3.108845356 #> 613  21   13     1  1.421788142  1.7386337669 1  1.161799968 #> 614  21   14     1 -0.218497061  0.8134003741 0 -0.412397737 #> 615  21   15     1 -1.312003276  1.0543222720 0 -1.092725731 #> 616  21   16     1  1.138203015  0.4770372383 1  1.038553694 #> 617  21   17     1  2.395372528  0.1887531093 1  2.668876836 #> 618  21   18     1  0.106516109  2.3050619820 1  0.228653878 #> 619  21   19     1  1.925769889 -1.1969352122 0  1.601446992 #> 620  21   20     1  0.271282127  1.9050435849 1  0.267503222 #> 621  21   21     1  1.617942469  0.4903026427 1  1.739358429 #> 622  21   22     1  2.397578925  0.1250338837 1  2.719464033 #> 623  21   23     1  3.647036877 -0.8525256703 1  3.308128541 #> 624  21   24     1  1.246545970 -0.4843190876 0  1.614715702 #> 625  21   25     1  3.049681496 -0.7365782323 1  2.822076034 #> 626  21   26     1  2.035124163  0.4463130166 1  2.277056586 #> 627  21   27     1  1.609854548  0.7844382453 1  1.626236349 #> 628  21   28     1  1.173551650  1.3210692672 1  0.972270670 #> 629  21   29     1  1.044969469  1.7620209034 1  0.982384827 #> 630  21   30     1  2.842415015 -0.8234186138 1  2.823185238 #> 631  22    1     1           NA  0.4515040531 1 -1.589455114 #> 632  22    2     1  1.693311929  1.2631851761 1  2.169889755 #> 633  22    3     1  0.510805165 -0.0903195940 0  0.364448913 #> 634  22    4     1  1.536862354  0.7364959648 1  1.518702329 #> 635  22    5     1  1.549118385 -1.1884340351 0  1.543213354 #> 636  22    6     1  2.288931944  0.1902303157 1  2.330951514 #> 637  22    7     1  0.370682646  0.3784239036 0  0.214545310 #> 638  22    8     1  2.102572853  0.3140576635 1  2.336179797 #> 639  22    9     1  3.535502891 -0.5063335422 1  3.613208396 #> 640  22   10     1  3.768028542 -0.1023465135 1  3.669688308 #> 641  22   11     1  6.194525249 -1.8555716539 1  6.243507144 #> 642  22   12     1  4.314325405  0.9821130025 1  3.997678131 #> 643  22   13     1  3.245206501  0.8811788089 1  3.968787218 #> 644  22   14     1  3.048291991  0.9044354644 1  2.849453739 #> 645  22   15     1  4.475029452 -0.5973300914 1  4.664853728 #> 646  22   16     1  5.653059466 -0.9719942115 1  5.832991891 #> 647  22   17     1  6.645810682 -1.3422431253 1  6.717373992 #> 648  22   18     1  6.597304838 -1.1246036713 1  6.751046025 #> 649  22   19     1  4.564386028  0.3001315669 1  4.200470556 #> 650  22   20     1  3.404367658  0.3326217315 1  3.170713453 #> 651  22   21     1  1.447762456 -0.0961632011 0  1.228321206 #> 652  22   22     1  3.408235211 -0.7063214924 1  3.659235998 #> 653  22   23     1 -1.461480601  1.9536678799 0 -1.615113922 #> 654  22   24     1 -0.202588653 -0.1383363285 0 -0.324142940 #> 655  22   25     1  1.250152723  0.6224097829 1  1.062395747 #> 656  22   26     1  1.809322634  0.4218846933 1  2.077425782 #> 657  22   27     1  3.419506252 -1.5846166446 1  3.267022396 #> 658  22   28     1  1.785044283  0.6622542969 1  1.684616706 #> 659  22   29     1  1.893957180  0.4260143626 1  1.723119524 #> 660  22   30     1  2.558380036  0.8518564033 1  2.627716754 #> 661  23    1     1           NA  0.0412329220 0 -2.848546770 #> 662  23    2     1  1.763997997 -0.3496503880 1  1.752247321 #> 663  23    3     1  0.084175376  0.2145388266 0  0.030778331 #> 664  23    4     1  1.685580953  0.3860265683 1  1.569217149 #> 665  23    5     1  3.001494694 -0.7216044404 1  3.155400971 #> 666  23    6     1  2.497471707  0.1747263970 1  2.334110005 #> 667  23    7     1  2.335349182  0.3000385452 1  2.286853436 #> 668  23    8     1  1.471357525  1.3282146960 1  1.609885731 #> 669  23    9     1  2.136313029 -1.4205655047 0  2.292098354 #> 670  23   10     1  4.266672518 -1.1815592271 1  4.042707627 #> 671  23   11     1  1.511125197  0.5332593628 0  1.626751603 #> 672  23   12     1  4.126365209 -0.7273835291 1  3.907422263 #> 673  23   13     1  5.309533717 -1.9436509013 0  5.690122802 #> 674  23   14     1  5.100447460  0.0026916612 1  5.064607780 #> 675  23   15     1  3.397591292  0.7894598528 1  3.521373659 #> 676  23   16     1  3.982856418 -0.1852021694 1  3.822115703 #> 677  23   17     1  1.843422233  0.0028560476 0  2.239998415 #> 678  23   18     1  3.553857157 -0.3054696399 1  3.494428782 #> 679  23   19     1  4.867132011 -0.9544489352 1  4.772802607 #> 680  23   20     1  3.662620937  0.2306336405 1  3.755576775 #> 681  23   21     1  2.782479900  0.4685251225 1  2.858249268 #> 682  23   22     1  2.924524825 -0.0435694858 1  2.429124269 #> 683  23   23     1  2.734068013 -0.1642708321 1  2.516964763 #> 684  23   24     1  2.547521640 -0.0687656423 1  2.744999957 #> 685  23   25     1  0.866194098 -0.2907159892 0  1.172511965 #> 686  23   26     1  1.723658225  0.4424647721 1  1.322015459 #> 687  23   27     1  1.708050549  0.4783661478 1  1.596271245 #> 688  23   28     1 -0.235450437  0.4413831984 0 -0.235353355 #> 689  23   29     1  2.115967672 -0.0137534165 1  1.903526389 #> 690  23   30     1  3.061976329 -1.4261846729 1  2.818656165 #> 691  24    1     1           NA -0.4224968323 0  1.290733928 #> 692  24    2     1  2.205492154 -0.8655128627 1  2.288057725 #> 693  24    3     1  3.006782899 -0.7385277047 1  2.728620081 #> 694  24    4     1  2.707396174 -0.2656516253 1  2.309790411 #> 695  24    5     1  1.069821659  1.5192177114 1  1.154582069 #> 696  24    6     1  1.518200734 -1.0550170426 0  1.497020300 #> 697  24    7     1  3.630457425 -1.0056362595 1  3.515922684 #> 698  24    8     1  3.012191611  0.1213183775 1  3.038357804 #> 699  24    9     1  3.081780718  0.1279929657 1  3.003768684 #> 700  24   10     1  2.889236743  0.4986580438 1  2.845931149 #> 701  24   11     1  3.213204106  0.3102302561 1  3.398532306 #> 702  24   12     1  3.500745528 -0.9968389824 0  3.456560799 #> 703  24   13     1  2.143662517  1.3995761854 1  2.097335116 #> 704  24   14     1  5.147012605 -1.1766921577 1  4.761824719 #> 705  24   15     1  2.280728826  1.5164906017 1  2.507725624 #> 706  24   16     1 -0.351439418  1.2209637083 0 -0.464594392 #> 707  24   17     1  2.405180764 -0.2213261532 1  2.491027635 #> 708  24   18     1  3.982357544 -0.5167594497 1  4.025599212 #> 709  24   19     1  4.446156565 -0.4580180681 1  4.285798855 #> 710  24   20     1  4.085627489 -1.6918624149 0  4.434420533 #> 711  24   21     1  4.918228184 -0.9823706359 1  4.909855924 #> 712  24   22     1  4.058752692 -0.4679259739 1  4.262650618 #> 713  24   23     1  5.259736144 -1.8248975842 1  5.456776809 #> 714  24   24     1  5.903094415 -2.3137357739 1  5.733950647 #> 715  24   25     1  1.491110813 -0.2142115342 0  1.798772857 #> 716  24   26     1  1.775706683  0.5572457464 1  1.988073597 #> 717  24   27     1  1.897357899  0.3935663730 1  1.767085810 #> 718  24   28     1 -0.657272476  1.1837459123 0 -0.904679485 #> 719  24   29     1  2.339493574 -0.3075569096 1  2.496395032 #> 720  24   30     1  2.658421488  0.4402989420 1  2.655353903 #> 721  25    1     1           NA -2.0532472215 0 -0.493723874 #> 722  25    2     1  1.982368486 -0.2362795689 1  1.972207329 #> 723  25    3     1  2.826556446 -0.5743886898 1  2.683492245 #> 724  25    4     1  2.397679866  0.1181445110 1  2.424548819 #> 725  25    5     1  2.164696218  0.3773879730 1  2.246276361 #> 726  25    6     1  2.071778548  0.4761332783 1  2.314355110 #> 727  25    7     1  0.725305252  0.0192592746 0  0.935924813 #> 728  25    8     1  1.830428910  0.7128423200 1  1.994553941 #> 729  25    9     1  1.094975799  1.9458512177 1  0.955075416 #> 730  25   10     1  3.682002939 -1.0389564403 1  3.627609079 #> 731  25   11     1  5.549150136 -1.3538343357 1  5.562391321 #> 732  25   12     1  6.691193696 -1.0416888590 1  6.681169923 #> 733  25   13     1  5.990514300 -0.0560559462 1  6.019693915 #> 734  25   14     1  7.242425705 -1.3182207275 1  7.407475906 #> 735  25   15     1  5.837424515 -0.1917748091 1  5.894224875 #> 736  25   16     1  3.988717552  0.5412841435 1  3.833058431 #> 737  25   17     1  1.919335536 -0.0110458298 0  1.855671286 #> 738  25   18     1  0.931699751  1.5123954268 1  0.992149868 #> 739  25   19     1  1.395190996  0.9356036838 1  1.215189372 #> 740  25   20     1  1.828867856  0.6597918995 1  2.172369343 #> 741  25   21     1  2.289712638 -1.0229838421 0  2.267650415 #> 742  25   22     1  1.988538747  0.6069301362 1  1.943605073 #> 743  25   23     1  2.717437214 -0.2038564714 1  2.542782506 #> 744  25   24     1  4.130810891 -1.3648316972 1  4.517056230 #> 745  25   25     1  3.092016058 -0.1125595515 1  3.098932042 #> 746  25   26     1  1.972569071  0.6393564920 1  1.866720611 #> 747  25   27     1  2.203739353 -2.6953293691 0  2.404285404 #> 748  25   28     1  2.594798370 -0.7715014411 1  2.648557046 #> 749  25   29     1  1.835887256  0.4143081641 1  1.396355236 #> 750  25   30     1  2.919390498 -0.7926116508 1  3.237294967 #> 751  26    1     1           NA  1.1313372134 0  0.394970678 #> 752  26    2     1  1.956771133 -0.1971758943 1  2.328691773 #> 753  26    3     1  1.479243954 -1.3170161323 0  1.863774569 #> 754  26    4     1  0.193890206  0.1340386454 0  0.222564336 #> 755  26    5     1  3.991699526 -2.0522228204 1  3.927624317 #> 756  26    6     1 -0.646073242  1.3785701370 0 -0.387357308 #> 757  26    7     1  1.278152849 -1.0774206531 0  0.886974749 #> 758  26    8     1 -0.303186328  0.7788600298 0 -0.205542322 #> 759  26    9     1 -0.502965612  0.8009143396 0 -0.026344046 #> 760  26   10     1  2.420296483 -0.2262219814 1  2.249833490 #> 761  26   11     1  3.540579355 -1.9429564136 0  3.541122353 #> 762  26   12     1  2.706632706 -0.4145887264 0  2.326316097 #> 763  26   13     1  0.806302260  0.5249142793 0  0.605709146 #> 764  26   14     1  3.509969397 -0.5929973657 1  3.508110587 #> 765  26   15     1  3.397129436  0.2838789064 1  3.669138763 #> 766  26   16     1  3.099833348  0.4573573316 1  2.957322624 #> 767  26   17     1  4.243840794 -0.5754176413 1  4.308346790 #> 768  26   18     1  4.999877413 -0.7694849229 1  4.775235103 #> 769  26   19     1  3.614955836 -1.1368931117 0  3.989694594 #> 770  26   20     1  4.989206851 -1.0236235889 1  4.810012868 #> 771  26   21     1  4.593633321 -0.6934146633 1  4.829779633 #> 772  26   22     1  1.887867636  1.1684883087 1  2.009580953 #> 773  26   23     1  4.780377266 -1.9344440707 1  4.862253692 #> 774  26   24     1  3.055911234 -0.0724869100 1  3.048628984 #> 775  26   25     1  4.550786836 -1.8636669825 1  4.230837194 #> 776  26   26     1  4.463665730 -1.9686615567 1  4.382825491 #> 777  26   27     1  2.179235799  0.3683773285 1  2.214127125 #> 778  26   28     1  1.550776407  0.7296891914 1  1.855691607 #> 779  26   29     1  1.436498734  0.9890579202 1  1.355149532 #> 780  26   30     1  2.553688215  0.2823102145 1  2.325596505 #> 781  27    1     1           NA -1.4606400709 0  1.181617853 #> 782  27    2     1  0.062780147  1.1099202897 0  0.166619837 #> 783  27    3     1  2.301042353 -0.1829253884 1  2.630112311 #> 784  27    4     1  2.433649966  0.2210194686 1  2.453704199 #> 785  27    5     1  3.915606613 -1.3640374521 1  3.717866245 #> 786  27    6     1  0.513245676  0.4562364032 0  0.744338903 #> 787  27    7     1  1.731541253  0.7127033252 1  1.643316516 #> 788  27    8     1  1.921608399  0.9147732709 1  2.264268032 #> 789  27    9     1  2.035989374  1.1652533899 1  2.150408103 #> 790  27   10     1  2.838947775  0.3814258295 1  3.215109686 #> 791  27   11     1  4.034639512 -0.1163025172 1  4.046031707 #> 792  27   12     1  4.919119731 -0.2390290682 1  5.059313685 #> 793  27   13     1  4.274852607  0.6220332359 1  4.315941736 #> 794  27   14     1  3.464120040  0.7973805005 1  3.229275631 #> 795  27   15     1  4.384895254 -1.7510675194 0  4.300545102 #> 796  27   16     1  3.723319457 -1.0381310397 0  3.728188422 #> 797  27   17     1  4.939024664 -0.6868156524 1  4.676878493 #> 798  27   18     1  4.417483819 -0.0820869038 1  4.368678078 #> 799  27   19     1  3.758957800  0.2669182509 1  4.135424989 #> 800  27   20     1  3.122368207 -0.8915215744 0  3.278090164 #> 801  27   21     1  2.447602217 -0.7679895731 0  2.520318962 #> 802  27   22     1  4.003021653 -0.8225014128 1  3.560276081 #> 803  27   23     1  3.369373314 -0.3105101158 1  3.297006722 #> 804  27   24     1  3.141101965 -0.2652837749 1  3.006166813 #> 805  27   25     1  1.862894659  0.8376299342 1  1.717286038 #> 806  27   26     1  0.580605580 -0.1488163614 0  0.756732447 #> 807  27   27     1  3.757866106 -2.1684177473 1  3.674816865 #> 808  27   28     1  2.688913244 -0.5870856158 1  2.821315186 #> 809  27   29     1  0.341902581 -0.1838583105 0  0.392670333 #> 810  27   30     1  2.971996857 -0.7406905222 1  3.047715983 #> 811  28    1     1           NA  0.7399475109 1 -0.511832695 #> 812  28    2     1  1.997129178  0.0847372922 1  1.948308650 #> 813  28    3     1  0.059763876  0.4189824049 0 -0.056381200 #> 814  28    4     1  0.744065414  1.6408461660 1  0.631243908 #> 815  28    5     1  2.493211989 -0.2007810156 1  2.193350462 #> 816  28    6     1  3.835874599 -1.1355884704 1  3.865102067 #> 817  28    7     1 -0.055229186  1.0847750899 0 -0.353033224 #> 818  28    8     1  0.933121831 -0.5743945522 0  1.134002163 #> 819  28    9     1  2.413346360  0.3588557231 1  2.249697583 #> 820  28   10     1  2.007173675 -0.7835157890 0  2.037355664 #> 821  28   11     1  1.947355970  1.1393962917 1  1.944446168 #> 822  28   12     1  0.787238177  0.4836175338 0  0.550520573 #> 823  28   13     1  2.919638117 -0.0966860732 1  2.992064284 #> 824  28   14     1  6.802785860 -1.9582051747 1  6.597224703 #> 825  28   15     1  4.468245624 -0.8186697775 0  4.684353192 #> 826  28   16     1  5.173328096 -0.6045132303 1  5.164484542 #> 827  28   17     1  5.513866023 -0.7207736318 1  5.119595773 #> 828  28   18     1  1.364485486  0.7871336143 0  1.219254080 #> 829  28   19     1  2.232380978  0.4283320395 1  2.810342695 #> 830  28   20     1  0.180547037  0.9183411710 0  0.018980898 #> 831  28   21     1  0.614058089  1.2990499667 1  0.594912616 #> 832  28   22     1  2.758509564 -0.3070365586 1  2.774142724 #> 833  28   23     1  3.254762795 -0.4222270032 1  3.255420001 #> 834  28   24     1  2.203611253 -1.2008693282 0  2.299501428 #> 835  28   25     1  4.087991982 -1.4434928889 1  4.343949626 #> 836  28   26     1  2.759506175  0.1124638126 1  2.896172065 #> 837  28   27     1  1.913761061  0.6598043769 1  1.656336311 #> 838  28   28     1  2.130491071  0.0007641864 1  2.022090205 #> 839  28   29     1  0.100522028  0.1637614068 0 -0.171835105 #> 840  28   30     1  2.817229174 -0.5233416827 1  2.587321687 #> 841  29    1     1           NA  1.9091035692 1 -0.134967649 #> 842  29    2     1  1.880917446  0.7540537852 1  1.542097396 #> 843  29    3     1  0.032383565  0.3243043442 0 -0.255160874 #> 844  29    4     1  2.223363309 -0.2190503789 1  2.330109561 #> 845  29    5     1  1.725848525  0.8657794043 1  1.541033414 #> 846  29    6     1  2.942835667 -0.4356454697 1  2.991987081 #> 847  29    7     1  5.330406180 -2.2249876965 1  5.060665189 #> 848  29    8     1  1.896133760  1.6268812142 1  1.734716060 #> 849  29    9     1  3.454136907 -0.6085571783 1  3.549257547 #> 850  29   10     1  3.053371119  0.5829914057 1  3.447564928 #> 851  29   11     1  1.192465935  0.6361240352 0  1.390822100 #> 852  29   12     1  1.559007344 -0.3213248422 0  1.413953137 #> 853  29   13     1  3.299787101 -0.0752631976 1  3.173296245 #> 854  29   14     1  4.779005861 -1.8863251587 0  4.791948406 #> 855  29   15     1  4.388903991  0.0562148494 1  4.071681318 #> 856  29   16     1  5.107645897 -0.7646060138 1  4.976238885 #> 857  29   17     1  4.674317084 -0.2145045154 1  4.930982124 #> 858  29   18     1  5.771401837 -1.0585905359 1  5.825409140 #> 859  29   19     1  4.518255434  0.0549119698 1  4.585682912 #> 860  29   20     1  4.575056625 -0.4527006465 1  4.638737044 #> 861  29   21     1 -0.258049924  1.5791455618 0 -0.353685999 #> 862  29   22     1  0.242425210  1.4397612584 1  0.009730542 #> 863  29   23     1  1.186809488  0.6818296904 1  1.223436608 #> 864  29   24     1  2.626461165 -1.9915381760 0  2.403580910 #> 865  29   25     1  2.747871394 -0.2085701624 1  3.076412482 #> 866  29   26     1  1.919832122  0.7246762026 1  1.684265838 #> 867  29   27     1  0.558492569 -0.4539137334 0  0.516022025 #> 868  29   28     1  0.629941052  2.2144653193 1  0.565471688 #> 869  29   29     1  2.039450326  0.2169363441 1  1.979448586 #> 870  29   30     1  2.333003641  1.7693659170 1  2.375152709 #> 871  30    1     1           NA -1.4438931610 0  0.350256180 #> 872  30    2     1  0.308574092 -0.4992920172 0  0.101164906 #> 873  30    3     1  2.863755873 -0.7815364871 1  2.639033037 #> 874  30    4     1  2.532856381  0.1680653839 1  2.729897074 #> 875  30    5     1  2.840458585 -0.1018832557 1  2.986038287 #> 876  30    6     1  2.522295118  0.3461036196 1  2.575374668 #> 877  30    7     1 -0.374003689  1.2356934623 0 -0.407634197 #> 878  30    8     1  2.807640884 -0.3809567393 1  2.819425320 #> 879  30    9     1  1.566384991 -0.2022408551 0  1.523513479 #> 880  30   10     1  4.352780873 -1.3165104017 1  4.525451388 #> 881  30   11     1  5.143033590 -0.4929374242 1  5.054046684 #> 882  30   12     1  8.027585083 -2.0784892689 1  8.056385538 #> 883  30   13     1  3.340004459  1.0191570693 0  3.474502479 #> 884  30   14     1  5.240308111 -0.6537798248 1  5.190767282 #> 885  30   15     1  4.375687223  0.2990869033 1  4.532267589 #> 886  30   16     1  3.816798164  0.3952958700 1  3.813537991 #> 887  30   17     1  0.124204143  1.3681326480 0  0.012395472 #> 888  30   18     1  0.168593138  1.6551758157 1  0.274649495 #> 889  30   19     1  0.107220356  1.8221888218 1  0.124594295 #> 890  30   20     1  4.785329161 -1.7483722800 1  4.884735753 #> 891  30   21     1  2.228842425 -0.1568919530 0  2.344152065 #> 892  30   22     1  5.755846350 -2.1989232542 1  5.764130141 #> 893  30   23     1  2.324886645  1.0094961857 1  2.450743560 #> 894  30   24     1  3.104132602 -0.3543692199 1  3.119743190 #> 895  30   25     1  3.311187892 -0.4385634621 1  3.293552022 #> 896  30   26     1  3.847470714 -1.1874860760 1  3.902174195 #> 897  30   27     1  3.167393869 -0.6949368252 1  3.042991243 #> 898  30   28     1  1.725254543  0.9694343957 1  1.665469149 #> 899  30   29     1 -0.100424383  0.7292776342 0  0.023791802 #> 900  30   30     1  2.642774706  0.6682826189 1  2.474355151 #> 901  31    1     1           NA  0.7017843354 1  0.225879222 #> 902  31    2     1  2.072319056  0.2144453096 1  1.916633719 #> 903  31    3     1  1.142402141 -0.7886219709 0  1.547678151 #> 904  31    4     1  1.440364255  1.1683838731 1  0.935070364 #> 905  31    5     1  1.812398082  0.6241874720 1  1.768719524 #> 906  31    6     1  3.282913801 -0.6470456313 1  3.107977733 #> 907  31    7     1  2.382807038 -1.2410444968 0  2.800663597 #> 908  31    8     1  3.198461804 -0.1057841676 1  3.119752318 #> 909  31    9     1  1.639233093 -0.2732481068 0  1.739744951 #> 910  31   10     1  5.842105423 -2.8097746790 1  5.604058189 #> 911  31   11     1  4.003067161 -0.8341882316 0  4.001727980 #> 912  31   12     1  2.702067966 -0.0914342756 0  2.826840780 #> 913  31   13     1  0.986785301  0.7116019225 0  1.251233498 #> 914  31   14     1  2.567391174  0.3943948480 1  2.531244927 #> 915  31   15     1  2.667280804 -0.7593981173 0  2.408047260 #> 916  31   16     1  4.816556294 -0.9905076305 1  4.609879820 #> 917  31   17     1  2.794672290  1.0490866266 1  2.707329037 #> 918  31   18     1  2.542149693  0.6757624155 1  2.591388145 #> 919  31   19     1  4.757575601 -1.0223473286 1  4.606799621 #> 920  31   20     1  1.727645033  1.7699041099 1  1.584354972 #> 921  31   21     1  1.343441256 -0.3589365606 0  1.066099209 #> 922  31   22     1  2.941756795 -0.3198377917 1  2.849215866 #> 923  31   23     1  3.685960307 -0.7261049649 1  3.321132455 #> 924  31   24     1  0.073766800  0.6534957657 0  0.031310836 #> 925  31   25     1  2.301056789 -0.2185938169 1  2.160794106 #> 926  31   26     1  2.925737224 -0.4996001898 1  2.837995016 #> 927  31   27     1  2.433960351 -0.0068463032 1  2.439678643 #> 928  31   28     1  1.735501750  0.7680077137 1  1.897904115 #> 929  31   29     1  1.559061116  1.1113804070 1  1.212107658 #> 930  31   30     1  3.357647132 -2.1448970243 1  3.327707419 #> 931  32    1     1           NA -0.2621974894 1 -0.774315250 #> 932  32    2     1  1.958317449 -0.3246859115 1  2.250990083 #> 933  32    3     1  2.796351649 -0.5021987183 1  2.862537957 #> 934  32    4     1  1.630569880  1.0541810234 1  1.866054448 #> 935  32    5     1  1.523040230  0.9590053778 1  1.320106432 #> 936  32    6     1  4.681842836 -2.1576463350 1  4.936616098 #> 937  32    7     1  2.744080089  0.4547692690 1  3.183445013 #> 938  32    8     1  1.639005086  1.4040502677 1  1.597487187 #> 939  32    9     1  3.238876643 -0.4686997798 1  3.290852338 #> 940  32   10     1  3.030473318  0.4649679908 1  2.924764727 #> 941  32   11     1  3.297598154  0.2710667568 1  3.375022340 #> 942  32   12     1  2.462324376  1.1871868107 1  2.489455264 #> 943  32   13     1  2.244372312  0.9902622460 1  1.863077810 #> 944  32   14     1  4.651759894 -0.9135660482 1  4.706770173 #> 945  32   15     1 -1.346859761  2.6848589992 0 -1.369731216 #> 946  32   16     1 -1.020327089  0.5620413901 0 -0.895462912 #> 947  32   17     1  2.428137998 -0.3599751179 1  2.428332091 #> 948  32   18     1  4.730402883 -1.0742066095 1  4.638538394 #> 949  32   19     1  3.264620494  0.6061302614 1  3.094502473 #> 950  32   20     1  6.516092579 -2.3774069254 1  6.860650772 #> 951  32   21     1  4.858111963 -0.3290388304 1  4.935762399 #> 952  32   22     1 -1.114247071  2.0647042841 0 -1.124670209 #> 953  32   23     1  0.714920482  0.8061088684 1  0.572483135 #> 954  32   24     1 -2.000892478  1.7732386319 0 -1.844184207 #> 955  32   25     1 -0.043851467  1.4599659447 1  0.013236477 #> 956  32   26     1  2.904789856 -1.0736429908 1  3.227923177 #> 957  32   27     1 -0.614476133  1.3730520450 0 -0.572091424 #> 958  32   28     1  0.637883751 -1.1083279118 0  0.719179910 #> 959  32   29     1  1.953923339  0.2791608169 1  1.844656499 #> 960  32   30     1  0.731654743  0.1264124161 0  0.457236522 #> 961  33    1     1           NA -1.5721441591 1  0.730815610 #> 962  33    2     1  2.193853803  0.0945835282 1  2.156409382 #> 963  33    3     1 -0.739824488  1.4960606698 0 -1.012958192 #> 964  33    4     1  1.100324010  1.1452631104 1  0.718494812 #> 965  33    5     1  0.870417947  1.6710548289 1  1.267905783 #> 966  33    6     1 -0.328508655  0.8842508200 0 -0.546925839 #> 967  33    7     1 -0.408652899  0.6599026381 0 -0.580678594 #> 968  33    8     1  1.057408861  1.2940839061 1  1.013614954 #> 969  33    9     1  2.155214702  0.7041672839 1  2.138866090 #> 970  33   10     1  0.448598289  0.8405398270 0  0.443547806 #> 971  33   11     1  0.488636785  0.1573533472 0  0.165443273 #> 972  33   12     1  0.942428406  1.1916012685 1  0.861850353 #> 973  33   13     1 -0.474320098  2.3829266952 1 -0.539679518 #> 974  33   14     1  1.055412944  0.8867490371 1  1.096938549 #> 975  33   15     1  3.654617884 -0.4583901391 1  3.335845992 #> 976  33   16     1  5.439694789 -1.1164164119 1  5.657237959 #> 977  33   17     1  7.196205836 -1.6859164545 1  7.142639539 #> 978  33   18     1  4.714619621  0.4545778091 1  4.691056849 #> 979  33   19     1  2.434842579 -0.0889305675 0  2.297103969 #> 980  33   20     1  2.513037659  0.5728115299 1  2.631797739 #> 981  33   21     1  3.156263456  0.0692364779 1  3.475345465 #> 982  33   22     1 -1.493272992  2.1935900691 0 -1.349316782 #> 983  33   23     1  0.082070069  1.4243231097 1  0.116477028 #> 984  33   24     1  2.177300456 -0.0384567937 1  2.018936783 #> 985  33   25     1  1.235035696 -0.5820599179 0  1.203603480 #> 986  33   26     1  1.393302833  1.0572402127 1  1.094781129 #> 987  33   27     1  2.715219801 -0.6353230772 1  2.893716628 #> 988  33   28     1  2.802895683 -0.7862359200 1  2.575455719 #> 989  33   29     1  0.324295984 -0.0761706715 0  0.657281106 #> 990  33   30     1  0.986853031 -0.4518129363 0  0.900299606 #> 991  34    1     1           NA -1.5146676538 1  0.545635528 #> 992  34    2     1  2.318500646 -0.8953633580 1  2.217106953 #> 993  34    3     1  3.507924086 -1.1373036207 1  3.751334774 #> 994  34    4     1  3.302692277 -0.5774680011 1  3.216412005 #> 995  34    5     1  2.733591346  0.0560167333 1  2.872600028 #> 996  34    6     1  3.711618929 -0.8294776116 1  3.590957875 #> 997  34    7     1  1.381988090 -0.1998898281 0  1.297682778 #> 998  34    8     1  3.887032825 -1.0899918724 1  4.181710220 #> 999  34    9     1  2.851403686 -1.1973635024 0  2.781511015 #> 1000 34   10     1  3.755581070 -0.2858454236 1  3.641232016 #> 1001 34   11     1  3.377053180  0.6297117467 1  3.200852695 #> 1002 34   12     1  5.244249140 -0.7889632181 1  5.601350542 #> 1003 34   13     1  4.513608752  0.6644158637 1  4.601050949 #> 1004 34   14     1  4.297685446  0.3333699702 1  4.596488105 #> 1005 34   15     1  4.413417369  0.0642435566 1  4.386887499 #> 1006 34   16     1 -0.266336286  1.8285304581 0 -0.561405287 #> 1007 34   17     1  3.423032564 -0.8445834285 1  3.675179663 #> 1008 34   18     1  2.244079051 -0.2133071432 0  1.906693552 #> 1009 34   19     1  1.543224899 -0.2608322438 0  1.822836411 #> 1010 34   20     1  1.731674633  1.0172492491 1  1.749611420 #> 1011 34   21     1  0.849133174  0.0969042337 0  0.931491498 #> 1012 34   22     1  0.377212802  0.1565953234 0  0.421396065 #> 1013 34   23     1  1.249482393 -0.7841440048 0  1.549654212 #> 1014 34   24     1  0.685941181  1.4931848406 1  0.537902230 #> 1015 34   25     1  1.097936390 -0.7830975957 0  0.883821973 #> 1016 34   26     1  1.111046672  1.2790725832 1  1.313973884 #> 1017 34   27     1  1.848860832  0.5581032939 1  1.917680299 #> 1018 34   28     1  0.793981831  2.2841164803 1  0.599186770 #> 1019 34   29     1 -0.490399483  1.3946631322 0 -0.643667236 #> 1020 34   30     1  3.024558436 -1.1366261878 1  3.245585421 #> 1021 35    1     1           NA -1.6015361736 0 -0.288449296 #> 1022 35    2     1  0.355345604 -1.3108015333 0  0.520033920 #> 1023 35    3     1  2.380115228 -0.1790515944 1  2.161148748 #> 1024 35    4     1  0.891655362  2.0024827303 1  0.614558671 #> 1025 35    5     1  2.436229696 -0.0519819062 1  2.841911547 #> 1026 35    6     1  3.437606331 -0.5735602708 1  3.652983216 #> 1027 35    7     1  3.853119006 -0.6451139569 1  3.853690025 #> 1028 35    8     1  4.265501191 -0.8730710004 1  3.813704935 #> 1029 35    9     1  0.808086189  0.8663661321 0  0.817677292 #> 1030 35   10     1  0.278505687  0.5041262546 0  0.298513138 #> 1031 35   11     1  3.019126804 -0.3957979503 1  3.064489834 #> 1032 35   12     1  6.214451441 -1.5477765436 1  6.319469444 #> 1033 35   13     1  5.564489705  0.2073811574 1  5.449623847 #> 1034 35   14     1  5.442198385 -0.1706396182 1  5.648709096 #> 1035 35   15     1  4.048522150  0.6497918672 1  3.986807522 #> 1036 35   16     1  3.466698487  0.4605913495 1  3.223453374 #> 1037 35   17     1  4.425213212 -0.4577605332 1  4.397525786 #> 1038 35   18     1  1.810811623  0.3132287720 0  1.194643495 #> 1039 35   19     1  2.258373850  0.4640912339 1  2.439691715 #> 1040 35   20     1  2.170533974 -0.6309678667 0  2.280141749 #> 1041 35   21     1  2.738914253  0.2900343878 1  2.541684790 #> 1042 35   22     1  4.081722383 -0.8636089506 1  4.070171355 #> 1043 35   23     1  3.934982401 -0.6524043665 1  3.760827239 #> 1044 35   24     1  2.858836814  0.0830221576 1  2.873171188 #> 1045 35   25     1  4.382553720 -1.5196539949 1  4.506676320 #> 1046 35   26     1  2.263978016  0.7876767254 1  2.529181897 #> 1047 35   27     1  2.180480605  0.3411578684 1  2.182555233 #> 1048 35   28     1  2.934288242 -1.0933007640 1  3.029357525 #> 1049 35   29     1  2.120871187  0.1645341176 1  1.951911036 #> 1050 35   30     1  2.850989702  0.2097858904 1  2.765903278 #> 1051 36    1     1           NA -0.5309065222 1 -1.222380911 #> 1052 36    2     1  1.730051247  1.9972133847 1  1.874842110 #> 1053 36    3     1  0.817995386  1.9023618217 1  0.812395979 #> 1054 36    4     1  2.294524974  0.0667008709 1  2.131324661 #> 1055 36    5     1  4.258997448 -1.7532373591 1  4.519136843 #> 1056 36    6     1  1.542015102  1.5039006090 1  1.343902608 #> 1057 36    7     1  0.524300125  0.1653210212 0  0.642541171 #> 1058 36    8     1  2.052474917 -1.3580790594 0  1.907708844 #> 1059 36    9     1  2.250634180  0.8641524862 1  2.095975625 #> 1060 36   10     1  2.416216232 -1.1559165251 0  2.502540252 #> 1061 36   11     1  2.541365744  0.8993540532 1  2.583314051 #> 1062 36   12     1 -1.486507995  2.4580604919 0 -1.464995728 #> 1063 36   13     1  5.080686285 -2.2106331106 1  5.025094898 #> 1064 36   14     1  3.802699553  0.8188281365 1  3.586100090 #> 1065 36   15     1  4.117022114 -0.0260186348 1  4.280175845 #> 1066 36   16     1  5.237434690 -0.7010036123 1  5.737613138 #> 1067 36   17     1  2.699159284  0.1036380042 0  2.594629069 #> 1068 36   18     1  3.613508956 -0.0899751970 1  4.006316299 #> 1069 36   19     1  5.372106730 -1.0204005907 1  5.556206448 #> 1070 36   20     1  3.885146704  0.4442870514 1  3.912480485 #> 1071 36   21     1  2.657201806 -0.7466789410 0  2.396564974 #> 1072 36   22     1  0.780335784  0.1654574195 0  0.843642042 #> 1073 36   23     1  1.559652416  0.6507783632 1  1.450357663 #> 1074 36   24     1  2.298125200  0.1155321043 1  2.422866868 #> 1075 36   25     1  1.560005309 -0.8056980816 0  1.767702010 #> 1076 36   26     1  3.559841004 -1.2224033826 1  3.010094280 #> 1077 36   27     1  3.377299507 -1.1795186291 1  3.794109016 #> 1078 36   28     1  2.224634229  0.2144793753 1  1.967209418 #> 1079 36   29     1  1.343397312  1.5778519788 1  1.156057823 #> 1080 36   30     1  2.831136990  0.1299655160 1  2.758905998 #> 1081 37    1     1           NA -1.4617555850 1  0.633333596 #> 1082 37    2     1  0.106435725  0.6007088237 0 -0.087915593 #> 1083 37    3     1  2.190516348 -0.1009748853 1  2.474779879 #> 1084 37    4     1 -0.925294789  1.8668518447 0 -0.762443949 #> 1085 37    5     1  2.068835906  0.0993275941 1  1.960334136 #> 1086 37    6     1  3.481007189 -0.7741449296 1  3.518772176 #> 1087 37    7     1  2.617450754  0.4388187007 1  2.135799466 #> 1088 37    8     1  0.816549557  0.1818471926 0  0.754335049 #> 1089 37    9     1  3.840089837 -1.1986223591 1  3.691357537 #> 1090 37   10     1  3.920449157 -0.1271486068 1  3.987861425 #> 1091 37   11     1  5.239708612 -0.8308115273 1  5.509128450 #> 1092 37   12     1  3.627197146 -0.1624219425 0  3.704828831 #> 1093 37   13     1 -1.445329054  2.6917140032 0 -1.462506300 #> 1094 37   14     1  1.312273962  0.3883651628 1  1.105741290 #> 1095 37   15     1  3.885730257 -0.6435673870 1  3.807217138 #> 1096 37   16     1  1.720562788  0.2410459325 0  1.772105333 #> 1097 37   17     1  2.140800303 -0.6626072757 0  2.344694487 #> 1098 37   18     1 -0.088047005  1.0705160368 0  0.098012469 #> 1099 37   19     1  4.190365411 -1.3134509165 1  4.235317398 #> 1100 37   20     1  3.375612617  0.4391303884 1  3.400692615 #> 1101 37   21     1  4.561200735 -0.8468963888 1  4.390518775 #> 1102 37   22     1  2.338463726 -0.6527743959 0  2.257076572 #> 1103 37   23     1  0.484906327  0.1830479699 0  0.422624726 #> 1104 37   24     1 -0.178439304  0.3248253133 0  0.109231909 #> 1105 37   25     1  3.365427281 -1.1661847074 1  3.362323618 #> 1106 37   26     1  2.329242526  0.4519521167 1  2.443479443 #> 1107 37   27     1  3.684539992 -1.7410220173 1  3.848532346 #> 1108 37   28     1  1.775539394  0.8925710596 1  1.859483164 #> 1109 37   29     1  0.304289601 -0.0619226576 0  0.192816404 #> 1110 37   30     1  2.859317944 -0.3285065726 1  3.099190213 #> 1111 38    1     1           NA  0.6879167730 0  1.427519656 #> 1112 38    2     1  2.448534837 -1.2512713616 1  2.343075945 #> 1113 38    3     1  3.727283743 -1.3598407038 1  3.624226792 #> 1114 38    4     1  3.930440840 -1.3509026860 1  3.935902780 #> 1115 38    5     1  3.430553188 -0.5718500579 1  3.256981237 #> 1116 38    6     1  2.009395699  0.8457315402 1  1.722707963 #> 1117 38    7     1  1.770526907  0.8833028199 1  1.725735521 #> 1118 38    8     1  2.721547051  0.1648408679 1  2.388517372 #> 1119 38    9     1  2.587994815  0.6394919979 1  2.443151403 #> 1120 38   10     1  5.284164841 -1.9415183760 1  5.171667724 #> 1121 38   11     1  5.223441491 -0.3305447001 1  5.086590319 #> 1122 38   12     1  5.297924811 -0.0974512501 1  5.345038539 #> 1123 38   13     1  6.075503251 -0.4826768218 1  5.885653007 #> 1124 38   14     1  4.088389676 -0.4459350272 0  4.077612990 #> 1125 38   15     1  2.816850748  1.0453056640 1  2.621016136 #> 1126 38   16     1  4.051667855 -0.3524531992 1  4.052029829 #> 1127 38   17     1  1.244397010  2.0066806908 1  1.180873823 #> 1128 38   18     1  2.809318219 -1.3511003857 0  2.853951436 #> 1129 38   19     1  4.201559349 -0.4944808755 1  3.839955982 #> 1130 38   20     1  0.486314133  1.0406231529 0  0.327073473 #> 1131 38   21     1  0.931406886  1.1970776637 1  0.898537031 #> 1132 38   22     1  0.692655512  1.4528172823 1  0.854768081 #> 1133 38   23     1  1.678763455  0.5487749604 1  1.403692741 #> 1134 38   24     1  3.438749984 -0.8705772453 1  3.671210634 #> 1135 38   25     1  2.495947703  0.4079461962 1  2.481221082 #> 1136 38   26     1  1.542595721  1.1504491864 1  1.392567185 #> 1137 38   27     1  3.739722391 -1.9925857712 1  3.648409794 #> 1138 38   28     1 -0.265471810  1.0187579723 0 -0.368474474 #> 1139 38   29     1  1.960337544  0.6139229642 1  1.912354251 #> 1140 38   30     1  2.400861500  1.9727035673 1  2.776344637 #> 1141 39    1     1           NA  2.1001089405 0  1.380517493 #> 1142 39    2     1  2.271310597 -0.6111659167 1  2.346319824 #> 1143 39    3     1  1.085992881 -0.6647694353 0  1.293337231 #> 1144 39    4     1  0.365024725  0.0209835864 0  0.371027524 #> 1145 39    5     1  3.184906737 -0.9740095828 1  2.893168807 #> 1146 39    6     1  4.104275326 -1.2606828788 1  4.178210587 #> 1147 39    7     1  5.441141846 -2.0523369839 1  5.514768911 #> 1148 39    8     1  1.365636444  0.3641146874 0  1.586385000 #> 1149 39    9     1 -1.360333861  2.4302266523 0 -1.393243236 #> 1150 39   10     1 -1.282712376  1.1811808914 0 -1.515913492 #> 1151 39   11     1 -1.198976185  0.7408145237 0 -1.034470519 #> 1152 39   12     1  1.277939587  0.4205741887 1  1.460849259 #> 1153 39   13     1 -0.236250239  2.3747347151 1  0.012746452 #> 1154 39   14     1  0.225622289  0.2311149344 0  0.039725700 #> 1155 39   15     1 -1.764214350  1.6155453232 0 -1.650288932 #> 1156 39   16     1  1.197384278  0.3711479598 1  1.204184675 #> 1157 39   17     1  3.262140054 -0.2722675344 1  3.187901385 #> 1158 39   18     1  4.373297028 -0.5226166972 1  3.897117840 #> 1159 39   19     1  1.533858277  1.7517571498 1  1.542327781 #> 1160 39   20     1  2.263678112  0.4840993880 1  2.390514277 #> 1161 39   21     1  1.826783768 -0.5486273611 0  1.842765790 #> 1162 39   22     1  3.748394059 -0.8064826557 1  3.586070669 #> 1163 39   23     1  1.209612657  1.4046842945 1  0.919980183 #> 1164 39   24     1  0.325656356 -0.0517182129 0  0.412340709 #> 1165 39   25     1  3.054395269 -0.8630042460 1  3.057769749 #> 1166 39   26     1  0.506500904  0.1679409807 0  0.448043839 #> 1167 39   27     1  1.665546314  0.5512742115 1  1.570782797 #> 1168 39   28     1  1.455670291  1.0891120109 1  1.628775145 #> 1169 39   29     1  1.117336264 -1.5460885942 0  0.930108458 #> 1170 39   30     1  1.375800039 -2.2486900668 0  1.642069053 #> 1171 40    1     1           NA -1.2870304760 1  0.872634567 #> 1172 40    2     1  2.322161159 -1.1854800846 1  2.331187363 #> 1173 40    3     1  2.048208930  0.4854599789 1  2.063639466 #> 1174 40    4     1  1.432443192  1.2499145710 1  0.925175719 #> 1175 40    5     1  2.532029112 -0.1799062310 1  2.647081654 #> 1176 40    6     1  1.134969145 -0.3545424031 0  1.208479446 #> 1177 40    7     1  4.362254135 -1.6363792681 1  4.304276450 #> 1178 40    8     1  2.858498939  0.5521577142 1  2.743789709 #> 1179 40    9     1  3.741834896 -0.5572154819 1  3.595297694 #> 1180 40   10     1  1.849716508  1.8599108615 1  1.522332726 #> 1181 40   11     1  1.894834180  0.9899716086 1  1.641533685 #> 1182 40   12     1  5.481742610 -1.6140394566 1  5.439898522 #> 1183 40   13     1  2.822004213  0.3746435680 0  2.937967363 #> 1184 40   14     1  1.010050831  0.6475133580 0  0.506534756 #> 1185 40   15     1  2.710583101 -0.0296939710 1  3.010010078 #> 1186 40   16     1  1.332906253  0.2435327188 0  1.403429430 #> 1187 40   17     1  4.688659037 -1.2139444702 1  4.688749168 #> 1188 40   18     1  2.637457673 -0.2491906778 0  2.674241815 #> 1189 40   19     1  1.354549562  0.0557647746 0  1.261053301 #> 1190 40   20     1  3.119858117 -0.2448837791 1  3.243653924 #> 1191 40   21     1  2.963468707  0.3030456952 1  2.817195774 #> 1192 40   22     1  2.516666120  0.3729115952 1  2.382680719 #> 1193 40   23     1  0.208133443  0.3870831196 0  0.494371248 #> 1194 40   24     1 -0.904130530  0.9084476988 0 -1.435579812 #> 1195 40   25     1  1.385014688  0.3040420350 1  1.398374609 #> 1196 40   26     1  0.846026344 -0.5661093329 0  0.715861050 #> 1197 40   27     1  2.132845701 -0.0347420615 1  2.384552409 #> 1198 40   28     1  2.291986920 -0.1631289899 1  2.468122409 #> 1199 40   29     1  2.227030645 -0.1123919613 1  2.241482886 #> 1200 40   30     1  0.672599334  0.8382193873 0  0.498171021 #> 1201 41    1     1           NA  0.7877388475 1 -0.483135069 #> 1202 41    2     1  1.600055546  2.1988103489 1  1.582592880 #> 1203 41    3     1  2.592101863 -0.3756028717 1  2.442034531 #> 1204 41    4     1  3.059279553 -0.7152421872 1  3.078937533 #> 1205 41    5     1 -0.286132996  1.0149431727 0 -0.032066114 #> 1206 41    6     1  0.297163121 -0.0735560191 0  0.392418736 #> 1207 41    7     1  0.744630375  1.4304023412 1  0.284759931 #> 1208 41    8     1  3.014837610 -0.6018928460 1  2.826765154 #> 1209 41    9     1  2.371859379  0.8449042414 1  2.404949212 #> 1210 41   10     1  2.118861134  1.0740122603 1  2.162816485 #> 1211 41   11     1  5.556621369 -1.9385047015 1  5.304530240 #> 1212 41   12     1  6.131575035 -0.7282191112 1  6.209159068 #> 1213 41   13     1  3.399150141  1.5384301989 1  3.470670905 #> 1214 41   14     1  3.582573813  0.3562833449 1  3.442138805 #> 1215 41   15     1  3.073760003  0.5622673454 1  3.338063660 #> 1216 41   16     1  5.134573860 -1.0141141727 1  5.232285747 #> 1217 41   17     1  4.652362497 -0.1412617573 1  4.439237368 #> 1218 41   18     1  5.462171562 -0.9957987249 1  5.529304524 #> 1219 41   19     1  4.008149948  0.3314343982 1  3.926001949 #> 1220 41   20     1  2.502608351  0.9159920579 1  2.607792261 #> 1221 41   21     1  3.150474215 -0.0569705338 1  3.076005813 #> 1222 41   22     1  2.199955134  0.6198500746 1  2.451503201 #> 1223 41   23     1 -0.669712861  1.0517012702 0 -0.413077367 #> 1224 41   24     1  2.730614314 -0.7497257869 1  2.899979825 #> 1225 41   25     1  2.770678824 -0.1464274878 1  2.688992106 #> 1226 41   26     1  1.494014373 -1.0861182406 0  1.579737781 #> 1227 41   27     1  0.792882099  1.8505717036 1  0.718656001 #> 1228 41   28     1  0.560746753 -0.8209866971 0  0.272285908 #> 1229 41   29     1  0.197712893 -0.0217945400 0  0.310082380 #> 1230 41   30     1  0.761261865 -0.2890232705 0  0.479430513 #> 1231 42    1     1           NA  0.7690422410 1 -0.531346919 #> 1232 42    2     1 -0.147255793  1.3124129764 0  0.062147889 #> 1233 42    3     1  2.569239623 -0.5618763635 1  2.672862760 #> 1234 42    4     1  3.209476511 -0.7526889682 1  3.282183717 #> 1235 42    5     1  4.583194567 -1.9927484887 1  4.397119647 #> 1236 42    6     1  4.274387308 -1.1686514244 1  4.126102345 #> 1237 42    7     1  2.027438488  1.0466288471 1  1.959526462 #> 1238 42    8     1  3.882315712 -0.9936985911 1  3.698923196 #> 1239 42    9     1  2.263183963 -0.7822018456 0  1.919052614 #> 1240 42   10     1  3.117684111 -0.0273469664 1  3.252351104 #> 1241 42   11     1  1.780422730  0.1071904070 0  1.332755917 #> 1242 42   12     1  3.258051574 -1.5404424053 0  3.594173670 #> 1243 42   13     1  4.546619677 -0.1097103212 1  4.411262364 #> 1244 42   14     1  5.596562405 -0.6580102079 1  5.760868987 #> 1245 42   15     1  5.081444475 -0.0974124985 1  4.866657153 #> 1246 42   16     1  3.565659069 -0.7913138788 0  3.460061332 #> 1247 42   17     1  5.241244722 -1.0053775816 1  5.225477887 #> 1248 42   18     1  5.923951235 -1.0399550438 1  5.818535967 #> 1249 42   19     1  4.902095312 -0.1898466377 1  5.289613510 #> 1250 42   20     1  1.275065357  0.8006223565 0  1.379254247 #> 1251 42   21     1  4.002105463 -0.9578493922 1  4.146011232 #> 1252 42   22     1  2.356173029 -0.7575101607 0  2.549584097 #> 1253 42   23     1  1.930454209  0.6229054623 1  1.615322031 #> 1254 42   24     1  2.775966841 -0.3216060699 1  2.874733392 #> 1255 42   25     1  4.226793084 -1.4335621799 1  4.430548364 #> 1256 42   26     1  3.499974066 -0.6653027956 1  3.619720266 #> 1257 42   27     1  2.098158446  0.5736751083 1  2.070565519 #> 1258 42   28     1  2.369772832 -0.3072572330 1  2.546915862 #> 1259 42   29     1  0.639800815 -0.7583454174 0  0.663052448 #> 1260 42   30     1  2.590314422  0.6565134106 1  2.695490298 #> 1261 43    1     1           NA  0.3322025790 1 -0.587684757 #> 1262 43    2     1  1.996867187 -0.2651450567 1  1.905737844 #> 1263 43    3     1  0.665471763 -0.3439172341 0  0.401646703 #> 1264 43    4     1  2.919927237 -0.9385387036 1  3.024391310 #> 1265 43    5     1  3.020775965 -0.4272792872 1  2.709158525 #> 1266 43    6     1  3.345308856 -0.6347482649 1  3.595197334 #> 1267 43    7     1  2.518774863  0.4352889489 1  2.157294483 #> 1268 43    8     1  1.814823971  1.0267850561 1  1.907173144 #> 1269 43    9     1  1.873425849  1.1107114182 1  1.506278500 #> 1270 43   10     1  0.934602008 -0.0333303423 0  0.798629948 #> 1271 43   11     1  1.940319720  0.6087790117 1  2.062074785 #> 1272 43   12     1  4.378513993 -0.6930946140 1  4.204229348 #> 1273 43   13     1  1.912236436  0.5114707547 0  1.528279658 #> 1274 43   14     1  1.936790901  0.8552022051 1  1.877740137 #> 1275 43   15     1 -0.194530907  1.0164552177 0 -0.042726144 #> 1276 43   16     1  1.897163272  0.2995936847 1  1.814778887 #> 1277 43   17     1  2.835837035  0.1561557073 1  2.650653581 #> 1278 43   18     1  3.391525517 -0.0179802406 1  3.523583218 #> 1279 43   19     1  3.038210067  0.4704927320 1  3.150593822 #> 1280 43   20     1  4.669627366 -0.9365690341 1  4.771100577 #> 1281 43   21     1  3.021246511  0.5910619094 1  2.934039629 #> 1282 43   22     1  1.877698878  0.8515246815 1  1.991874639 #> 1283 43   23     1  1.959454482  0.4336203898 1  1.499335888 #> 1284 43   24     1  1.685276585 -1.1477707505 0  1.454364446 #> 1285 43   25     1  3.146928328 -0.7906077857 1  3.109193190 #> 1286 43   26     1  1.923527459  0.7148483559 1  1.968798561 #> 1287 43   27     1  1.594161583  0.8496958911 1  1.760729567 #> 1288 43   28     1  0.687569191 -0.9020980085 0  0.718964812 #> 1289 43   29     1  2.749717012 -1.0358928844 1  2.847289954 #> 1290 43   30     1  0.977608825 -0.4539977006 0  0.858035852 #> 1291 44    1     1           NA -1.0083766083 1 -0.411697869 #> 1292 44    2     1  0.180929502  0.5431940592 0  0.063826419 #> 1293 44    3     1  0.231604065  0.0904966471 0  0.089140543 #> 1294 44    4     1  1.263046364 -1.0525132793 0  1.048845685 #> 1295 44    5     1  2.478435126  0.1166372836 1  2.666394564 #> 1296 44    6     1  2.962498002 -0.0288415529 1  3.305391576 #> 1297 44    7     1  2.416292198  0.7151784071 1  2.439196228 #> 1298 44    8     1  2.425260427  0.7510613026 1  2.797224072 #> 1299 44    9     1  1.233792511  0.2498247199 0  1.553537517 #> 1300 44   10     1  4.661751823 -1.5160676232 1  4.814416950 #> 1301 44   11     1  4.534897355 -1.4508243135 0  4.646040962 #> 1302 44   12     1  4.898626193  0.1188494330 1  5.174614139 #> 1303 44   13     1  3.123165056  0.2139579796 0  2.971407060 #> 1304 44   14     1  2.455144423  1.1529362256 1  2.202240715 #> 1305 44   15     1  5.225721666 -1.1561673943 1  5.072433184 #> 1306 44   16     1  2.384242572  1.6390519088 1  2.306544278 #> 1307 44   17     1  3.192755385  0.2336336141 1  3.529838909 #> 1308 44   18     1  4.173048897 -0.1321751329 1  4.416696339 #> 1309 44   19     1  5.563383405 -0.9516795430 1  5.543852793 #> 1310 44   20     1  6.435326027 -1.4007874340 1  6.493606177 #> 1311 44   21     1  4.387178406  0.1731048735 1  4.470957138 #> 1312 44   22     1  4.594962807 -0.7479299709 1  4.698091051 #> 1313 44   23     1  2.936429819  0.3860844382 1  2.945911776 #> 1314 44   24     1  2.483173975  0.3543521964 1  2.345839108 #> 1315 44   25     1  1.815843571  0.8851124551 1  1.659672519 #> 1316 44   26     1  2.944186465 -0.4316611004 1  2.931362477 #> 1317 44   27     1  1.638117618  1.3343835853 1  1.625903072 #> 1318 44   28     1 -0.015534775  0.6270687431 0 -0.052418644 #> 1319 44   29     1  1.887732801  0.9481593026 1  1.734149194 #> 1320 44   30     1  3.173675434 -0.5938645624 1  3.353354914 #> 1321 45    1     1           NA -0.1194526066 1  0.709185621 #> 1322 45    2     1  2.305500859 -0.4143399479 1  2.420382191 #> 1323 45    3     1  1.215434005  1.5985087711 1  1.239399029 #> 1324 45    4     1  0.856547216 -0.4371595332 0  0.992231284 #> 1325 45    5     1  3.323788619 -0.8932075701 1  3.042495897 #> 1326 45    6     1  2.204621976  0.6706959687 1  2.275330495 #> 1327 45    7     1  1.895998996  0.9171749176 1  1.706442200 #> 1328 45    8     1  4.457347503 -1.5091665373 1  4.468813255 #> 1329 45    9     1  2.268745310  1.6519153916 1  2.294499256 #> 1330 45   10     1  0.587999941  0.7903853439 0  0.973971034 #> 1331 45   11     1  0.389302393  0.4806255999 0  0.300797979 #> 1332 45   12     1  4.550129193 -1.3647094580 1  4.421176290 #> 1333 45   13     1  3.237162506 -0.1861206994 0  3.695244995 #> 1334 45   14     1  4.000404187  0.2762745565 1  4.054363622 #> 1335 45   15     1  1.064673435  2.3208602240 1  1.041456702 #> 1336 45   16     1  1.420054748  1.0846170087 1  1.387692417 #> 1337 45   17     1  0.592159181  0.3555876116 0  0.135683868 #> 1338 45   18     1  4.091005091 -2.5493427748 0  4.056679063 #> 1339 45   19     1  2.511163798  1.1579104666 1  2.114063642 #> 1340 45   20     1  3.021267038  0.1602775400 1  2.797470006 #> 1341 45   21     1  1.515881012  1.3997833562 1  1.571537170 #> 1342 45   22     1  1.968533721  0.6302398297 1  2.269564081 #> 1343 45   23     1  1.150577745  1.2913233045 1  1.222520760 #> 1344 45   24     1  1.919264402  0.4247997824 1  1.591447879 #> 1345 45   25     1 -0.422624241  0.9030760860 0 -0.396824485 #> 1346 45   26     1  1.863861617  0.2276149399 1  1.803232154 #> 1347 45   27     1  2.747159560 -0.5007190980 1  2.685043250 #> 1348 45   28     1 -0.342191956  1.1203550284 0 -0.351281758 #> 1349 45   29     1  1.833100570  0.9141587339 1  1.800882387 #> 1350 45   30     1  3.379485963 -1.7103796664 1  3.255519366 #> 1351 46    1     1           NA -0.2803953352 0  0.256396754 #> 1352 46    2     1  2.209414280 -0.4762468946 1  2.047497882 #> 1353 46    3     1  2.546957408 -0.0885651121 1  2.249153828 #> 1354 46    4     1  2.278199012  0.3311791730 1  1.797767873 #> 1355 46    5     1  0.272175159  0.3339029425 0  0.446798989 #> 1356 46    6     1  4.139023766 -1.6505465434 1  4.116120145 #> 1357 46    7     1  4.179242389 -2.6609227985 0  4.215483498 #> 1358 46    8     1  3.541596422 -0.0951474508 1  3.385208749 #> 1359 46    9     1  4.820168824 -1.4589707285 1  4.516460399 #> 1360 46   10     1  4.302621995 -0.2107341807 1  4.513575996 #> 1361 46   11     1  3.510147870 -0.8281742704 0  3.302043529 #> 1362 46   12     1  3.388240426  0.5899826794 1  3.551906019 #> 1363 46   13     1  4.582598022 -0.1203938246 1  4.370095995 #> 1364 46   14     1  4.445248007  0.1441046625 1  4.275243031 #> 1365 46   15     1  5.192202442 -0.6035312478 1  5.277280957 #> 1366 46   16     1  3.542150619 -0.6245674736 0  3.252238054 #> 1367 46   17     1  6.079381123 -1.6218582591 1  5.987073571 #> 1368 46   18     1  3.394719671  1.0405734557 1  3.598926743 #> 1369 46   19     1  3.027483919  0.5847052602 1  2.807353151 #> 1370 46   20     1  3.780741677 -0.2739623748 1  3.538139850 #> 1371 46   21     1  1.382431321  0.1174595846 0  1.164951666 #> 1372 46   22     1 -0.771658654  1.0966616331 0 -1.187506310 #> 1373 46   23     1  1.111546625 -1.0022598737 0  0.791772540 #> 1374 46   24     1 -0.480104525  0.6483473512 0 -0.744777131 #> 1375 46   25     1 -2.201998097  2.0055732743 0 -2.295669263 #> 1376 46   26     1  0.457642774  1.2949457957 1  0.322335573 #> 1377 46   27     1 -0.240053277  0.5100979282 0 -0.262585395 #> 1378 46   28     1 -1.229334727  2.1272135525 0 -1.176755781 #> 1379 46   29     1  3.069432126 -1.2987319948 1  3.044671789 #> 1380 46   30     1  3.006787381 -0.2094484283 1  2.776714424 #> 1381 47    1     1           NA  0.5629895332 0 -1.856360586 #> 1382 47    2     1  0.020174473 -0.7886028379 0  0.106389520 #> 1383 47    3     1 -0.882556959  1.0807994962 0 -0.970242529 #> 1384 47    4     1  1.629905269 -2.0142104979 0  1.985484775 #> 1385 47    5     1  0.122099683  0.4114299206 0  0.202382509 #> 1386 47    6     1  2.612812874 -0.3497542392 1  2.684726554 #> 1387 47    7     1  1.591700383  1.1102770966 1  1.682642290 #> 1388 47    8     1  3.654224112 -0.8959478228 1  3.505353231 #> 1389 47    9     1  3.422517320 -0.0512978861 1  3.330785688 #> 1390 47   10     1  4.201884016 -0.6567429254 1  4.106334483 #> 1391 47   11     1  3.010047788  1.0202530122 1  3.324366474 #> 1392 47   12     1  3.705187053  0.2893440288 1  3.578136447 #> 1393 47   13     1  2.817953830  1.0128343358 1  3.033948896 #> 1394 47   14     1  4.022660193 -0.0756250808 1  4.149563590 #> 1395 47   15     1  6.230861894 -1.4588494144 1  6.333550168 #> 1396 47   16     1  1.824928063  0.8259229016 0  2.018787467 #> 1397 47   17     1  0.866460811  0.2207112910 0  0.805122756 #> 1398 47   18     1  2.275863401  0.2497257360 1  2.574730250 #> 1399 47   19     1  4.378894755 -0.8064528227 1  4.631404501 #> 1400 47   20     1  5.288808573 -0.9855391126 1  5.185188659 #> 1401 47   21     1  2.391329963 -0.3315457582 0  2.284616499 #> 1402 47   22     1  4.041376134 -0.9884429224 1  4.238215633 #> 1403 47   23     1  2.439631364 -1.1051827292 0  2.692308332 #> 1404 47   24     1  4.017365744 -1.2198100315 1  4.070911338 #> 1405 47   25     1  0.931070520 -0.0035803084 0  0.848498226 #> 1406 47   26     1  1.611876242  0.5783349405 1  1.596951129 #> 1407 47   27     1  1.533623759  0.8687932702 1  1.647806247 #> 1408 47   28     1  1.855654586  0.3661143829 1  2.040229704 #> 1409 47   29     1  1.870406817  0.4243787949 1  1.905038368 #> 1410 47   30     1  2.141351102  2.4787458014 1  2.536588814 #> 1411 48    1     1           NA -0.3724387561 1 -1.860587630 #> 1412 48    2     1  2.012571329 -0.5946172675 1  1.891144083 #> 1413 48    3     1  1.844574881  0.6307541157 1  1.927477400 #> 1414 48    4     1  2.275063957  0.2119804334 1  2.033588129 #> 1415 48    5     1  2.565685979 -0.0330361593 1  2.168190726 #> 1416 48    6     1  1.841781090  0.7564064385 1  1.834719214 #> 1417 48    7     1  1.259974082 -0.4849875966 0  1.146260405 #> 1418 48    8     1  4.774812665 -2.0707510705 1  5.043243077 #> 1419 48    9     1  4.360769154 -0.5269251761 1  4.389257562 #> 1420 48   10     1  3.436848124 -1.4120257927 0  3.460117575 #> 1421 48   11     1  1.364285267  0.5384820321 0  1.514635101 #> 1422 48   12     1  4.441216033 -0.9042150256 1  4.225870266 #> 1423 48   13     1  3.037955991 -0.2014581470 0  2.887106935 #> 1424 48   14     1  0.736026783  2.1614158463 1  1.180290752 #> 1425 48   15     1  3.451811910 -0.3509178272 1  3.404101115 #> 1426 48   16     1  1.907203213 -0.0485683528 0  1.896778204 #> 1427 48   17     1  2.711909585  0.3104500805 1  3.120412371 #> 1428 48   18     1  0.274558035  2.4162073731 1  0.559301148 #> 1429 48   19     1  2.484505982  0.0545532458 1  2.565488407 #> 1430 48   20     1  3.169434694  0.0839306795 1  3.059357337 #> 1431 48   21     1  2.935526321  0.2782949133 1  2.808165232 #> 1432 48   22     1  1.580592392  1.1079950410 1  1.922539667 #> 1433 48   23     1  1.810268742  0.5919460034 1  1.692281599 #> 1434 48   24     1  2.281658137  0.1072350348 1  1.845048822 #> 1435 48   25     1  4.054453978 -1.4958268140 1  3.469631999 #> 1436 48   26     1  1.468814788  1.3646727815 1  1.455974773 #> 1437 48   27     1 -0.763078224  1.3693516880 0 -0.801217467 #> 1438 48   28     1  2.539535933 -0.8747813772 1  2.220614293 #> 1439 48   29     1  0.847349609 -1.1125453200 0  0.828384272 #> 1440 48   30     1  2.508838067  0.9897022081 1  2.512201874 #> 1441 49    1     1           NA  0.9769733867 1 -0.022834094 #> 1442 49    2     1  1.781241466  1.6509074673 1  1.890837374 #> 1443 49    3     1  2.475528670 -0.1136398955 1  2.291823876 #> 1444 49    4     1 -0.501911979  1.2366750464 0 -0.343103513 #> 1445 49    5     1  4.441663778 -2.4658981938 1  4.676090144 #> 1446 49    6     1  1.666482719 -0.5388091600 0  1.865438510 #> 1447 49    7     1  2.429257757  0.2306168306 1  2.344137305 #> 1448 49    8     1  2.791587761  0.1501201312 1  3.027341641 #> 1449 49    9     1  3.466327181 -0.1972648691 1  3.472271901 #> 1450 49   10     1  3.939584394 -0.2997624966 1  3.877525779 #> 1451 49   11     1  3.238919125  0.7690522950 1  3.118880658 #> 1452 49   12     1  1.757676150  0.2263249424 0  2.013905806 #> 1453 49   13     1  4.575803896 -2.0376824944 0  4.584207497 #> 1454 49   14     1  2.321707114  0.2763155321 0  2.114715566 #> 1455 49   15     1  1.174573079  0.1467084841 0  1.290089002 #> 1456 49   16     1  2.491311595  0.3013136517 1  2.487496598 #> 1457 49   17     1  5.412836604 -1.4211084475 1  5.475378564 #> 1458 49   18     1  3.612941401  0.6851982381 1  3.624085039 #> 1459 49   19     1  2.795231982  0.7163316195 1  2.940459805 #> 1460 49   20     1  5.144126183 -1.3199965265 1  5.212145772 #> 1461 49   21     1  5.515333007 -1.1855916490 1  5.459743360 #> 1462 49   22     1  2.352027764 -0.4895328712 0  2.515928090 #> 1463 49   23     1  2.815397323 -0.1196896641 1  2.672165305 #> 1464 49   24     1  1.762918656 -0.9440576916 0  1.515098647 #> 1465 49   25     1  1.217119304 -0.7684170270 0  1.583654432 #> 1466 49   26     1  3.859058246 -1.7015798027 1  3.771079259 #> 1467 49   27     1  1.956746490  0.7626511463 1  2.023128339 #> 1468 49   28     1  1.506684821  1.0244748630 1  1.937714972 #> 1469 49   29     1  2.769858827 -1.0510732262 1  2.891431822 #> 1470 49   30     1  2.450731571  1.6755721558 1  2.689318569 #> 1471 50    1     1           NA -0.3745808578 1  0.149938747 #> 1472 50    2     1  2.086192742 -0.0540281251 1  1.755086924 #> 1473 50    3     1  3.704589389 -1.5329020029 1  4.049610391 #> 1474 50    4     1  1.104855374  2.0375740182 1  1.076061989 #> 1475 50    5     1  0.004043849  2.5714581459 1 -0.044604420 #> 1476 50    6     1  2.018788439  0.2272919217 1  2.044199171 #> 1477 50    7     1  1.097142082 -0.2951578009 0  0.988926553 #> 1478 50    8     1  0.759945417 -0.0792117093 0  0.264026161 #> 1479 50    9     1  1.146885913 -0.6295787427 0  1.136211392 #> 1480 50   10     1  3.642154075 -0.8490611350 1  3.751728788 #> 1481 50   11     1  3.959390917  0.1207193293 1  3.677867529 #> 1482 50   12     1  3.323080564  0.7480811625 1  3.489499606 #> 1483 50   13     1  2.647790578 -0.1958892488 0  2.544599144 #> 1484 50   14     1  2.003667929 -0.1582940287 0  1.816004877 #> 1485 50   15     1  0.958499928  1.6236212077 1  1.004184589 #> 1486 50   16     1  2.449661328  0.2603614907 1  2.617673160 #> 1487 50   17     1  2.088123374  0.9553656397 1  2.219318416 #> 1488 50   18     1  1.909074241 -0.4469593090 0  1.868055357 #> 1489 50   19     1  0.364532267  0.5577309821 0  0.554567864 #> 1490 50   20     1  2.324021433  0.1612263513 1  2.272492856 #> 1491 50   21     1  2.161885132 -0.8358940534 0  2.206942818 #> 1492 50   22     1  2.451190842  0.2943533884 1  2.551791148 #> 1493 50   23     1  0.637207144  0.0740052117 0  0.892844219 #> 1494 50   24     1  2.225949454 -0.0003846487 1  2.208617975 #> 1495 50   25     1  0.129254264  0.4084885048 0 -0.121140002 #> 1496 50   26     1  2.259750602 -0.2806762797 1  2.381388225 #> 1497 50   27     1  0.065913689  0.4211471730 0  0.104957356 #> 1498 50   28     1 -0.485754884  0.9047588937 0 -0.711684545 #> 1499 50   29     1  1.951173826  0.5254124483 1  1.969896757 #> 1500 50   30     1  0.637387013  0.9149653183 0  0.677013200 #> 1501  1    1     2           NA -0.5753469626 0  0.404690656 #> 1502  1    2     2  1.802656329  1.0527114656 1  1.366561787 #> 1503  1    3     2  0.128897040  0.1192452364 0  0.104795746 #> 1504  1    4     2  0.588214418 -0.5211173176 0  0.929566554 #> 1505  1    5     2  1.175054765  1.3011759922 1  0.860590438 #> 1506  1    6     2  2.572284025 -0.2052992575 1  2.116082005 #> 1507  1    7     2  2.121389595  0.4922285701 1  2.297089650 #> 1508  1    8     2  0.079502014  0.8719649541 0 -0.139421359 #> 1509  1    9     2  2.495795620 -0.0973692675 1  2.317530179 #> 1510  1   10     2  2.042193028 -0.8338435805 0  1.937360674 #> 1511  1   11     2  1.707190801 -0.3970305203 0  1.657080795 #> 1512  1   12     2  0.080689461  0.8636484342 0  0.218155954 #> 1513  1   13     2 -0.985249896  1.0610952533 0 -0.944676028 #> 1514  1   14     2  1.165036029  0.5397906055 1  1.386499245 #> 1515  1   15     2  6.500479203 -2.5079178022 1  6.593880944 #> 1516  1   16     2  3.756448544  0.9112096768 1  3.852378758 #> 1517  1   17     2  0.218033653  2.5754497637 1  0.322540139 #> 1518  1   18     2  1.509025192  0.7841708791 1  1.529191330 #> 1519  1   19     2 -2.678498763  2.7973911470 0 -3.053726414 #> 1520  1   20     2 -0.678944266  1.4819340159 1 -0.916626670 #> 1521  1   21     2  2.792878467 -0.6249283875 1  2.478956305 #> 1522  1   22     2  2.241604308  0.5102732511 1  2.471760969 #> 1523  1   23     2  2.324948788  0.2018374723 1  2.483551899 #> 1524  1   24     2  1.552516636  0.7412773772 1  1.558667362 #> 1525  1   25     2  0.844044928  1.3426239200 1  0.603979578 #> 1526  1   26     2 -1.637208432  1.9001363349 0 -1.670883500 #> 1527  1   27     2  1.606992738  0.0650680195 1  1.583935930 #> 1528  1   28     2  2.607225052 -0.8682240473 1  2.719419770 #> 1529  1   29     2  2.176333419 -0.2382486959 1  1.834727911 #> 1530  1   30     2  2.922761566 -0.6860240001 1  2.840950465 #> 1531  2    1     2           NA  0.6079643222 1  0.799914607 #> 1532  2    2     2  2.121330525 -1.0491770067 1  2.149899777 #> 1533  2    3     2  2.052014860  0.2436874296 1  2.040891783 #> 1534  2    4     2  2.764388551 -0.4898704531 1  2.954428636 #> 1535  2    5     2  1.912178781  0.7567747638 1  2.145966376 #> 1536  2    6     2  1.849978211  0.6511932816 1  1.911350810 #> 1537  2    7     2  2.235958043  0.2678350153 1  2.347386937 #> 1538  2    8     2  3.169725932 -0.3484724490 1  2.997893465 #> 1539  2    9     2  2.968013486  0.2161525418 1  2.973068796 #> 1540  2   10     2  2.715206603  0.5787223746 1  2.749272526 #> 1541  2   11     2  4.956919940 -1.2175999878 1  5.134904795 #> 1542  2   12     2  1.108867302  1.3805145283 0  1.299656939 #> 1543  2   13     2  1.338324737 -0.2128482786 0  1.431866443 #> 1544  2   14     2  0.167635472  0.6164557164 0  0.139077598 #> 1545  2   15     2  4.545419003 -1.5652817650 1  4.307466136 #> 1546  2   16     2  1.864742448  0.1424584320 0  1.645318818 #> 1547  2   17     2  2.683369822 -1.1852888106 0  2.739822928 #> 1548  2   18     2  0.310379492  2.2996193612 1  0.400544920 #> 1549  2   19     2 -3.225972555  2.8322260239 0 -3.232121868 #> 1550  2   20     2  0.004260660 -0.6129877549 0 -0.096106520 #> 1551  2   21     2  0.967365022  0.9571642742 1  0.808179646 #> 1552  2   22     2  0.731451837 -0.3331209012 0  0.806465525 #> 1553  2   23     2  2.628331539 -0.4271963863 1  2.966742075 #> 1554  2   24     2  1.556225613  0.7532950478 1  1.682595750 #> 1555  2   25     2  0.834118300 -0.5035252869 0  0.841259557 #> 1556  2   26     2 -0.030731580  0.1100091234 0  0.401112094 #> 1557  2   27     2 -0.494786693  0.5785892916 0 -0.596732278 #> 1558  2   28     2 -0.540440132  0.7295603610 0 -0.103846778 #> 1559  2   29     2  3.160281733 -1.5578549039 1  3.318138732 #> 1560  2   30     2  2.510064744  0.9934799821 1  2.385513284 #> 1561  3    1     2           NA -1.6178827083 0  1.589469150 #> 1562  3    2     2  0.466878173 -1.2601552448 0  0.617471337 #> 1563  3    3     2  1.079520609  1.2324758785 1  0.933796334 #> 1564  3    4     2  2.329813215  0.0471544328 1  2.464414121 #> 1565  3    5     2  2.345482978 -1.7267303991 0  2.393225576 #> 1566  3    6     2  0.551210772  0.2737664910 0  0.443974132 #> 1567  3    7     2  1.687861821  0.6532576795 1  2.049700719 #> 1568  3    8     2  2.484429799  0.5185037659 1  2.358937157 #> 1569  3    9     2  2.434824301  0.8824651644 1  2.186053658 #> 1570  3   10     2  4.374172487 -1.0875807141 1  4.528401569 #> 1571  3   11     2  2.466851519  1.6875894829 1  2.426948131 #> 1572  3   12     2 -0.882832157  1.9662480155 0 -1.006076800 #> 1573  3   13     2  2.144924064 -0.0936367939 1  2.184646963 #> 1574  3   14     2  2.747868322  0.6165678175 1  2.457425439 #> 1575  3   15     2  1.750364273 -0.0776732006 0  1.814345957 #> 1576  3   16     2  5.251103387 -1.3894835240 1  5.341931014 #> 1577  3   17     2  2.511123611  0.1009198590 0  2.612250999 #> 1578  3   18     2  3.365196971  0.1567029874 1  3.492895037 #> 1579  3   19     2  5.434359010 -1.2187118163 1  5.591424183 #> 1580  3   20     2  2.895114110  1.1161366155 1  2.959620779 #> 1581  3   21     2  0.301108180  2.4244891412 1  0.323614017 #> 1582  3   22     2  2.483216942 -0.0659609464 1  2.617828575 #> 1583  3   23     2  0.445866198  0.2681028700 0  0.358802880 #> 1584  3   24     2  2.477655469 -0.2626705034 1  2.476196111 #> 1585  3   25     2  1.873294104  0.7166833209 1  2.114982126 #> 1586  3   26     2  1.500895342  1.1403868251 1  1.189201279 #> 1587  3   27     2  3.122193098 -1.1692066215 1  3.239107424 #> 1588  3   28     2  0.024042776  0.5002658724 0 -0.008853710 #> 1589  3   29     2 -0.177047866  0.7613098954 0 -0.360347074 #> 1590  3   30     2  2.850826605  0.0385235991 1  2.857669749 #> 1591  4    1     2           NA -0.0555619655 1 -0.509070404 #> 1592  4    2     2  1.426785751  3.2410399349 1  1.662914737 #> 1593  4    3     2  2.824503254 -0.5160638309 1  2.713559641 #> 1594  4    4     2 -0.549612972  1.3001986777 0 -0.654154140 #> 1595  4    5     2  2.722825736 -0.6015067080 1  2.880026657 #> 1596  4    6     2 -0.197528545  1.0246732348 0 -0.512214487 #> 1597  4    7     2  2.268172421 -0.1227086610 1  2.357019808 #> 1598  4    8     2  1.407012759 -0.3906849786 0  1.333609316 #> 1599  4    9     2  2.699693138  0.2055975045 1  2.563418561 #> 1600  4   10     2 -0.159274060  1.4840309316 0 -0.153086411 #> 1601  4   11     2  0.378013048 -0.0160025272 0  0.516660645 #> 1602  4   12     2  2.759398764 -0.0283950547 1  2.768632032 #> 1603  4   13     2  4.083134117 -0.0867141350 1  4.435263347 #> 1604  4   14     2  7.095234026 -1.6921015209 1  7.245585692 #> 1605  4   15     2  5.376668474  0.2062940448 1  5.307947840 #> 1606  4   16     2  3.878940012 -0.8660377447 0  3.940906546 #> 1607  4   17     2  6.570839916 -1.7799772880 1  6.330504622 #> 1608  4   18     2  4.863120311  0.0467335275 1  5.208499829 #> 1609  4   19     2  3.779910932  0.4690319560 1  3.772663633 #> 1610  4   20     2  2.318655077  1.0365480099 1  2.449861713 #> 1611  4   21     2  4.281882528 -0.9159792437 1  4.337403489 #> 1612  4   22     2  3.589634525 -0.1152217094 1  3.491070826 #> 1613  4   23     2  4.475031780 -1.2304309254 1  4.648292859 #> 1614  4   24     2  1.456737781 -0.3125438690 0  1.476969981 #> 1615  4   25     2  1.228554926 -0.7496685841 0  1.071210218 #> 1616  4   26     2  1.556617205  0.7680813047 1  1.339660702 #> 1617  4   27     2 -0.339856542  0.8061848554 0 -0.236030426 #> 1618  4   28     2  1.678966615  0.6342502537 1  1.998996179 #> 1619  4   29     2 -0.613532001  1.1291443956 0 -0.516310824 #> 1620  4   30     2  2.674163121  0.5361489758 1  2.477371860 #> 1621  5    1     2           NA  0.5194072039 1 -1.015564748 #> 1622  5    2     2  0.014620929 -0.4168575882 0 -0.358001992 #> 1623  5    3     2  0.822971292 -0.9925071504 0  0.995924635 #> 1624  5    4     2  0.171495109  2.2930789738 1  0.435371740 #> 1625  5    5     2  2.601552419 -0.3520464566 1  2.686379055 #> 1626  5    6     2  1.880588297  0.8176594464 1  1.914369287 #> 1627  5    7     2  3.097666394 -0.4136765136 1  2.890286451 #> 1628  5    8     2  2.147661117 -1.0927872091 0  2.177077263 #> 1629  5    9     2  3.586696802 -0.6164358429 1  3.387878492 #> 1630  5   10     2  2.783613703 -1.1862065853 0  3.071519967 #> 1631  5   11     2  2.413710043  1.0749450773 1  2.484300724 #> 1632  5   12     2  6.764169314 -2.2490510903 1  6.432870397 #> 1633  5   13     2  1.786869893  1.4414617561 0  1.555910025 #> 1634  5   14     2  0.678156667  0.3687420580 0  0.642576596 #> 1635  5   15     2  2.291578875  0.2768724589 1  2.794626863 #> 1636  5   16     2  1.783966444 -0.1632849322 0  1.975275125 #> 1637  5   17     2  2.338858322  0.5898359230 1  2.377354020 #> 1638  5   18     2  1.243604523  0.0965858341 0  1.423748628 #> 1639  5   19     2  1.241531304 -0.2112469186 0  1.104385321 #> 1640  5   20     2  2.945031062 -0.1624831319 1  2.927595835 #> 1641  5   21     2  1.873162924  1.0576641709 1  1.804799350 #> 1642  5   22     2  3.459962392 -0.6505126188 1  3.468711050 #> 1643  5   23     2  3.004873383 -0.1361368722 1  2.773317033 #> 1644  5   24     2  0.482968680  0.0735986090 0  0.090839406 #> 1645  5   25     2  2.533564370 -0.4785282105 1  2.581973374 #> 1646  5   26     2  1.608796268 -1.1680916221 0  1.427473427 #> 1647  5   27     2  1.941385231  0.3073900762 1  2.249363143 #> 1648  5   28     2  1.858235199  0.4236450456 1  1.653165083 #> 1649  5   29     2  0.310319135 -0.2951078307 0  0.109843919 #> 1650  5   30     2  2.847307306 -0.5236266979 1  3.098508130 #> 1651  6    1     2           NA  0.3011533622 0  0.100858666 #> 1652  6    2     2  0.175266666  0.2982275915 0 -0.077473924 #> 1653  6    3     2  0.621834406  1.6756969324 1  0.688756122 #> 1654  6    4     2 -0.957537480  1.5475810590 0 -1.018973558 #> 1655  6    5     2  1.627002140  0.7035239028 1  1.760778549 #> 1656  6    6     2  2.986599666 -0.2097931712 1  3.171997074 #> 1657  6    7     2  6.123440992 -2.6431489520 1  6.241876948 #> 1658  6    8     2  0.924177724  1.2100105104 0  0.821080598 #> 1659  6    9     2  1.576324286 -0.7347992519 0  1.595493535 #> 1660  6   10     2  3.037450558  0.1010791514 1  2.785827430 #> 1661  6   11     2  6.971908860 -2.6016996703 1  6.873161645 #> 1662  6   12     2  4.188708300  0.0315260046 0  4.057492642 #> 1663  6   13     2  1.198389467  1.1250718923 0  0.965979753 #> 1664  6   14     2  1.727296838  0.9678592099 1  1.992564997 #> 1665  6   15     2  2.349280352  0.8215067804 1  1.748782349 #> 1666  6   16     2 -0.322491135  2.5530261135 1 -0.398741205 #> 1667  6   17     2 -1.062422300  1.0966084717 0 -1.243935377 #> 1668  6   18     2  0.123371692  0.0697662309 0  0.090187707 #> 1669  6   19     2  0.452893229  0.1870511466 0  0.304185792 #> 1670  6   20     2  2.010610464 -0.9759266928 0  2.119589527 #> 1671  6   21     2  2.137601275  0.8251497278 1  2.270608134 #> 1672  6   22     2  5.460001166 -2.0186886591 1  5.462765820 #> 1673  6   23     2  2.491918122  0.8257908317 1  3.031629934 #> 1674  6   24     2 -0.473628916  1.0630177893 0 -0.290063217 #> 1675  6   25     2 -0.308191389  0.4387217506 0 -0.255384632 #> 1676  6   26     2  2.286889052 -0.1711126523 1  2.058993810 #> 1677  6   27     2  2.298637667  0.2638060136 1  2.451878672 #> 1678  6   28     2  0.497572625 -0.2018380447 0  0.355040854 #> 1679  6   29     2  2.014652564  0.5362428184 1  1.722045860 #> 1680  6   30     2  3.248967730 -1.1512213349 1  3.055582569 #> 1681  7    1     2           NA  0.1056761941 1  3.022104185 #> 1682  7    2     2  2.077107963  0.6365696740 1  2.055910950 #> 1683  7    3     2  2.789550309 -0.4411632169 1  2.967003529 #> 1684  7    4     2  2.720553784 -0.1331509643 1  2.800330659 #> 1685  7    5     2  0.821587247 -0.1056713340 0  0.788323885 #> 1686  7    6     2  1.987384664  0.3781677722 1  2.396762471 #> 1687  7    7     2  2.882779901 -0.0929410185 1  3.098144938 #> 1688  7    8     2  2.411777455  0.7409000113 1  2.668812770 #> 1689  7    9     2  3.316776589 -0.1318027930 1  3.393338137 #> 1690  7   10     2  1.060783893  0.5329892868 0  1.093863440 #> 1691  7   11     2  3.405751354 -0.4531978300 1  3.421389098 #> 1692  7   12     2  1.946625349  0.2055612084 0  2.053310858 #> 1693  7   13     2  2.332063064  0.8344015678 1  2.108926160 #> 1694  7   14     2  1.660504168  1.2765786815 1  1.739126254 #> 1695  7   15     2  1.489105052 -0.1941524093 0  1.851509719 #> 1696  7   16     2  5.831634464 -1.8602275742 1  5.822541133 #> 1697  7   17     2  0.664774058  1.4456622411 0  0.465610117 #> 1698  7   18     2  3.152140996 -1.8484727753 0  3.539276284 #> 1699  7   19     2  3.444509208  0.2275427286 1  3.881829904 #> 1700  7   20     2  5.162389995 -1.0891451909 1  5.067313416 #> 1701  7   21     2  3.986508125 -0.0701942243 1  3.807179482 #> 1702  7   22     2  2.841317376  0.3488349702 1  2.635644332 #> 1703  7   23     2  5.423429546 -2.1741246492 1  5.332999549 #> 1704  7   24     2  2.618944205  0.4260204867 1  2.915745587 #> 1705  7   25     2  1.418970235 -0.6791122705 0  1.211932662 #> 1706  7   26     2  1.050633876  1.3052615363 1  1.365926521 #> 1707  7   27     2  1.815049947  0.5084847916 1  1.974232311 #> 1708  7   28     2  0.206248288 -0.0768658984 0 -0.001635648 #> 1709  7   29     2  2.401498165 -0.2758904748 1  2.352680629 #> 1710  7   30     2  2.627330884  0.9147522410 1  2.680799332 #> 1711  8    1     2           NA -0.6407060083 1 -0.428615845 #> 1712  8    2     2  1.949461131 -0.4837806257 1  2.011674191 #> 1713  8    3     2  0.946019869 -0.7230659699 0  1.096189866 #> 1714  8    4     2  1.786306189 -1.7565273956 0  1.519444885 #> 1715  8    5     2  3.514131282 -1.2586486281 1  3.745340843 #> 1716  8    6     2  3.841476366 -0.9454088311 1  3.345610826 #> 1717  8    7     2  0.425953434  0.4302846964 0  0.684066387 #> 1718  8    8     2  0.752502093  1.7242622392 1  0.750975243 #> 1719  8    9     2  2.288676510  0.3100169866 1  2.394660844 #> 1720  8   10     2  2.511146029  0.5867353391 1  2.481019325 #> 1721  8   11     2  4.184083499 -0.6754822916 1  4.208841294 #> 1722  8   12     2  4.710363854 -0.1553453471 1  4.703960196 #> 1723  8   13     2  5.242722795 -0.2873407998 1  5.417760935 #> 1724  8   14     2  3.348894715 -0.2249612710 0  3.637277813 #> 1725  8   15     2  2.215752400  1.2145887945 1  2.413492795 #> 1726  8   16     2 -0.307476197  1.1310546518 0 -0.581707387 #> 1727  8   17     2  4.859146825 -1.9251452518 1  4.797526268 #> 1728  8   18     2  4.444190186 -1.6711270586 0  4.538173643 #> 1729  8   19     2  3.672347313 -1.2619004629 0  3.527386042 #> 1730  8   20     2  2.849358226  0.4577869579 1  2.623029058 #> 1731  8   21     2  3.592228576 -0.4536463741 1  3.713207248 #> 1732  8   22     2  2.198507293  0.7616395076 1  2.227958566 #> 1733  8   23     2  4.331836031 -1.4879261874 1  4.253492117 #> 1734  8   24     2  1.000597350  1.4330075108 1  1.243802590 #> 1735  8   25     2  4.038239380 -1.7029648351 1  4.268532761 #> 1736  8   26     2  1.975007112  0.8760961096 1  2.172244960 #> 1737  8   27     2  0.310330903 -0.1163584399 0  0.424825880 #> 1738  8   28     2  1.517973485  0.6873641133 1  1.653377917 #> 1739  8   29     2 -0.448132596  0.6823152451 0 -0.204850369 #> 1740  8   30     2  2.585571339  0.2380714916 1  2.112486402 #> 1741  9    1     2           NA -0.8497043460 1  1.145681218 #> 1742  9    2     2  1.943988459  0.5168620443 1  2.060451984 #> 1743  9    3     2  3.481934086 -1.2362731189 1  3.611234909 #> 1744  9    4     2  3.018383761 -0.3887798641 1  3.104076490 #> 1745  9    5     2  1.181263608  1.6844357081 1  0.940592347 #> 1746  9    6     2  1.480118125  0.8569230109 1  1.580796088 #> 1747  9    7     2 -0.030940151  0.5353988409 0 -0.002035771 #> 1748  9    8     2  2.288859001  0.0651539326 1  2.594268388 #> 1749  9    9     2  4.068239220 -1.0396803527 1  4.121756260 #> 1750  9   10     2  4.104132243 -0.3017466639 1  3.899953027 #> 1751  9   11     2  5.571010090 -1.2229261794 1  5.915908246 #> 1752  9   12     2  4.694331539  0.5682886208 1  4.433565492 #> 1753  9   13     2  4.226583044  0.3732414342 1  4.147687449 #> 1754  9   14     2  4.913724530 -0.3218925862 1  4.969679632 #> 1755  9   15     2  5.865122883 -0.9215160429 1  6.092338705 #> 1756  9   16     2  3.631140906 -0.5272342572 0  3.489168459 #> 1757  9   17     2  3.172704623  0.4127694972 1  3.195334402 #> 1758  9   18     2  3.754645746 -0.0775389668 1  3.835236782 #> 1759  9   19     2  3.437161042  0.2855895802 1  3.322878015 #> 1760  9   20     2  3.568662826 -0.0711267337 1  3.614633925 #> 1761  9   21     2 -0.548342976  1.5753077068 0 -0.320646125 #> 1762  9   22     2  3.632052113 -1.2887162354 1  3.634863633 #> 1763  9   23     2  4.341572725 -1.1619375576 1  4.398863271 #> 1764  9   24     2  2.913310364 -0.0076368704 1  2.877896868 #> 1765  9   25     2 -0.763360623  1.2651684352 0 -0.642107011 #> 1766  9   26     2  1.390736603  0.4637961416 1  1.542273722 #> 1767  9   27     2  1.498971415  0.9255460985 1  1.349542380 #> 1768  9   28     2 -0.015898164  0.1716315069 0  0.070331551 #> 1769  9   29     2  2.249148400 -0.1172907147 1  2.294627288 #> 1770  9   30     2  2.836323595 -0.2390677595 1  2.631366744 #> 1771 10    1     2           NA -1.0241287906 1 -0.243098210 #> 1772 10    2     2  1.853894317  0.3689645274 1  1.845338526 #> 1773 10    3     2  3.453307182 -1.2847157223 1  3.415391240 #> 1774 10    4     2  2.522503741  0.0892072231 1  2.671626886 #> 1775 10    5     2 -0.193861850  0.9113912918 0 -0.186934534 #> 1776 10    6     2  0.619542259 -0.4610383389 0  0.529066321 #> 1777 10    7     2  0.913516015 -0.5552783513 0  0.655498983 #> 1778 10    8     2  1.379643092  1.1250027458 1  1.248016943 #> 1779 10    9     2  2.911908188 -0.1843088688 1  3.226234221 #> 1780 10   10     2  3.369271425  0.0795019953 1  3.622796787 #> 1781 10   11     2  2.050557808  1.5466091542 1  1.914785204 #> 1782 10   12     2 -0.019155758  1.0106779645 0  0.150112460 #> 1783 10   13     2  1.867631963  0.4032903312 1  1.829617664 #> 1784 10   14     2 -0.825090852  1.4878378319 0 -0.887358328 #> 1785 10   15     2  1.675175787 -1.2084427204 0  1.765303631 #> 1786 10   16     2  0.689178965  1.6659909000 1  0.713818111 #> 1787 10   17     2  0.371207752  1.5933699514 1  0.277424068 #> 1788 10   18     2  3.286905385 -0.5810673806 1  3.547790179 #> 1789 10   19     2  1.377802656  1.7492473631 1  1.052654357 #> 1790 10   20     2  0.285558711  1.7791026669 1  0.380044556 #> 1791 10   21     2  4.898347858 -2.0054578182 1  4.868335599 #> 1792 10   22     2  1.698385937  1.4824027185 1  1.899864315 #> 1793 10   23     2  4.428699131 -1.5890896941 1  4.186120484 #> 1794 10   24     2 -0.556596955  1.1256676052 0 -0.423094959 #> 1795 10   25     2  1.461902585  0.3603572379 1  1.716701519 #> 1796 10   26     2  1.848086528  0.4771142454 1  1.800642044 #> 1797 10   27     2  1.712813018  0.6482297737 1  1.564769319 #> 1798 10   28     2  2.549473030 -0.8301085743 1  2.341021040 #> 1799 10   29     2  0.263553945 -0.3446758639 0  0.205609773 #> 1800 10   30     2  2.681717492  0.0692353265 1  2.473965339 #> 1801 11    1     2           NA  0.1176465971 1 -0.478543238 #> 1802 11    2     2  2.126039321 -0.2153805076 1  1.845366106 #> 1803 11    3     2  2.980124059 -0.5739734793 1  2.727937010 #> 1804 11    4     2 -0.068648555  0.8450130041 0  0.198378009 #> 1805 11    5     2  2.167756043  0.2374302725 1  2.233113146 #> 1806 11    6     2  0.264349636  2.4167733538 1  0.351792428 #> 1807 11    7     2  0.402876583  1.7795029098 1  0.465082022 #> 1808 11    8     2 -1.291575940  1.9754190540 0 -1.104607879 #> 1809 11    9     2  1.432799108  0.9672672602 1  1.298585289 #> 1810 11   10     2  1.972911600  0.9612641518 1  1.966557917 #> 1811 11   11     2  3.103608412 -1.4152819198 0  3.582249207 #> 1812 11   12     2  5.107250156 -0.5179824302 1  5.366516935 #> 1813 11   13     2  4.936926838 -1.0416732943 0  5.263842597 #> 1814 11   14     2  5.562961726 -1.6679280458 0  5.711074986 #> 1815 11   15     2  4.795240602 -1.2289861776 0  4.771647033 #> 1816 11   16     2  6.093716728 -1.1392006400 1  6.050091377 #> 1817 11   17     2  3.526390320 -0.4140158630 0  3.461478853 #> 1818 11   18     2  3.827387071  0.0547365251 1  3.850571492 #> 1819 11   19     2  4.182101843 -0.1640900041 1  3.962837714 #> 1820 11   20     2  1.147605997  0.5351379605 0  1.097999232 #> 1821 11   21     2  3.586744889 -0.6431947916 1  3.662140687 #> 1822 11   22     2  0.891903495  0.3851548237 0  1.171066353 #> 1823 11   23     2  1.876379316  0.4195830393 1  1.870576721 #> 1824 11   24     2  1.385324030  0.8830023110 1  1.178325128 #> 1825 11   25     2  3.023690078 -0.5836394406 1  2.937608154 #> 1826 11   26     2  3.177562949 -0.4914053002 1  3.062103470 #> 1827 11   27     2  0.708961525 -0.1502093742 0  0.419404059 #> 1828 11   28     2  2.342889373 -0.2901591198 1  2.432464613 #> 1829 11   29     2  2.100102308  0.1116204982 1  2.227757210 #> 1830 11   30     2  2.644200159  1.3259083426 1  2.885934394 #> 1831 12    1     2           NA -0.9474746142 1 -0.710417122 #> 1832 12    2     2  1.944592968  0.0652930335 1  1.877130021 #> 1833 12    3     2  1.774711784  0.6179858172 1  1.759789006 #> 1834 12    4     2  1.524540650  0.9625279685 1  2.007909574 #> 1835 12    5     2  1.457747472  1.2181086103 1  1.569199613 #> 1836 12    6     2  4.251083625 -1.6510488957 1  4.501533363 #> 1837 12    7     2  0.974519456  0.2864244196 0  0.781702796 #> 1838 12    8     2  2.848196613 -0.2814821150 1  3.055072341 #> 1839 12    9     2  3.392643940 -0.1082800912 1  2.966020532 #> 1840 12   10     2  2.936038690 -1.4564659171 0  2.671380225 #> 1841 12   11     2  3.175808164  0.3183902604 1  3.092213141 #> 1842 12   12     2  4.427004457 -0.2940953272 1  4.284924656 #> 1843 12   13     2  7.208432107 -1.7283045153 1  7.095562643 #> 1844 12   14     2  6.569129561 -0.4368299769 1  6.566440836 #> 1845 12   15     2  2.305211689  0.7422970242 0  2.598539978 #> 1846 12   16     2  3.265265912  0.1436232347 1  3.476017315 #> 1847 12   17     2  4.095383503 -0.2121505321 1  3.779509451 #> 1848 12   18     2  6.733514318 -2.1112083733 1  6.937739948 #> 1849 12   19     2  5.193528533 -0.1629267107 1  5.242251503 #> 1850 12   20     2  2.682341923 -0.3719448752 0  2.698440156 #> 1851 12   21     2  4.965417686 -1.4368434437 1  4.979191840 #> 1852 12   22     2 -0.011916461  1.3416402950 0 -0.242383956 #> 1853 12   23     2  1.235854472 -0.9929283498 0  1.219076741 #> 1854 12   24     2  1.462675505  0.6120834609 1  1.624147700 #> 1855 12   25     2  4.552494248 -1.9940787873 1  4.294265260 #> 1856 12   26     2  4.110661158 -1.3193853133 1  3.937380702 #> 1857 12   27     2 -0.136380190  1.0403770193 0 -0.142081642 #> 1858 12   28     2  2.826884906 -1.3191257242 1  2.749138011 #> 1859 12   29     2  2.236107535 -0.2834053150 1  2.349048730 #> 1860 12   30     2  2.969848484 -0.6981666346 1  2.931330481 #> 1861 13    1     2           NA -0.4905574437 1 -0.211244628 #> 1862 13    2     2  2.040162371 -0.0340672537 1  1.964347649 #> 1863 13    3     2 -0.588555271  1.1098481389 0 -0.384748019 #> 1864 13    4     2  1.469814342  0.6843094294 1  1.386224740 #> 1865 13    5     2  3.724380036 -1.3387742872 1  3.621573592 #> 1866 13    6     2  3.474528035 -0.4639872430 1  3.771304119 #> 1867 13    7     2  3.002587332  0.1263158585 1  2.855508307 #> 1868 13    8     2  4.409975139 -1.3229511128 1  4.239562380 #> 1869 13    9     2  4.283944318 -0.6984206676 1  4.270753061 #> 1870 13   10     2  4.725904484 -0.7817397115 1  4.642428416 #> 1871 13   11     2  3.473097704  0.8464362856 1  3.587746197 #> 1872 13   12     2  1.810304873  0.3978422088 0  1.745698465 #> 1873 13   13     2  2.485536495  0.6418300277 1  2.870533862 #> 1874 13   14     2  3.247637206  0.4574620794 1  3.593126593 #> 1875 13   15     2  2.191854165 -0.0829199423 0  2.048333565 #> 1876 13   16     2  2.890069294 -1.0995509417 0  3.010070006 #> 1877 13   17     2  3.709389026 -0.0365372222 1  3.634684524 #> 1878 13   18     2  3.929933176 -1.4986982545 0  3.855345251 #> 1879 13   19     2  2.061748450  1.3985720063 1  1.932605725 #> 1880 13   20     2  4.454349864 -1.0255422485 1  3.935054380 #> 1881 13   21     2  1.831523148  1.3953134389 1  1.816196897 #> 1882 13   22     2  3.903696734 -0.9571704712 1  4.029602296 #> 1883 13   23     2  5.792326970 -2.1645470853 1  5.733825052 #> 1884 13   24     2  2.762439578  0.4147007068 1  2.711618747 #> 1885 13   25     2 -1.419361036  1.9022097714 0 -1.352296430 #> 1886 13   26     2  0.554958976  1.2954257908 1  0.571076697 #> 1887 13   27     2  1.883510586  0.2925586849 1  2.114426736 #> 1888 13   28     2  2.771267598 -0.9670319027 1  2.896752984 #> 1889 13   29     2  0.510158218 -0.5910171645 0  0.545245811 #> 1890 13   30     2  2.978978918 -0.7494084445 1  2.930446699 #> 1891 14    1     2           NA -0.2560921922 1  1.641784471 #> 1892 14    2     2  1.770081816  2.1284518990 1  1.766273151 #> 1893 14    3     2  1.727665835  0.7075883538 1  1.666752499 #> 1894 14    4     2  3.697761431 -1.3952743498 1  3.769974415 #> 1895 14    5     2  2.309285165  0.6608202978 1  2.196038201 #> 1896 14    6     2  1.855005250  0.8253798628 1  1.472755020 #> 1897 14    7     2  1.179629122  1.2722667795 1  0.982327760 #> 1898 14    8     2  0.937199066 -0.2393515671 0  0.993337541 #> 1899 14    9     2  3.046359493 -0.2759451684 1  3.110890711 #> 1900 14   10     2  1.228947484  0.3204023143 0  0.973104533 #> 1901 14   11     2  2.634391394  0.1781901884 1  2.170241162 #> 1902 14   12     2  4.350950675 -0.5502237415 1  4.453769005 #> 1903 14   13     2  7.068488580 -1.5293105312 1  6.712950111 #> 1904 14   14     2  6.149109157 -1.6177737654 0  6.145593274 #> 1905 14   15     2  4.084740825  0.7898179218 1  4.232926926 #> 1906 14   16     2  2.898590933  0.9035164264 1  2.572192862 #> 1907 14   17     2  2.974061231  0.3650187514 1  3.194480550 #> 1908 14   18     2  3.240442479 -1.1014834389 0  3.199120265 #> 1909 14   19     2  0.514180556  0.8983962407 0  0.286807054 #> 1910 14   20     2  1.336170219 -0.5824016746 0  1.332989954 #> 1911 14   21     2  1.056236998 -0.1907034326 0  1.126239265 #> 1912 14   22     2  0.393477466  0.1667812884 0  0.417321336 #> 1913 14   23     2  2.976962077 -0.6375687651 1  3.323694884 #> 1914 14   24     2  3.103266140 -0.2798823971 1  3.376918940 #> 1915 14   25     2 -0.925135753  3.3903708213 1 -0.849651674 #> 1916 14   26     2  1.192644910 -1.4202194917 0  1.265949757 #> 1917 14   27     2 -0.243339345  0.6687513994 0 -0.046682017 #> 1918 14   28     2  0.196863897 -0.1446110701 0 -0.101025883 #> 1919 14   29     2  2.484968765 -0.3159369312 1  2.342796362 #> 1920 14   30     2  1.034697763 -0.6196150527 0  0.980781509 #> 1921 15    1     2           NA  1.8438620052 0  0.301846721 #> 1922 15    2     2  0.138575032 -0.7413360963 0  0.495252865 #> 1923 15    3     2  0.393835003 -0.3636572971 0  0.081746629 #> 1924 15    4     2  1.309682051  0.8496430456 1  1.067041408 #> 1925 15    5     2  2.843804587 -0.5229123763 1  2.712106652 #> 1926 15    6     2  2.189630192  0.5101325469 1  2.243000103 #> 1927 15    7     2  1.526964215 -0.7184662213 0  1.438761680 #> 1928 15    8     2  0.924457354 -0.2140412400 0  0.674679057 #> 1929 15    9     2 -0.353215703  1.1146485454 0 -0.547628510 #> 1930 15   10     2  2.604789322 -0.4447819783 1  2.742100485 #> 1931 15   11     2  4.616732686 -0.8752554775 1  4.499200885 #> 1932 15   12     2  2.621780379  0.0912673835 0  2.775975748 #> 1933 15   13     2  3.870003556  0.0016836885 1  4.103435953 #> 1934 15   14     2  2.049551462  0.2796278624 0  1.630500930 #> 1935 15   15     2  3.471167915 -0.2677064216 1  3.589473495 #> 1936 15   16     2  1.711633309  1.4837794887 1  1.791492550 #> 1937 15   17     2  2.143119955  0.6651598757 1  1.941862547 #> 1938 15   18     2  1.844844134  0.9860582211 1  1.804358312 #> 1939 15   19     2  5.227133572 -1.6484948184 1  5.111800381 #> 1940 15   20     2  3.613984890  0.3428883929 1  3.508261291 #> 1941 15   21     2  4.027819891 -0.5246711995 1  3.904585504 #> 1942 15   22     2  3.361766974 -0.1000139589 1  3.362658354 #> 1943 15   23     2  3.286127490 -0.3906352515 1  2.975793986 #> 1944 15   24     2  2.714692725 -0.1090375092 1  2.571090473 #> 1945 15   25     2  2.298515193  0.2074804074 1  2.791354140 #> 1946 15   26     2  3.401008711 -0.9388959197 1  3.524172544 #> 1947 15   27     2  2.927666562 -0.5941776416 1  3.144103270 #> 1948 15   28     2  1.267677788 -1.7981325564 0  1.403434919 #> 1949 15   29     2  0.112049839 -0.0081521523 0  0.220362779 #> 1950 15   30     2  3.063747455 -1.5849912682 1  2.852695037 #> 1951 16    1     2           NA -0.6519499017 1  0.487329123 #> 1952 16    2     2  2.464188985 -1.0959962671 1  2.357684577 #> 1953 16    3     2  2.614910342  0.0597499374 1  2.646066711 #> 1954 16    4     2  3.178413655 -0.4465572164 1  2.999906565 #> 1955 16    5     2  2.339527224  0.6837455219 1  2.376575775 #> 1956 16    6     2  3.542023945 -0.5894810385 1  3.598665235 #> 1957 16    7     2  3.796888977 -0.4503386239 1  4.047490557 #> 1958 16    8     2  3.442548442  0.1516805045 1  3.552219136 #> 1959 16    9     2  3.172045198  0.5500439612 1  3.337472839 #> 1960 16   10     2  2.388449115  1.3700039940 1  2.901271922 #> 1961 16   11     2  0.782744047  0.9411658067 0  0.893628678 #> 1962 16   12     2  5.793392713 -1.9617075989 1  5.642701283 #> 1963 16   13     2  3.340490634  0.2502478213 0  3.339448062 #> 1964 16   14     2  1.637589096  1.8778640211 1  1.521178197 #> 1965 16   15     2  2.175418992 -0.5918921022 0  2.375538626 #> 1966 16   16     2 -1.146990615  1.9507210064 0 -1.095355089 #> 1967 16   17     2 -1.613993453  1.3178208837 0 -1.853402656 #> 1968 16   18     2  1.492234252 -1.0984900071 0  1.282890679 #> 1969 16   19     2  2.845375373  0.2285569733 1  2.716720231 #> 1970 16   20     2  4.138211762 -0.4509346471 1  4.217960493 #> 1971 16   21     2 -0.144306578  3.1840444741 1 -0.392473088 #> 1972 16   22     2  1.399679458  0.7685074319 1  1.344661764 #> 1973 16   23     2  1.480979838  0.8567854738 1  1.463797299 #> 1974 16   24     2  2.229471003  0.2293954957 1  1.806331832 #> 1975 16   25     2 -0.271608814  0.8498066475 0 -0.014859892 #> 1976 16   26     2  1.638842566  0.6289649925 1  1.565840376 #> 1977 16   27     2  1.289696103  1.5804318370 1  1.405650328 #> 1978 16   28     2  3.363571559 -1.6885424746 1  3.335212109 #> 1979 16   29     2  0.123880650  0.2074951407 0 -0.007513032 #> 1980 16   30     2  0.836834183  0.8196281375 0  0.764720098 #> 1981 17    1     2           NA  0.2353865723 0  0.838735792 #> 1982 17    2     2  0.076533004  0.0377883992 0  0.191608243 #> 1983 17    3     2  2.670107145 -0.7045964637 1  2.836624491 #> 1984 17    4     2  0.445438594  0.1748027002 0  0.653172813 #> 1985 17    5     2  0.428591382 -0.0608219547 0  0.306873124 #> 1986 17    6     2  1.347174117 -0.9967807422 0  1.705717923 #> 1987 17    7     2 -2.054698466  2.3974524800 0 -2.193663792 #> 1988 17    8     2  0.192590894  1.7123049773 1  0.121438359 #> 1989 17    9     2  1.411183523  1.2366758001 1  1.596277213 #> 1990 17   10     2  0.286924809  0.6732538634 0  0.180485342 #> 1991 17   11     2  0.259641585  0.1705880818 0  0.353068387 #> 1992 17   12     2  4.127496675 -1.1198997214 1  3.984045736 #> 1993 17   13     2  3.751018734  0.5638673903 1  3.722570306 #> 1994 17   14     2  4.288134103 -0.0040606534 1  4.025459778 #> 1995 17   15     2  4.715284859 -0.3683525751 1  4.721923734 #> 1996 17   16     2  3.197360816  0.7976006576 1  3.231237734 #> 1997 17   17     2  3.839335383 -0.0954875904 1  3.857280417 #> 1998 17   18     2  5.012464698 -0.7995139536 1  5.463013161 #> 1999 17   19     2  2.274223243  1.6535472347 1  2.514261858 #> 2000 17   20     2  2.548064101  0.5142301202 1  2.888844778 #> 2001 17   21     2  3.285573039 -0.0500372679 1  3.463829304 #> 2002 17   22     2  3.860075910 -0.5758595679 1  3.676885378 #> 2003 17   23     2  4.316719353 -1.1037521360 1  4.640561008 #> 2004 17   24     2  2.935400184  0.0488888907 1  3.102241922 #> 2005 17   25     2  1.343187630  1.2245603121 1  1.294413427 #> 2006 17   26     2  3.427073050 -1.2621945494 1  3.525196361 #> 2007 17   27     2  2.542420497 -0.0039889443 1  2.516307109 #> 2008 17   28     2  1.487763575  1.1025651994 1  1.379699687 #> 2009 17   29     2 -0.895846041  1.5324236216 0 -0.575068235 #> 2010 17   30     2  0.729572741  0.1923696467 0  0.978592497 #> 2011 18    1     2           NA  0.0779608496 1  2.071741513 #> 2012 18    2     2  1.874114576  0.3104807494 1  1.857768347 #> 2013 18    3     2  2.801010398 -0.7172181616 1  2.728081877 #> 2014 18    4     2  2.289544824  0.0745511772 1  2.138159274 #> 2015 18    5     2 -0.161523650  0.6329607130 0  0.089484971 #> 2016 18    6     2 -0.088517482  0.1444757047 0 -0.102025046 #> 2017 18    7     2  1.968998333  0.0111291872 1  2.008031701 #> 2018 18    8     2  1.014098036 -0.3261438925 0  0.976781721 #> 2019 18    9     2  2.417279748  0.1390978572 1  2.489165776 #> 2020 18   10     2  1.010467355  0.0721667524 0  0.985810670 #> 2021 18   11     2  3.894159027 -1.0634979064 1  3.961389858 #> 2022 18   12     2  6.103496934 -1.3277554756 1  6.212309452 #> 2023 18   13     2  5.275418786  0.1894262375 1  5.260302609 #> 2024 18   14     2  5.237590431 -0.2784540250 1  4.837006811 #> 2025 18   15     2  6.941610834 -1.8526168242 1  6.980944689 #> 2026 18   16     2  2.415273563  1.8432662546 1  2.432770913 #> 2027 18   17     2  0.932828962  0.1962780455 0  1.045285564 #> 2028 18   18     2  2.560838006  0.0798738187 1  2.431079292 #> 2029 18   19     2  1.275077135  1.4152763499 1  1.137069591 #> 2030 18   20     2  3.013597671 -0.3343380522 1  2.921649866 #> 2031 18   21     2  3.587737302 -0.4437493119 1  3.720244429 #> 2032 18   22     2  3.045884304 -0.0100976720 1  3.137863821 #> 2033 18   23     2  1.101338815  1.1612892557 1  1.044611601 #> 2034 18   24     2  0.812766079  0.9432244684 1  0.549582742 #> 2035 18   25     2  2.704737334 -0.7018044335 1  2.493005577 #> 2036 18   26     2  2.825502820 -0.5518704133 1  2.322867854 #> 2037 18   27     2  1.518719792  0.8478427689 1  1.430312510 #> 2038 18   28     2  2.254971192 -0.5766189242 1  2.290170663 #> 2039 18   29     2  2.803014537 -1.3579978310 1  2.710422679 #> 2040 18   30     2  0.611568284  0.2071719742 0  0.686783445 #> 2041 19    1     2           NA -0.9618566341 1  0.775618842 #> 2042 19    2     2 -0.031722277  0.4365234789 0 -0.135926899 #> 2043 19    3     2 -0.860499875  0.8846504990 0 -0.678071348 #> 2044 19    4     2  1.580998832  0.4281667650 1  1.786451002 #> 2045 19    5     2  1.289415308  1.3355176151 1  1.448957290 #> 2046 19    6     2  0.522168758 -0.0143074132 0  0.856978333 #> 2047 19    7     2  0.545322908  1.6335684214 1  0.728988578 #> 2048 19    8     2  2.170672420  0.3730046558 1  2.148104617 #> 2049 19    9     2  2.660939562  0.4102750965 1  2.720378428 #> 2050 19   10     2  2.876853942 -1.5077573175 0  2.998676399 #> 2051 19   11     2  3.396162325 -1.3880490476 0  3.403829026 #> 2052 19   12     2  3.357651745 -0.8536236967 0  3.068515873 #> 2053 19   13     2  3.125073484 -0.7328538063 0  3.437243572 #> 2054 19   14     2  3.430981017  0.4749117140 1  3.559906566 #> 2055 19   15     2  5.596601769 -1.1696152604 1  5.864572177 #> 2056 19   16     2  2.987411152  1.2464239087 1  3.030252780 #> 2057 19   17     2 -1.945889230  2.4879978772 0 -1.562994549 #> 2058 19   18     2  0.304303836 -0.3227463618 0  0.289248540 #> 2059 19   19     2  1.971139668  0.4199516038 1  1.752528650 #> 2060 19   20     2  3.088038262 -0.1055599088 1  3.337717122 #> 2061 19   21     2  2.952729666  0.2998652501 1  3.237240592 #> 2062 19   22     2  5.215135523 -1.7786591487 1  4.768469828 #> 2063 19   23     2  2.642175153  0.3983627156 1  2.830445800 #> 2064 19   24     2  2.697946504 -0.1093171232 1  2.662006792 #> 2065 19   25     2  0.972097113 -0.3511962296 0  1.168046018 #> 2066 19   26     2  3.295616371 -1.1827995068 1  3.402614460 #> 2067 19   27     2  0.586430140 -0.1001165259 0  0.665776861 #> 2068 19   28     2  3.166782126 -1.8516917296 1  3.256093902 #> 2069 19   29     2  2.123030552 -0.1996190506 1  2.274342063 #> 2070 19   30     2  2.800586854 -0.0433473543 1  3.005001569 #> 2071 20    1     2           NA -0.0713080861 1 -1.427111353 #> 2072 20    2     2  2.072803617 -0.4583653327 1  2.078818744 #> 2073 20    3     2  3.392162406 -1.0155925786 1  3.540753332 #> 2074 20    4     2  2.742478092  0.0246749828 1  2.425098742 #> 2075 20    5     2  2.702474906  0.0072900903 1  2.526145178 #> 2076 20    6     2  2.690764196 -1.7902812373 0  2.584246143 #> 2077 20    7     2  4.509367935 -1.4385066449 1  4.694977468 #> 2078 20    8     2  3.811405898 -0.2276840649 1  3.502254970 #> 2079 20    9     2  3.991449699 -0.5584569123 1  3.741714412 #> 2080 20   10     2  3.745558173  0.0261002253 1  4.207689549 #> 2081 20   11     2  1.800266804  2.0867174345 1  1.392179171 #> 2082 20   12     2  4.158748152 -0.6933045279 1  3.839355500 #> 2083 20   13     2  3.135671537  0.9863658599 1  3.364322556 #> 2084 20   14     2  4.574459200 -0.2790721708 1  4.593655939 #> 2085 20   15     2  4.560494366 -1.4420346464 0  4.606931184 #> 2086 20   16     2  4.549079630 -0.1318749118 1  4.425437545 #> 2087 20   17     2  3.619917238  0.4310989281 1  4.043984795 #> 2088 20   18     2  3.887221312  0.1464171787 1  4.011484064 #> 2089 20   19     2  1.064092678  0.7212208071 0  0.687971627 #> 2090 20   20     2  1.691166880 -0.7305096728 0  1.520897801 #> 2091 20   21     2  4.842954777 -1.5684246208 1  5.021885784 #> 2092 20   22     2  4.605426998 -0.7776214429 1  4.661008193 #> 2093 20   23     2  2.763982000  0.3623521576 1  3.145323555 #> 2094 20   24     2  2.821788455 -0.0703769216 1  2.918932641 #> 2095 20   25     2  2.640574778 -1.7271210366 0  2.895925331 #> 2096 20   26     2  2.107666015  0.6206635577 1  1.798757799 #> 2097 20   27     2  0.558493151 -0.2796299070 0  0.423089873 #> 2098 20   28     2  0.221019087 -0.1128632394 0  0.074750868 #> 2099 20   29     2 -0.129770212  0.6315231278 0 -0.045826471 #> 2100 20   30     2  2.941410051 -0.5101604414 1  2.575135379 #> 2101 21    1     2           NA  1.4445508584 1 -1.033511335 #> 2102 21    2     2  2.076884846 -1.0633261340 1  1.839926355 #> 2103 21    3     2  0.484701407  1.9552939655 1  0.697085271 #> 2104 21    4     2  3.673870830 -1.6674750976 1  3.464059881 #> 2105 21    5     2  1.824823203  1.0175586370 1  1.900393453 #> 2106 21    6     2  2.508697799  0.0345510671 1  2.391162601 #> 2107 21    7     2  2.930782544 -0.1905168020 1  2.834442444 #> 2108 21    8     2  2.992091258  0.0204507085 1  3.281776717 #> 2109 21    9     2  2.762493762  0.6053706689 1  2.613047265 #> 2110 21   10     2  3.569101553 -0.3164158682 1  3.064417782 #> 2111 21   11     2  2.535996997 -0.6785031454 0  2.280400552 #> 2112 21   12     2  3.019687380  0.3823051425 1  3.108845356 #> 2113 21   13     2  1.531557462  1.7386337669 1  1.161799968 #> 2114 21   14     2 -0.181419266  0.8134003741 0 -0.412397737 #> 2115 21   15     2 -1.263057172  1.0543222720 0 -1.092725731 #> 2116 21   16     2  1.240406029  0.4770372383 1  1.038553694 #> 2117 21   17     2  2.519974367  0.1887531093 1  2.668876836 #> 2118 21   18     2  0.342036795  2.3050619820 1  0.228653878 #> 2119 21   19     2  2.070092556 -1.1969352122 0  1.601446992 #> 2120 21   20     2  0.313881940  1.9050435849 1  0.267503222 #> 2121 21   21     2  1.733467134  0.4903026427 1  1.739358429 #> 2122 21   22     2  2.477963041  0.1250338837 1  2.719464033 #> 2123 21   23     2  3.703179199 -0.8525256703 1  3.308128541 #> 2124 21   24     2  1.270116427 -0.4843190876 0  1.614715702 #> 2125 21   25     2  3.116090150 -0.7365782323 1  2.822076034 #> 2126 21   26     2  2.121705019  0.4463130166 1  2.277056586 #> 2127 21   27     2  1.701282859  0.7844382453 1  1.626236349 #> 2128 21   28     2  1.250170253  1.3210692672 1  0.972270670 #> 2129 21   29     2  0.885924491  1.7620209034 1  0.982384827 #> 2130 21   30     2  2.906492921 -0.8234186138 1  2.823185238 #> 2131 22    1     2           NA  0.4515040531 1 -1.589455114 #> 2132 22    2     2  1.692398274  1.2631851761 1  2.169889755 #> 2133 22    3     2  0.528125121 -0.0903195940 0  0.364448913 #> 2134 22    4     2  1.519670865  0.7364959648 1  1.518702329 #> 2135 22    5     2  1.608545027 -1.1884340351 0  1.543213354 #> 2136 22    6     2  2.348736804  0.1902303157 1  2.330951514 #> 2137 22    7     2  0.376501840  0.3784239036 0  0.214545310 #> 2138 22    8     2  2.150692702  0.3140576635 1  2.336179797 #> 2139 22    9     2  3.575792057 -0.5063335422 1  3.613208396 #> 2140 22   10     2  3.775220990 -0.1023465135 1  3.669688308 #> 2141 22   11     2  6.288205006 -1.8555716539 1  6.243507144 #> 2142 22   12     2  4.351935552  0.9821130025 1  3.997678131 #> 2143 22   13     2  3.315223309  0.8811788089 1  3.968787218 #> 2144 22   14     2  3.126158546  0.9044354644 1  2.849453739 #> 2145 22   15     2  4.530221605 -0.5973300914 1  4.664853728 #> 2146 22   16     2  5.716080797 -0.9719942115 1  5.832991891 #> 2147 22   17     2  6.650830204 -1.3422431253 1  6.717373992 #> 2148 22   18     2  6.550758175 -1.1246036713 1  6.751046025 #> 2149 22   19     2  4.537376283  0.3001315669 1  4.200470556 #> 2150 22   20     2  3.379023749  0.3326217315 1  3.170713453 #> 2151 22   21     2  1.470413900 -0.0961632011 0  1.228321206 #> 2152 22   22     2  3.412305421 -0.7063214924 1  3.659235998 #> 2153 22   23     2 -1.535750493  1.9536678799 0 -1.615113922 #> 2154 22   24     2 -0.185678345 -0.1383363285 0 -0.324142940 #> 2155 22   25     2  1.280032949  0.6224097829 1  1.062395747 #> 2156 22   26     2  1.844387748  0.4218846933 1  2.077425782 #> 2157 22   27     2  3.478300412 -1.5846166446 1  3.267022396 #> 2158 22   28     2  1.808143760  0.6622542969 1  1.684616706 #> 2159 22   29     2  1.833538869  0.4260143626 1  1.723119524 #> 2160 22   30     2  2.637700963  0.8518564033 1  2.627716754 #> 2161 23    1     2           NA  0.0412329220 0 -2.848546770 #> 2162 23    2     2  1.773684222 -0.3496503880 1  1.752247321 #> 2163 23    3     2  0.031772137  0.2145388266 0  0.030778331 #> 2164 23    4     2  1.646374636  0.3860265683 1  1.569217149 #> 2165 23    5     2  3.032420685 -0.7216044404 1  3.155400971 #> 2166 23    6     2  2.554042089  0.1747263970 1  2.334110005 #> 2167 23    7     2  2.304835183  0.3000385452 1  2.286853436 #> 2168 23    8     2  1.521797405  1.3282146960 1  1.609885731 #> 2169 23    9     2  2.087499758 -1.4205655047 0  2.292098354 #> 2170 23   10     2  4.278903483 -1.1815592271 1  4.042707627 #> 2171 23   11     2  1.445801507  0.5332593628 0  1.626751603 #> 2172 23   12     2  4.136927648 -0.7273835291 1  3.907422263 #> 2173 23   13     2  5.227878568 -1.9436509013 0  5.690122802 #> 2174 23   14     2  5.130955694  0.0026916612 1  5.064607780 #> 2175 23   15     2  3.436689092  0.7894598528 1  3.521373659 #> 2176 23   16     2  3.993883396 -0.1852021694 1  3.822115703 #> 2177 23   17     2  1.832360003  0.0028560476 0  2.239998415 #> 2178 23   18     2  3.614100616 -0.3054696399 1  3.494428782 #> 2179 23   19     2  4.859335267 -0.9544489352 1  4.772802607 #> 2180 23   20     2  3.575071995  0.2306336405 1  3.755576775 #> 2181 23   21     2  2.780600682  0.4685251225 1  2.858249268 #> 2182 23   22     2  2.929846063 -0.0435694858 1  2.429124269 #> 2183 23   23     2  2.695793079 -0.1642708321 1  2.516964763 #> 2184 23   24     2  2.487999880 -0.0687656423 1  2.744999957 #> 2185 23   25     2  0.834186355 -0.2907159892 0  1.172511965 #> 2186 23   26     2  1.713620241  0.4424647721 1  1.322015459 #> 2187 23   27     2  1.708432350  0.4783661478 1  1.596271245 #> 2188 23   28     2 -0.250413025  0.4413831984 0 -0.235353355 #> 2189 23   29     2  2.114174605 -0.0137534165 1  1.903526389 #> 2190 23   30     2  3.000671832 -1.4261846729 1  2.818656165 #> 2191 24    1     2           NA -0.4224968323 0  1.290733928 #> 2192 24    2     2  2.118216771 -0.8655128627 1  2.288057725 #> 2193 24    3     2  2.981714282 -0.7385277047 1  2.728620081 #> 2194 24    4     2  2.674991838 -0.2656516253 1  2.309790411 #> 2195 24    5     2  1.114350575  1.5192177114 1  1.154582069 #> 2196 24    6     2  1.452747741 -1.0550170426 0  1.497020300 #> 2197 24    7     2  3.568679003 -1.0056362595 1  3.515922684 #> 2198 24    8     2  2.991228709  0.1213183775 1  3.038357804 #> 2199 24    9     2  3.057727747  0.1279929657 1  3.003768684 #> 2200 24   10     2  2.807874010  0.4986580438 1  2.845931149 #> 2201 24   11     2  3.145269772  0.3102302561 1  3.398532306 #> 2202 24   12     2  3.457250159 -0.9968389824 0  3.456560799 #> 2203 24   13     2  2.139766981  1.3995761854 1  2.097335116 #> 2204 24   14     2  5.033727590 -1.1766921577 1  4.761824719 #> 2205 24   15     2  2.283723836  1.5164906017 1  2.507725624 #> 2206 24   16     2 -0.404540086  1.2209637083 0 -0.464594392 #> 2207 24   17     2  2.457247467 -0.2213261532 1  2.491027635 #> 2208 24   18     2  3.988043320 -0.5167594497 1  4.025599212 #> 2209 24   19     2  4.396822980 -0.4580180681 1  4.285798855 #> 2210 24   20     2  4.006631626 -1.6918624149 0  4.434420533 #> 2211 24   21     2  4.812077640 -0.9823706359 1  4.909855924 #> 2212 24   22     2  4.004876462 -0.4679259739 1  4.262650618 #> 2213 24   23     2  5.251351981 -1.8248975842 1  5.456776809 #> 2214 24   24     2  5.944166881 -2.3137357739 1  5.733950647 #> 2215 24   25     2  1.389818626 -0.2142115342 0  1.798772857 #> 2216 24   26     2  1.736567267  0.5572457464 1  1.988073597 #> 2217 24   27     2  1.874652744  0.3935663730 1  1.767085810 #> 2218 24   28     2 -0.699566280  1.1837459123 0 -0.904679485 #> 2219 24   29     2  2.350875500 -0.3075569096 1  2.496395032 #> 2220 24   30     2  2.607834526  0.4402989420 1  2.655353903 #> 2221 25    1     2           NA -2.0532472215 0 -0.493723874 #> 2222 25    2     2  1.976207016 -0.2362795689 1  1.972207329 #> 2223 25    3     2  2.852366105 -0.5743886898 1  2.683492245 #> 2224 25    4     2  2.403263553  0.1181445110 1  2.424548819 #> 2225 25    5     2  2.252700877  0.3773879730 1  2.246276361 #> 2226 25    6     2  2.135306827  0.4761332783 1  2.314355110 #> 2227 25    7     2  0.718973360  0.0192592746 0  0.935924813 #> 2228 25    8     2  1.876994258  0.7128423200 1  1.994553941 #> 2229 25    9     2  1.237135683  1.9458512177 1  0.955075416 #> 2230 25   10     2  3.742531309 -1.0389564403 1  3.627609079 #> 2231 25   11     2  5.602656200 -1.3538343357 1  5.562391321 #> 2232 25   12     2  6.712253221 -1.0416888590 1  6.681169923 #> 2233 25   13     2  6.039668958 -0.0560559462 1  6.019693915 #> 2234 25   14     2  7.259350763 -1.3182207275 1  7.407475906 #> 2235 25   15     2  5.918052674 -0.1917748091 1  5.894224875 #> 2236 25   16     2  3.995318023  0.5412841435 1  3.833058431 #> 2237 25   17     2  1.934617595 -0.0110458298 0  1.855671286 #> 2238 25   18     2  1.111069339  1.5123954268 1  0.992149868 #> 2239 25   19     2  1.539484305  0.9356036838 1  1.215189372 #> 2240 25   20     2  1.868303992  0.6597918995 1  2.172369343 #> 2241 25   21     2  2.270126845 -1.0229838421 0  2.267650415 #> 2242 25   22     2  2.060446584  0.6069301362 1  1.943605073 #> 2243 25   23     2  2.705419649 -0.2038564714 1  2.542782506 #> 2244 25   24     2  4.191483100 -1.3648316972 1  4.517056230 #> 2245 25   25     2  3.073365321 -0.1125595515 1  3.098932042 #> 2246 25   26     2  2.019998990  0.6393564920 1  1.866720611 #> 2247 25   27     2  2.225703999 -2.6953293691 0  2.404285404 #> 2248 25   28     2  2.582971224 -0.7715014411 1  2.648557046 #> 2249 25   29     2  1.726990540  0.4143081641 1  1.396355236 #> 2250 25   30     2  2.927869396 -0.7926116508 1  3.237294967 #> 2251 26    1     2           NA  1.1313372134 0  0.394970678 #> 2252 26    2     2  1.884083279 -0.1971758943 1  2.328691773 #> 2253 26    3     2  1.489491983 -1.3170161323 0  1.863774569 #> 2254 26    4     2  0.139468963  0.1340386454 0  0.222564336 #> 2255 26    5     2  3.958396184 -2.0522228204 1  3.927624317 #> 2256 26    6     2 -0.580694209  1.3785701370 0 -0.387357308 #> 2257 26    7     2  1.170373994 -1.0774206531 0  0.886974749 #> 2258 26    8     2 -0.313760546  0.7788600298 0 -0.205542322 #> 2259 26    9     2 -0.444797931  0.8009143396 0 -0.026344046 #> 2260 26   10     2  2.428615694 -0.2262219814 1  2.249833490 #> 2261 26   11     2  3.580179161 -1.9429564136 0  3.541122353 #> 2262 26   12     2  2.676664853 -0.4145887264 0  2.326316097 #> 2263 26   13     2  0.765701788  0.5249142793 0  0.605709146 #> 2264 26   14     2  3.404692612 -0.5929973657 1  3.508110587 #> 2265 26   15     2  3.393953894  0.2838789064 1  3.669138763 #> 2266 26   16     2  3.074254585  0.4573573316 1  2.957322624 #> 2267 26   17     2  4.237618675 -0.5754176413 1  4.308346790 #> 2268 26   18     2  4.961230344 -0.7694849229 1  4.775235103 #> 2269 26   19     2  3.530956561 -1.1368931117 0  3.989694594 #> 2270 26   20     2  4.928074876 -1.0236235889 1  4.810012868 #> 2271 26   21     2  4.507811960 -0.6934146633 1  4.829779633 #> 2272 26   22     2  1.953627244  1.1684883087 1  2.009580953 #> 2273 26   23     2  4.782301150 -1.9344440707 1  4.862253692 #> 2274 26   24     2  2.953789422 -0.0724869100 1  3.048628984 #> 2275 26   25     2  4.539846046 -1.8636669825 1  4.230837194 #> 2276 26   26     2  4.517357198 -1.9686615567 1  4.382825491 #> 2277 26   27     2  2.226889331  0.3683773285 1  2.214127125 #> 2278 26   28     2  1.517547495  0.7296891914 1  1.855691607 #> 2279 26   29     2  1.240396661  0.9890579202 1  1.355149532 #> 2280 26   30     2  2.554208755  0.2823102145 1  2.325596505 #> 2281 27    1     2           NA -1.4606400709 0  1.181617853 #> 2282 27    2     2  0.026175382  1.1099202897 0  0.166619837 #> 2283 27    3     2  2.309801893 -0.1829253884 1  2.630112311 #> 2284 27    4     2  2.468448313  0.2210194686 1  2.453704199 #> 2285 27    5     2  4.005777404 -1.3640374521 1  3.717866245 #> 2286 27    6     2  0.644369912  0.4562364032 0  0.744338903 #> 2287 27    7     2  1.708982958  0.7127033252 1  1.643316516 #> 2288 27    8     2  2.016407747  0.9147732709 1  2.264268032 #> 2289 27    9     2  2.173540602  1.1652533899 1  2.150408103 #> 2290 27   10     2  2.878051840  0.3814258295 1  3.215109686 #> 2291 27   11     2  4.080021215 -0.1163025172 1  4.046031707 #> 2292 27   12     2  4.982510252 -0.2390290682 1  5.059313685 #> 2293 27   13     2  4.364616245  0.6220332359 1  4.315941736 #> 2294 27   14     2  3.560703775  0.7973805005 1  3.229275631 #> 2295 27   15     2  4.443221996 -1.7510675194 0  4.300545102 #> 2296 27   16     2  3.798069542 -1.0381310397 0  3.728188422 #> 2297 27   17     2  5.003588142 -0.6868156524 1  4.676878493 #> 2298 27   18     2  4.487551513 -0.0820869038 1  4.368678078 #> 2299 27   19     2  3.819638629  0.2669182509 1  4.135424989 #> 2300 27   20     2  3.132567763 -0.8915215744 0  3.278090164 #> 2301 27   21     2  2.458898523 -0.7679895731 0  2.520318962 #> 2302 27   22     2  4.019995222 -0.8225014128 1  3.560276081 #> 2303 27   23     2  3.403585831 -0.3105101158 1  3.297006722 #> 2304 27   24     2  3.152536930 -0.2652837749 1  3.006166813 #> 2305 27   25     2  1.871364563  0.8376299342 1  1.717286038 #> 2306 27   26     2  0.643026596 -0.1488163614 0  0.756732447 #> 2307 27   27     2  3.800270327 -2.1684177473 1  3.674816865 #> 2308 27   28     2  2.700790238 -0.5870856158 1  2.821315186 #> 2309 27   29     2  0.319048758 -0.1838583105 0  0.392670333 #> 2310 27   30     2  3.056532963 -0.7406905222 1  3.047715983 #> 2311 28    1     2           NA  0.7399475109 1 -0.511832695 #> 2312 28    2     2  1.906504159  0.0847372922 1  1.948308650 #> 2313 28    3     2 -0.050121994  0.4189824049 0 -0.056381200 #> 2314 28    4     2  0.565559760  1.6408461660 1  0.631243908 #> 2315 28    5     2  2.473846153 -0.2007810156 1  2.193350462 #> 2316 28    6     2  3.793086498 -1.1355884704 1  3.865102067 #> 2317 28    7     2 -0.120329224  1.0847750899 0 -0.353033224 #> 2318 28    8     2  0.840590144 -0.5743945522 0  1.134002163 #> 2319 28    9     2  2.413607222  0.3588557231 1  2.249697583 #> 2320 28   10     2  1.950812589 -0.7835157890 0  2.037355664 #> 2321 28   11     2  1.845033863  1.1393962917 1  1.944446168 #> 2322 28   12     2  0.736467250  0.4836175338 0  0.550520573 #> 2323 28   13     2  2.818990542 -0.0966860732 1  2.992064284 #> 2324 28   14     2  6.665655538 -1.9582051747 1  6.597224703 #> 2325 28   15     2  4.450759586 -0.8186697775 0  4.684353192 #> 2326 28   16     2  5.131878322 -0.6045132303 1  5.164484542 #> 2327 28   17     2  5.433538910 -0.7207736318 1  5.119595773 #> 2328 28   18     2  1.340059089  0.7871336143 0  1.219254080 #> 2329 28   19     2  2.278872341  0.4283320395 1  2.810342695 #> 2330 28   20     2  0.079399891  0.9183411710 0  0.018980898 #> 2331 28   21     2  0.645610734  1.2990499667 1  0.594912616 #> 2332 28   22     2  2.688490118 -0.3070365586 1  2.774142724 #> 2333 28   23     2  3.176256350 -0.4222270032 1  3.255420001 #> 2334 28   24     2  2.160644515 -1.2008693282 0  2.299501428 #> 2335 28   25     2  4.046729355 -1.4434928889 1  4.343949626 #> 2336 28   26     2  2.758622627  0.1124638126 1  2.896172065 #> 2337 28   27     2  1.900468705  0.6598043769 1  1.656336311 #> 2338 28   28     2  2.064294276  0.0007641864 1  2.022090205 #> 2339 28   29     2 -0.048711680  0.1637614068 0 -0.171835105 #> 2340 28   30     2  2.817206761 -0.5233416827 1  2.587321687 #> 2341 29    1     2           NA  1.9091035692 1 -0.134967649 #> 2342 29    2     2  1.768155594  0.7540537852 1  1.542097396 #> 2343 29    3     2 -0.081293098  0.3243043442 0 -0.255160874 #> 2344 29    4     2  2.174909134 -0.2190503789 1  2.330109561 #> 2345 29    5     2  1.744179900  0.8657794043 1  1.541033414 #> 2346 29    6     2  2.893379996 -0.4356454697 1  2.991987081 #> 2347 29    7     2  5.326660157 -2.2249876965 1  5.060665189 #> 2348 29    8     2  1.924032894  1.6268812142 1  1.734716060 #> 2349 29    9     2  3.399098837 -0.6085571783 1  3.549257547 #> 2350 29   10     2  2.946160777  0.5829914057 1  3.447564928 #> 2351 29   11     2  1.080102080  0.6361240352 0  1.390822100 #> 2352 29   12     2  1.510043938 -0.3213248422 0  1.413953137 #> 2353 29   13     2  3.209032454 -0.0752631976 1  3.173296245 #> 2354 29   14     2  4.638359630 -1.8863251587 0  4.791948406 #> 2355 29   15     2  4.368358658  0.0562148494 1  4.071681318 #> 2356 29   16     2  5.072896377 -0.7646060138 1  4.976238885 #> 2357 29   17     2  4.595647717 -0.2145045154 1  4.930982124 #> 2358 29   18     2  5.675651608 -1.0585905359 1  5.825409140 #> 2359 29   19     2  4.414305925  0.0549119698 1  4.585682912 #> 2360 29   20     2  4.455777491 -0.4527006465 1  4.638737044 #> 2361 29   21     2 -0.289470169  1.5791455618 0 -0.353685999 #> 2362 29   22     2  0.281198674  1.4397612584 1  0.009730542 #> 2363 29   23     2  1.056499186  0.6818296904 1  1.223436608 #> 2364 29   24     2  2.656232414 -1.9915381760 0  2.403580910 #> 2365 29   25     2  2.673684603 -0.2085701624 1  3.076412482 #> 2366 29   26     2  1.887250357  0.7246762026 1  1.684265838 #> 2367 29   27     2  0.504314408 -0.4539137334 0  0.516022025 #> 2368 29   28     2  0.616861573  2.2144653193 1  0.565471688 #> 2369 29   29     2  1.936835675  0.2169363441 1  1.979448586 #> 2370 29   30     2  2.339195806  1.7693659170 1  2.375152709 #> 2371 30    1     2           NA -1.4438931610 0  0.350256180 #> 2372 30    2     2  0.282455889 -0.4992920172 0  0.101164906 #> 2373 30    3     2  2.861388920 -0.7815364871 1  2.639033037 #> 2374 30    4     2  2.531844793  0.1680653839 1  2.729897074 #> 2375 30    5     2  2.918970075 -0.1018832557 1  2.986038287 #> 2376 30    6     2  2.600611019  0.3461036196 1  2.575374668 #> 2377 30    7     2 -0.404871125  1.2356934623 0 -0.407634197 #> 2378 30    8     2  2.804332440 -0.3809567393 1  2.819425320 #> 2379 30    9     2  1.582916230 -0.2022408551 0  1.523513479 #> 2380 30   10     2  4.406346182 -1.3165104017 1  4.525451388 #> 2381 30   11     2  5.144420181 -0.4929374242 1  5.054046684 #> 2382 30   12     2  8.048076378 -2.0784892689 1  8.056385538 #> 2383 30   13     2  3.429823721  1.0191570693 0  3.474502479 #> 2384 30   14     2  5.231753894 -0.6537798248 1  5.190767282 #> 2385 30   15     2  4.435921823  0.2990869033 1  4.532267589 #> 2386 30   16     2  3.833267110  0.3952958700 1  3.813537991 #> 2387 30   17     2  0.132472098  1.3681326480 0  0.012395472 #> 2388 30   18     2  0.399238596  1.6551758157 1  0.274649495 #> 2389 30   19     2  0.293462604  1.8221888218 1  0.124594295 #> 2390 30   20     2  4.905910448 -1.7483722800 1  4.884735753 #> 2391 30   21     2  2.201875714 -0.1568919530 0  2.344152065 #> 2392 30   22     2  5.643952747 -2.1989232542 1  5.764130141 #> 2393 30   23     2  2.278453699  1.0094961857 1  2.450743560 #> 2394 30   24     2  3.089268044 -0.3543692199 1  3.119743190 #> 2395 30   25     2  3.311176575 -0.4385634621 1  3.293552022 #> 2396 30   26     2  3.921171238 -1.1874860760 1  3.902174195 #> 2397 30   27     2  3.248212146 -0.6949368252 1  3.042991243 #> 2398 30   28     2  1.733370479  0.9694343957 1  1.665469149 #> 2399 30   29     2 -0.224125687  0.7292776342 0  0.023791802 #> 2400 30   30     2  2.755494840  0.6682826189 1  2.474355151 #> 2401 31    1     2           NA  0.7017843354 1  0.225879222 #> 2402 31    2     2  2.001640423  0.2144453096 1  1.916633719 #> 2403 31    3     2  1.127045191 -0.7886219709 0  1.547678151 #> 2404 31    4     2  1.330062026  1.1683838731 1  0.935070364 #> 2405 31    5     2  1.847837112  0.6241874720 1  1.768719524 #> 2406 31    6     2  3.272196068 -0.6470456313 1  3.107977733 #> 2407 31    7     2  2.386690559 -1.2410444968 0  2.800663597 #> 2408 31    8     2  3.187487353 -0.1057841676 1  3.119752318 #> 2409 31    9     2  1.609105802 -0.2732481068 0  1.739744951 #> 2410 31   10     2  5.889456033 -2.8097746790 1  5.604058189 #> 2411 31   11     2  3.954431567 -0.8341882316 0  4.001727980 #> 2412 31   12     2  2.678414467 -0.0914342756 0  2.826840780 #> 2413 31   13     2  0.966618007  0.7116019225 0  1.251233498 #> 2414 31   14     2  2.516402459  0.3943948480 1  2.531244927 #> 2415 31   15     2  2.647407484 -0.7593981173 0  2.408047260 #> 2416 31   16     2  4.834619973 -0.9905076305 1  4.609879820 #> 2417 31   17     2  2.756058150  1.0490866266 1  2.707329037 #> 2418 31   18     2  2.619108555  0.6757624155 1  2.591388145 #> 2419 31   19     2  4.759679136 -1.0223473286 1  4.606799621 #> 2420 31   20     2  1.597078376  1.7699041099 1  1.584354972 #> 2421 31   21     2  1.315594474 -0.3589365606 0  1.066099209 #> 2422 31   22     2  2.907757417 -0.3198377917 1  2.849215866 #> 2423 31   23     2  3.654346603 -0.7261049649 1  3.321132455 #> 2424 31   24     2 -0.068695795  0.6534957657 0  0.031310836 #> 2425 31   25     2  2.286212154 -0.2185938169 1  2.160794106 #> 2426 31   26     2  2.930654727 -0.4996001898 1  2.837995016 #> 2427 31   27     2  2.452690838 -0.0068463032 1  2.439678643 #> 2428 31   28     2  1.708455038  0.7680077137 1  1.897904115 #> 2429 31   29     2  1.357054932  1.1113804070 1  1.212107658 #> 2430 31   30     2  3.279047016 -2.1448970243 1  3.327707419 #> 2431 32    1     2           NA -0.2621974894 1 -0.774315250 #> 2432 32    2     2  2.000701308 -0.3246859115 1  2.250990083 #> 2433 32    3     2  2.865674032 -0.5021987183 1  2.862537957 #> 2434 32    4     2  1.612100488  1.0541810234 1  1.866054448 #> 2435 32    5     2  1.658715110  0.9590053778 1  1.320106432 #> 2436 32    6     2  4.717468801 -2.1576463350 1  4.936616098 #> 2437 32    7     2  2.852289200  0.4547692690 1  3.183445013 #> 2438 32    8     2  1.766572441  1.4040502677 1  1.597487187 #> 2439 32    9     2  3.312628222 -0.4686997798 1  3.290852338 #> 2440 32   10     2  3.051308049  0.4649679908 1  2.924764727 #> 2441 32   11     2  3.336867095  0.2710667568 1  3.375022340 #> 2442 32   12     2  2.533254427  1.1871868107 1  2.489455264 #> 2443 32   13     2  2.322268587  0.9902622460 1  1.863077810 #> 2444 32   14     2  4.650244212 -0.9135660482 1  4.706770173 #> 2445 32   15     2 -1.237730010  2.6848589992 0 -1.369731216 #> 2446 32   16     2 -0.925412311  0.5620413901 0 -0.895462912 #> 2447 32   17     2  2.596722564 -0.3599751179 1  2.428332091 #> 2448 32   18     2  4.819179867 -1.0742066095 1  4.638538394 #> 2449 32   19     2  3.331391639  0.6061302614 1  3.094502473 #> 2450 32   20     2  6.603432922 -2.3774069254 1  6.860650772 #> 2451 32   21     2  4.850206232 -0.3290388304 1  4.935762399 #> 2452 32   22     2 -0.906368409  2.0647042841 0 -1.124670209 #> 2453 32   23     2  0.696128937  0.8061088684 1  0.572483135 #> 2454 32   24     2 -2.118333020  1.7732386319 0 -1.844184207 #> 2455 32   25     2  0.001256546  1.4599659447 1  0.013236477 #> 2456 32   26     2  2.964354631 -1.0736429908 1  3.227923177 #> 2457 32   27     2 -0.506956270  1.3730520450 0 -0.572091424 #> 2458 32   28     2  0.690954805 -1.1083279118 0  0.719179910 #> 2459 32   29     2  1.960239072  0.2791608169 1  1.844656499 #> 2460 32   30     2  0.791838534  0.1264124161 0  0.457236522 #> 2461 33    1     2           NA -1.5721441591 1  0.730815610 #> 2462 33    2     2  2.071514222  0.0945835282 1  2.156409382 #> 2463 33    3     2 -0.909579790  1.4960606698 0 -1.012958192 #> 2464 33    4     2  0.946421749  1.1452631104 1  0.718494812 #> 2465 33    5     2  0.878635915  1.6710548289 1  1.267905783 #> 2466 33    6     2 -0.381151348  0.8842508200 0 -0.546925839 #> 2467 33    7     2 -0.599649744  0.6599026381 0 -0.580678594 #> 2468 33    8     2  1.025428042  1.2940839061 1  1.013614954 #> 2469 33    9     2  2.163183229  0.7041672839 1  2.138866090 #> 2470 33   10     2  0.343571300  0.8405398270 0  0.443547806 #> 2471 33   11     2  0.431984717  0.1573533472 0  0.165443273 #> 2472 33   12     2  0.896659747  1.1916012685 1  0.861850353 #> 2473 33   13     2 -0.498063450  2.3829266952 1 -0.539679518 #> 2474 33   14     2  0.943744215  0.8867490371 1  1.096938549 #> 2475 33   15     2  3.586094901 -0.4583901391 1  3.335845992 #> 2476 33   16     2  5.407134215 -1.1164164119 1  5.657237959 #> 2477 33   17     2  7.097829910 -1.6859164545 1  7.142639539 #> 2478 33   18     2  4.620520585  0.4545778091 1  4.691056849 #> 2479 33   19     2  2.343443005 -0.0889305675 0  2.297103969 #> 2480 33   20     2  2.432946608  0.5728115299 1  2.631797739 #> 2481 33   21     2  3.093062453  0.0692364779 1  3.475345465 #> 2482 33   22     2 -1.411669538  2.1935900691 0 -1.349316782 #> 2483 33   23     2 -0.090392249  1.4243231097 1  0.116477028 #> 2484 33   24     2  2.073291790 -0.0384567937 1  2.018936783 #> 2485 33   25     2  1.155866085 -0.5820599179 0  1.203603480 #> 2486 33   26     2  1.313547076  1.0572402127 1  1.094781129 #> 2487 33   27     2  2.645507116 -0.6353230772 1  2.893716628 #> 2488 33   28     2  2.696567651 -0.7862359200 1  2.575455719 #> 2489 33   29     2  0.173063715 -0.0761706715 0  0.657281106 #> 2490 33   30     2  0.939558233 -0.4518129363 0  0.900299606 #> 2491 34    1     2           NA -1.5146676538 1  0.545635528 #> 2492 34    2     2  2.306891363 -0.8953633580 1  2.217106953 #> 2493 34    3     2  3.563651796 -1.1373036207 1  3.751334774 #> 2494 34    4     2  3.354382397 -0.5774680011 1  3.216412005 #> 2495 34    5     2  2.820712318  0.0560167333 1  2.872600028 #> 2496 34    6     2  3.767468369 -0.8294776116 1  3.590957875 #> 2497 34    7     2  1.414591699 -0.1998898281 0  1.297682778 #> 2498 34    8     2  3.871630963 -1.0899918724 1  4.181710220 #> 2499 34    9     2  2.802275711 -1.1973635024 0  2.781511015 #> 2500 34   10     2  3.760279790 -0.2858454236 1  3.641232016 #> 2501 34   11     2  3.346284702  0.6297117467 1  3.200852695 #> 2502 34   12     2  5.272323616 -0.7889632181 1  5.601350542 #> 2503 34   13     2  4.572046038  0.6644158637 1  4.601050949 #> 2504 34   14     2  4.344184599  0.3333699702 1  4.596488105 #> 2505 34   15     2  4.466918671  0.0642435566 1  4.386887499 #> 2506 34   16     2 -0.282140124  1.8285304581 0 -0.561405287 #> 2507 34   17     2  3.541537480 -0.8445834285 1  3.675179663 #> 2508 34   18     2  2.286728315 -0.2133071432 0  1.906693552 #> 2509 34   19     2  1.617326312 -0.2608322438 0  1.822836411 #> 2510 34   20     2  1.742306750  1.0172492491 1  1.749611420 #> 2511 34   21     2  0.876366060  0.0969042337 0  0.931491498 #> 2512 34   22     2  0.404738170  0.1565953234 0  0.421396065 #> 2513 34   23     2  1.242505960 -0.7841440048 0  1.549654212 #> 2514 34   24     2  0.545004185  1.4931848406 1  0.537902230 #> 2515 34   25     2  1.123643258 -0.7830975957 0  0.883821973 #> 2516 34   26     2  1.108021165  1.2790725832 1  1.313973884 #> 2517 34   27     2  1.873240964  0.5581032939 1  1.917680299 #> 2518 34   28     2  0.840286918  2.2841164803 1  0.599186770 #> 2519 34   29     2 -0.651408134  1.3946631322 0 -0.643667236 #> 2520 34   30     2  3.093788883 -1.1366261878 1  3.245585421 #> 2521 35    1     2           NA -1.6015361736 0 -0.288449296 #> 2522 35    2     2  0.326259755 -1.3108015333 0  0.520033920 #> 2523 35    3     2  2.323920114 -0.1790515944 1  2.161148748 #> 2524 35    4     2  0.729821985  2.0024827303 1  0.614558671 #> 2525 35    5     2  2.462246382 -0.0519819062 1  2.841911547 #> 2526 35    6     2  3.464537064 -0.5735602708 1  3.652983216 #> 2527 35    7     2  3.874090757 -0.6451139569 1  3.853690025 #> 2528 35    8     2  4.242706346 -0.8730710004 1  3.813704935 #> 2529 35    9     2  0.830370118  0.8663661321 0  0.817677292 #> 2530 35   10     2  0.259889792  0.5041262546 0  0.298513138 #> 2531 35   11     2  3.048924158 -0.3957979503 1  3.064489834 #> 2532 35   12     2  6.210988607 -1.5477765436 1  6.319469444 #> 2533 35   13     2  5.583365805  0.2073811574 1  5.449623847 #> 2534 35   14     2  5.453902814 -0.1706396182 1  5.648709096 #> 2535 35   15     2  4.083641650  0.6497918672 1  3.986807522 #> 2536 35   16     2  3.454256706  0.4605913495 1  3.223453374 #> 2537 35   17     2  4.428497597 -0.4577605332 1  4.397525786 #> 2538 35   18     2  1.826206006  0.3132287720 0  1.194643495 #> 2539 35   19     2  2.349149406  0.4640912339 1  2.439691715 #> 2540 35   20     2  2.155995801 -0.6309678667 0  2.280141749 #> 2541 35   21     2  2.742268038  0.2900343878 1  2.541684790 #> 2542 35   22     2  4.024675541 -0.8636089506 1  4.070171355 #> 2543 35   23     2  3.912301306 -0.6524043665 1  3.760827239 #> 2544 35   24     2  2.769891857  0.0830221576 1  2.873171188 #> 2545 35   25     2  4.380257706 -1.5196539949 1  4.506676320 #> 2546 35   26     2  2.298948566  0.7876767254 1  2.529181897 #> 2547 35   27     2  2.200265045  0.3411578684 1  2.182555233 #> 2548 35   28     2  2.884511020 -1.0933007640 1  3.029357525 #> 2549 35   29     2  1.991767388  0.1645341176 1  1.951911036 #> 2550 35   30     2  2.841974558  0.2097858904 1  2.765903278 #> 2551 36    1     2           NA -0.5309065222 1 -1.222380911 #> 2552 36    2     2  1.693062374  1.9972133847 1  1.874842110 #> 2553 36    3     2  0.726058580  1.9023618217 1  0.812395979 #> 2554 36    4     2  2.310878637  0.0667008709 1  2.131324661 #> 2555 36    5     2  4.308452105 -1.7532373591 1  4.519136843 #> 2556 36    6     2  1.691379423  1.5039006090 1  1.343902608 #> 2557 36    7     2  0.493631607  0.1653210212 0  0.642541171 #> 2558 36    8     2  2.024230424 -1.3580790594 0  1.907708844 #> 2559 36    9     2  2.348911715  0.8641524862 1  2.095975625 #> 2560 36   10     2  2.456340188 -1.1559165251 0  2.502540252 #> 2561 36   11     2  2.526163336  0.8993540532 1  2.583314051 #> 2562 36   12     2 -1.456400374  2.4580604919 0 -1.464995728 #> 2563 36   13     2  4.969669706 -2.2106331106 1  5.025094898 #> 2564 36   14     2  3.883015526  0.8188281365 1  3.586100090 #> 2565 36   15     2  4.169723594 -0.0260186348 1  4.280175845 #> 2566 36   16     2  5.285111033 -0.7010036123 1  5.737613138 #> 2567 36   17     2  2.679763456  0.1036380042 0  2.594629069 #> 2568 36   18     2  3.707606400 -0.0899751970 1  4.006316299 #> 2569 36   19     2  5.380313058 -1.0204005907 1  5.556206448 #> 2570 36   20     2  3.802267248  0.4442870514 1  3.912480485 #> 2571 36   21     2  2.630755172 -0.7466789410 0  2.396564974 #> 2572 36   22     2  0.822469216  0.1654574195 0  0.843642042 #> 2573 36   23     2  1.518644632  0.6507783632 1  1.450357663 #> 2574 36   24     2  2.267076516  0.1155321043 1  2.422866868 #> 2575 36   25     2  1.577361803 -0.8056980816 0  1.767702010 #> 2576 36   26     2  3.617153281 -1.2224033826 1  3.010094280 #> 2577 36   27     2  3.445648171 -1.1795186291 1  3.794109016 #> 2578 36   28     2  2.219621723  0.2144793753 1  1.967209418 #> 2579 36   29     2  1.138873779  1.5778519788 1  1.156057823 #> 2580 36   30     2  2.890646516  0.1299655160 1  2.758905998 #> 2581 37    1     2           NA -1.4617555850 1  0.633333596 #> 2582 37    2     2 -0.023282174  0.6007088237 0 -0.087915593 #> 2583 37    3     2  2.076642525 -0.1009748853 1  2.474779879 #> 2584 37    4     2 -1.128443168  1.8668518447 0 -0.762443949 #> 2585 37    5     2  2.041479207  0.0993275941 1  1.960334136 #> 2586 37    6     2  3.438280678 -0.7741449296 1  3.518772176 #> 2587 37    7     2  2.566552178  0.4388187007 1  2.135799466 #> 2588 37    8     2  0.767359064  0.1818471926 0  0.754335049 #> 2589 37    9     2  3.771196652 -1.1986223591 1  3.691357537 #> 2590 37   10     2  3.829246819 -0.1271486068 1  3.987861425 #> 2591 37   11     2  5.188918710 -0.8308115273 1  5.509128450 #> 2592 37   12     2  3.562320321 -0.1624219425 0  3.704828831 #> 2593 37   13     2 -1.423514870  2.6917140032 0 -1.462506300 #> 2594 37   14     2  1.177468936  0.3883651628 1  1.105741290 #> 2595 37   15     2  3.826706524 -0.6435673870 1  3.807217138 #> 2596 37   16     2  1.662599982  0.2410459325 0  1.772105333 #> 2597 37   17     2  2.125229389 -0.6626072757 0  2.344694487 #> 2598 37   18     2 -0.027244757  1.0705160368 0  0.098012469 #> 2599 37   19     2  4.225468126 -1.3134509165 1  4.235317398 #> 2600 37   20     2  3.249423513  0.4391303884 1  3.400692615 #> 2601 37   21     2  4.462406461 -0.8468963888 1  4.390518775 #> 2602 37   22     2  2.250181546 -0.6527743959 0  2.257076572 #> 2603 37   23     2  0.373854937  0.1830479699 0  0.422624726 #> 2604 37   24     2 -0.308932220  0.3248253133 0  0.109231909 #> 2605 37   25     2  3.338641383 -1.1661847074 1  3.362323618 #> 2606 37   26     2  2.306617659  0.4519521167 1  2.443479443 #> 2607 37   27     2  3.653917900 -1.7410220173 1  3.848532346 #> 2608 37   28     2  1.697885145  0.8925710596 1  1.859483164 #> 2609 37   29     2  0.184205701 -0.0619226576 0  0.192816404 #> 2610 37   30     2  2.853343658 -0.3285065726 1  3.099190213 #> 2611 38    1     2           NA  0.6879167730 0  1.427519656 #> 2612 38    2     2  2.318821391 -1.2512713616 1  2.343075945 #> 2613 38    3     2  3.685279736 -1.3598407038 1  3.624226792 #> 2614 38    4     2  3.925427202 -1.3509026860 1  3.935902780 #> 2615 38    5     2  3.401419348 -0.5718500579 1  3.256981237 #> 2616 38    6     2  1.992905051  0.8457315402 1  1.722707963 #> 2617 38    7     2  1.621601643  0.8833028199 1  1.725735521 #> 2618 38    8     2  2.641024276  0.1648408679 1  2.388517372 #> 2619 38    9     2  2.548528303  0.6394919979 1  2.443151403 #> 2620 38   10     2  5.225218126 -1.9415183760 1  5.171667724 #> 2621 38   11     2  5.097706670 -0.3305447001 1  5.086590319 #> 2622 38   12     2  5.206828557 -0.0974512501 1  5.345038539 #> 2623 38   13     2  5.981094733 -0.4826768218 1  5.885653007 #> 2624 38   14     2  4.011135426 -0.4459350272 0  4.077612990 #> 2625 38   15     2  2.761334645  1.0453056640 1  2.621016136 #> 2626 38   16     2  3.985342954 -0.3524531992 1  4.052029829 #> 2627 38   17     2  1.143350795  2.0066806908 1  1.180873823 #> 2628 38   18     2  2.753927063 -1.3511003857 0  2.853951436 #> 2629 38   19     2  4.138097925 -0.4944808755 1  3.839955982 #> 2630 38   20     2  0.314794528  1.0406231529 0  0.327073473 #> 2631 38   21     2  0.918577661  1.1970776637 1  0.898537031 #> 2632 38   22     2  0.700994878  1.4528172823 1  0.854768081 #> 2633 38   23     2  1.521136510  0.5487749604 1  1.403692741 #> 2634 38   24     2  3.359041605 -0.8705772453 1  3.671210634 #> 2635 38   25     2  2.358655847  0.4079461962 1  2.481221082 #> 2636 38   26     2  1.458235432  1.1504491864 1  1.392567185 #> 2637 38   27     2  3.647375956 -1.9925857712 1  3.648409794 #> 2638 38   28     2 -0.383186869  1.0187579723 0 -0.368474474 #> 2639 38   29     2  1.808969049  0.6139229642 1  1.912354251 #> 2640 38   30     2  2.382038066  1.9727035673 1  2.776344637 #> 2641 39    1     2           NA  2.1001089405 0  1.380517493 #> 2642 39    2     2  2.194820530 -0.6111659167 1  2.346319824 #> 2643 39    3     2  1.067903693 -0.6647694353 0  1.293337231 #> 2644 39    4     2  0.322309490  0.0209835864 0  0.371027524 #> 2645 39    5     2  3.178150025 -0.9740095828 1  2.893168807 #> 2646 39    6     2  4.108981418 -1.2606828788 1  4.178210587 #> 2647 39    7     2  5.498464657 -2.0523369839 1  5.514768911 #> 2648 39    8     2  1.376285337  0.3641146874 0  1.586385000 #> 2649 39    9     2 -1.244870924  2.4302266523 0 -1.393243236 #> 2650 39   10     2 -1.288278180  1.1811808914 0 -1.515913492 #> 2651 39   11     2 -1.208708372  0.7408145237 0 -1.034470519 #> 2652 39   12     2  1.278504655  0.4205741887 1  1.460849259 #> 2653 39   13     2 -0.212271487  2.3747347151 1  0.012746452 #> 2654 39   14     2  0.133619188  0.2311149344 0  0.039725700 #> 2655 39   15     2 -1.795274970  1.6155453232 0 -1.650288932 #> 2656 39   16     2  1.217471946  0.3711479598 1  1.204184675 #> 2657 39   17     2  3.296382078 -0.2722675344 1  3.187901385 #> 2658 39   18     2  4.378601182 -0.5226166972 1  3.897117840 #> 2659 39   19     2  1.564387837  1.7517571498 1  1.542327781 #> 2660 39   20     2  2.249759256  0.4840993880 1  2.390514277 #> 2661 39   21     2  1.775584435 -0.5486273611 0  1.842765790 #> 2662 39   22     2  3.680795642 -0.8064826557 1  3.586070669 #> 2663 39   23     2  1.096749907  1.4046842945 1  0.919980183 #> 2664 39   24     2  0.248792448 -0.0517182129 0  0.412340709 #> 2665 39   25     2  3.047382711 -0.8630042460 1  3.057769749 #> 2666 39   26     2  0.504467735  0.1679409807 0  0.448043839 #> 2667 39   27     2  1.625227836  0.5512742115 1  1.570782797 #> 2668 39   28     2  1.440604964  1.0891120109 1  1.628775145 #> 2669 39   29     2  1.191843700 -1.5460885942 0  0.930108458 #> 2670 39   30     2  1.290633311 -2.2486900668 0  1.642069053 #> 2671 40    1     2           NA -1.2870304760 1  0.872634567 #> 2672 40    2     2  2.248216180 -1.1854800846 1  2.331187363 #> 2673 40    3     2  1.962451804  0.4854599789 1  2.063639466 #> 2674 40    4     2  1.292697030  1.2499145710 1  0.925175719 #> 2675 40    5     2  2.527809557 -0.1799062310 1  2.647081654 #> 2676 40    6     2  1.120996996 -0.3545424031 0  1.208479446 #> 2677 40    7     2  4.306342090 -1.6363792681 1  4.304276450 #> 2678 40    8     2  2.856851291  0.5521577142 1  2.743789709 #> 2679 40    9     2  3.688079546 -0.5572154819 1  3.595297694 #> 2680 40   10     2  1.722490277  1.8599108615 1  1.522332726 #> 2681 40   11     2  1.818219196  0.9899716086 1  1.641533685 #> 2682 40   12     2  5.453289176 -1.6140394566 1  5.439898522 #> 2683 40   13     2  2.797047955  0.3746435680 0  2.937967363 #> 2684 40   14     2  0.966003609  0.6475133580 0  0.506534756 #> 2685 40   15     2  2.661770649 -0.0296939710 1  3.010010078 #> 2686 40   16     2  1.292434179  0.2435327188 0  1.403429430 #> 2687 40   17     2  4.702689983 -1.2139444702 1  4.688749168 #> 2688 40   18     2  2.588864467 -0.2491906778 0  2.674241815 #> 2689 40   19     2  1.350372447  0.0557647746 0  1.261053301 #> 2690 40   20     2  3.111055795 -0.2448837791 1  3.243653924 #> 2691 40   21     2  2.922991497  0.3030456952 1  2.817195774 #> 2692 40   22     2  2.509385884  0.3729115952 1  2.382680719 #> 2693 40   23     2  0.101415922  0.3870831196 0  0.494371248 #> 2694 40   24     2 -1.066001794  0.9084476988 0 -1.435579812 #> 2695 40   25     2  1.347602298  0.3040420350 1  1.398374609 #> 2696 40   26     2  0.806489181 -0.5661093329 0  0.715861050 #> 2697 40   27     2  2.078209663 -0.0347420615 1  2.384552409 #> 2698 40   28     2  2.225409530 -0.1631289899 1  2.468122409 #> 2699 40   29     2  2.113574661 -0.1123919613 1  2.241482886 #> 2700 40   30     2  0.637439806  0.8382193873 0  0.498171021 #> 2701 41    1     2           NA  0.7877388475 1 -0.483135069 #> 2702 41    2     2  1.529800249  2.1988103489 1  1.582592880 #> 2703 41    3     2  2.591193901 -0.3756028717 1  2.442034531 #> 2704 41    4     2  3.114017144 -0.7152421872 1  3.078937533 #> 2705 41    5     2 -0.196766686  1.0149431727 0 -0.032066114 #> 2706 41    6     2  0.271565545 -0.0735560191 0  0.392418736 #> 2707 41    7     2  0.649075420  1.4304023412 1  0.284759931 #> 2708 41    8     2  3.002287776 -0.6018928460 1  2.826765154 #> 2709 41    9     2  2.440470618  0.8449042414 1  2.404949212 #> 2710 41   10     2  2.090009869  1.0740122603 1  2.162816485 #> 2711 41   11     2  5.646915725 -1.9385047015 1  5.304530240 #> 2712 41   12     2  6.144046991 -0.7282191112 1  6.209159068 #> 2713 41   13     2  3.487205026  1.5384301989 1  3.470670905 #> 2714 41   14     2  3.602716640  0.3562833449 1  3.442138805 #> 2715 41   15     2  3.113044496  0.5622673454 1  3.338063660 #> 2716 41   16     2  5.178729171 -1.0141141727 1  5.232285747 #> 2717 41   17     2  4.636833394 -0.1412617573 1  4.439237368 #> 2718 41   18     2  5.450938535 -0.9957987249 1  5.529304524 #> 2719 41   19     2  3.989334753  0.3314343982 1  3.926001949 #> 2720 41   20     2  2.443716953  0.9159920579 1  2.607792261 #> 2721 41   21     2  3.161256001 -0.0569705338 1  3.076005813 #> 2722 41   22     2  2.265783794  0.6198500746 1  2.451503201 #> 2723 41   23     2 -0.744532442  1.0517012702 0 -0.413077367 #> 2724 41   24     2  2.760909268 -0.7497257869 1  2.899979825 #> 2725 41   25     2  2.759013365 -0.1464274878 1  2.688992106 #> 2726 41   26     2  1.540813039 -1.0861182406 0  1.579737781 #> 2727 41   27     2  0.820320325  1.8505717036 1  0.718656001 #> 2728 41   28     2  0.551329965 -0.8209866971 0  0.272285908 #> 2729 41   29     2  0.189793404 -0.0217945400 0  0.310082380 #> 2730 41   30     2  0.811759418 -0.2890232705 0  0.479430513 #> 2731 42    1     2           NA  0.7690422410 1 -0.531346919 #> 2732 42    2     2 -0.226194160  1.3124129764 0  0.062147889 #> 2733 42    3     2  2.527991947 -0.5618763635 1  2.672862760 #> 2734 42    4     2  3.245951239 -0.7526889682 1  3.282183717 #> 2735 42    5     2  4.602537347 -1.9927484887 1  4.397119647 #> 2736 42    6     2  4.338104045 -1.1686514244 1  4.126102345 #> 2737 42    7     2  2.026362159  1.0466288471 1  1.959526462 #> 2738 42    8     2  3.846992366 -0.9936985911 1  3.698923196 #> 2739 42    9     2  2.212721097 -0.7822018456 0  1.919052614 #> 2740 42   10     2  3.104509958 -0.0273469664 1  3.252351104 #> 2741 42   11     2  1.740802204  0.1071904070 0  1.332755917 #> 2742 42   12     2  3.257885109 -1.5404424053 0  3.594173670 #> 2743 42   13     2  4.527935210 -0.1097103212 1  4.411262364 #> 2744 42   14     2  5.577352278 -0.6580102079 1  5.760868987 #> 2745 42   15     2  5.116938829 -0.0974124985 1  4.866657153 #> 2746 42   16     2  3.564918762 -0.7913138788 0  3.460061332 #> 2747 42   17     2  5.245791560 -1.0053775816 1  5.225477887 #> 2748 42   18     2  5.869442453 -1.0399550438 1  5.818535967 #> 2749 42   19     2  4.839977535 -0.1898466377 1  5.289613510 #> 2750 42   20     2  1.147337843  0.8006223565 0  1.379254247 #> 2751 42   21     2  3.974232507 -0.9578493922 1  4.146011232 #> 2752 42   22     2  2.307317701 -0.7575101607 0  2.549584097 #> 2753 42   23     2  1.859534217  0.6229054623 1  1.615322031 #> 2754 42   24     2  2.738157173 -0.3216060699 1  2.874733392 #> 2755 42   25     2  4.226952231 -1.4335621799 1  4.430548364 #> 2756 42   26     2  3.558895789 -0.6653027956 1  3.619720266 #> 2757 42   27     2  2.148794926  0.5736751083 1  2.070565519 #> 2758 42   28     2  2.340086893 -0.3072572330 1  2.546915862 #> 2759 42   29     2  0.619392104 -0.7583454174 0  0.663052448 #> 2760 42   30     2  2.651348876  0.6565134106 1  2.695490298 #> 2761 43    1     2           NA  0.3322025790 1 -0.587684757 #> 2762 43    2     2  1.922513698 -0.2651450567 1  1.905737844 #> 2763 43    3     2  0.599730906 -0.3439172341 0  0.401646703 #> 2764 43    4     2  2.929910194 -0.9385387036 1  3.024391310 #> 2765 43    5     2  3.028499172 -0.4272792872 1  2.709158525 #> 2766 43    6     2  3.332172657 -0.6347482649 1  3.595197334 #> 2767 43    7     2  2.477036411  0.4352889489 1  2.157294483 #> 2768 43    8     2  1.810137149  1.0267850561 1  1.907173144 #> 2769 43    9     2  1.906353551  1.1107114182 1  1.506278500 #> 2770 43   10     2  0.880865002 -0.0333303423 0  0.798629948 #> 2771 43   11     2  1.885812651  0.6087790117 1  2.062074785 #> 2772 43   12     2  4.343382624 -0.6930946140 1  4.204229348 #> 2773 43   13     2  1.873064583  0.5114707547 0  1.528279658 #> 2774 43   14     2  1.878654032  0.8552022051 1  1.877740137 #> 2775 43   15     2 -0.236055895  1.0164552177 0 -0.042726144 #> 2776 43   16     2  1.882837081  0.2995936847 1  1.814778887 #> 2777 43   17     2  2.832126905  0.1561557073 1  2.650653581 #> 2778 43   18     2  3.410274945 -0.0179802406 1  3.523583218 #> 2779 43   19     2  3.023022486  0.4704927320 1  3.150593822 #> 2780 43   20     2  4.612671555 -0.9365690341 1  4.771100577 #> 2781 43   21     2  2.966037458  0.5910619094 1  2.934039629 #> 2782 43   22     2  1.897099535  0.8515246815 1  1.991874639 #> 2783 43   23     2  1.853492287  0.4336203898 1  1.499335888 #> 2784 43   24     2  1.659707361 -1.1477707505 0  1.454364446 #> 2785 43   25     2  3.104567271 -0.7906077857 1  3.109193190 #> 2786 43   26     2  1.899637396  0.7148483559 1  1.968798561 #> 2787 43   27     2  1.566879832  0.8496958911 1  1.760729567 #> 2788 43   28     2  0.602645661 -0.9020980085 0  0.718964812 #> 2789 43   29     2  2.783063394 -1.0358928844 1  2.847289954 #> 2790 43   30     2  0.865752703 -0.4539977006 0  0.858035852 #> 2791 44    1     2           NA -1.0083766083 1 -0.411697869 #> 2792 44    2     2  0.103957501  0.5431940592 0  0.063826419 #> 2793 44    3     2  0.136435142  0.0904966471 0  0.089140543 #> 2794 44    4     2  1.299532802 -1.0525132793 0  1.048845685 #> 2795 44    5     2  2.503675639  0.1166372836 1  2.666394564 #> 2796 44    6     2  2.985330273 -0.0288415529 1  3.305391576 #> 2797 44    7     2  2.386540667  0.7151784071 1  2.439196228 #> 2798 44    8     2  2.439923094  0.7510613026 1  2.797224072 #> 2799 44    9     2  1.231814306  0.2498247199 0  1.553537517 #> 2800 44   10     2  4.679241105 -1.5160676232 1  4.814416950 #> 2801 44   11     2  4.522323147 -1.4508243135 0  4.646040962 #> 2802 44   12     2  4.879408402  0.1188494330 1  5.174614139 #> 2803 44   13     2  3.112026787  0.2139579796 0  2.971407060 #> 2804 44   14     2  2.460069466  1.1529362256 1  2.202240715 #> 2805 44   15     2  5.207111264 -1.1561673943 1  5.072433184 #> 2806 44   16     2  2.334065070  1.6390519088 1  2.306544278 #> 2807 44   17     2  3.205074436  0.2336336141 1  3.529838909 #> 2808 44   18     2  4.190644488 -0.1321751329 1  4.416696339 #> 2809 44   19     2  5.510643247 -0.9516795430 1  5.543852793 #> 2810 44   20     2  6.341363959 -1.4007874340 1  6.493606177 #> 2811 44   21     2  4.318529451  0.1731048735 1  4.470957138 #> 2812 44   22     2  4.543033973 -0.7479299709 1  4.698091051 #> 2813 44   23     2  2.868863267  0.3860844382 1  2.945911776 #> 2814 44   24     2  2.372554621  0.3543521964 1  2.345839108 #> 2815 44   25     2  1.749514707  0.8851124551 1  1.659672519 #> 2816 44   26     2  2.938081050 -0.4316611004 1  2.931362477 #> 2817 44   27     2  1.661660844  1.3343835853 1  1.625903072 #> 2818 44   28     2 -0.044571840  0.6270687431 0 -0.052418644 #> 2819 44   29     2  1.761448196  0.9481593026 1  1.734149194 #> 2820 44   30     2  3.133536181 -0.5938645624 1  3.353354914 #> 2821 45    1     2           NA -0.1194526066 1  0.709185621 #> 2822 45    2     2  2.178915694 -0.4143399479 1  2.420382191 #> 2823 45    3     2  1.038066102  1.5985087711 1  1.239399029 #> 2824 45    4     2  0.789007787 -0.4371595332 0  0.992231284 #> 2825 45    5     2  3.267913988 -0.8932075701 1  3.042495897 #> 2826 45    6     2  2.189014479  0.6706959687 1  2.275330495 #> 2827 45    7     2  1.771659695  0.9171749176 1  1.706442200 #> 2828 45    8     2  4.328908914 -1.5091665373 1  4.468813255 #> 2829 45    9     2  2.259153631  1.6519153916 1  2.294499256 #> 2830 45   10     2  0.465291606  0.7903853439 0  0.973971034 #> 2831 45   11     2  0.295319572  0.4806255999 0  0.300797979 #> 2832 45   12     2  4.488900736 -1.3647094580 1  4.421176290 #> 2833 45   13     2  3.143312174 -0.1861206994 0  3.695244995 #> 2834 45   14     2  3.927248016  0.2762745565 1  4.054363622 #> 2835 45   15     2  1.027683343  2.3208602240 1  1.041456702 #> 2836 45   16     2  1.349922883  1.0846170087 1  1.387692417 #> 2837 45   17     2  0.554954747  0.3555876116 0  0.135683868 #> 2838 45   18     2  4.017983092 -2.5493427748 0  4.056679063 #> 2839 45   19     2  2.464209888  1.1579104666 1  2.114063642 #> 2840 45   20     2  2.939509275  0.1602775400 1  2.797470006 #> 2841 45   21     2  1.486054096  1.3997833562 1  1.571537170 #> 2842 45   22     2  1.935659269  0.6302398297 1  2.269564081 #> 2843 45   23     2  0.980122994  1.2913233045 1  1.222520760 #> 2844 45   24     2  1.756861848  0.4247997824 1  1.591447879 #> 2845 45   25     2 -0.551052251  0.9030760860 0 -0.396824485 #> 2846 45   26     2  1.751891459  0.2276149399 1  1.803232154 #> 2847 45   27     2  2.678446812 -0.5007190980 1  2.685043250 #> 2848 45   28     2 -0.436270636  1.1203550284 0 -0.351281758 #> 2849 45   29     2  1.659077308  0.9141587339 1  1.800882387 #> 2850 45   30     2  3.233653305 -1.7103796664 1  3.255519366 #> 2851 46    1     2           NA -0.2803953352 0  0.256396754 #> 2852 46    2     2  2.045805383 -0.4762468946 1  2.047497882 #> 2853 46    3     2  2.400018222 -0.0885651121 1  2.249153828 #> 2854 46    4     2  2.118781593  0.3311791730 1  1.797767873 #> 2855 46    5     2  0.194353240  0.3339029425 0  0.446798989 #> 2856 46    6     2  3.967589706 -1.6505465434 1  4.116120145 #> 2857 46    7     2  4.137657065 -2.6609227985 0  4.215483498 #> 2858 46    8     2  3.432874106 -0.0951474508 1  3.385208749 #> 2859 46    9     2  4.630263504 -1.4589707285 1  4.516460399 #> 2860 46   10     2  4.125096376 -0.2107341807 1  4.513575996 #> 2861 46   11     2  3.370011608 -0.8281742704 0  3.302043529 #> 2862 46   12     2  3.267786489  0.5899826794 1  3.551906019 #> 2863 46   13     2  4.443311086 -0.1203938246 1  4.370095995 #> 2864 46   14     2  4.333490781  0.1441046625 1  4.275243031 #> 2865 46   15     2  5.090407925 -0.6035312478 1  5.277280957 #> 2866 46   16     2  3.415570834 -0.6245674736 0  3.252238054 #> 2867 46   17     2  5.970594907 -1.6218582591 1  5.987073571 #> 2868 46   18     2  3.295216218  1.0405734557 1  3.598926743 #> 2869 46   19     2  2.933318752  0.5847052602 1  2.807353151 #> 2870 46   20     2  3.640717821 -0.2739623748 1  3.538139850 #> 2871 46   21     2  1.237925784  0.1174595846 0  1.164951666 #> 2872 46   22     2 -0.830286800  1.0966616331 0 -1.187506310 #> 2873 46   23     2  0.959345035 -1.0022598737 0  0.791772540 #> 2874 46   24     2 -0.709770260  0.6483473512 0 -0.744777131 #> 2875 46   25     2 -2.381664217  2.0055732743 0 -2.295669263 #> 2876 46   26     2  0.251191563  1.2949457957 1  0.322335573 #> 2877 46   27     2 -0.395019344  0.5100979282 0 -0.262585395 #> 2878 46   28     2 -1.314314322  2.1272135525 0 -1.176755781 #> 2879 46   29     2  3.108975252 -1.2987319948 1  3.044671789 #> 2880 46   30     2  2.825651828 -0.2094484283 1  2.776714424 #> 2881 47    1     2           NA  0.5629895332 0 -1.856360586 #> 2882 47    2     2  0.119249073 -0.7886028379 0  0.106389520 #> 2883 47    3     2 -0.904114203  1.0807994962 0 -0.970242529 #> 2884 47    4     2  1.856112369 -2.0142104979 0  1.985484775 #> 2885 47    5     2  0.276137893  0.4114299206 0  0.202382509 #> 2886 47    6     2  2.685167714 -0.3497542392 1  2.684726554 #> 2887 47    7     2  1.656761889  1.1102770966 1  1.682642290 #> 2888 47    8     2  3.729004119 -0.8959478228 1  3.505353231 #> 2889 47    9     2  3.526795225 -0.0512978861 1  3.330785688 #> 2890 47   10     2  4.286267059 -0.6567429254 1  4.106334483 #> 2891 47   11     2  3.037034418  1.0202530122 1  3.324366474 #> 2892 47   12     2  3.813174193  0.2893440288 1  3.578136447 #> 2893 47   13     2  2.945661434  1.0128343358 1  3.033948896 #> 2894 47   14     2  4.107751760 -0.0756250808 1  4.149563590 #> 2895 47   15     2  6.350209135 -1.4588494144 1  6.333550168 #> 2896 47   16     2  1.892968306  0.8259229016 0  2.018787467 #> 2897 47   17     2  0.998413834  0.2207112910 0  0.805122756 #> 2898 47   18     2  2.503437423  0.2497257360 1  2.574730250 #> 2899 47   19     2  4.507730548 -0.8064528227 1  4.631404501 #> 2900 47   20     2  5.336033053 -0.9855391126 1  5.185188659 #> 2901 47   21     2  2.434766404 -0.3315457582 0  2.284616499 #> 2902 47   22     2  4.088742925 -0.9884429224 1  4.238215633 #> 2903 47   23     2  2.539219992 -1.1051827292 0  2.692308332 #> 2904 47   24     2  4.144629329 -1.2198100315 1  4.070911338 #> 2905 47   25     2  0.983828226 -0.0035803084 0  0.848498226 #> 2906 47   26     2  1.699063452  0.5783349405 1  1.596951129 #> 2907 47   27     2  1.646410216  0.8687932702 1  1.647806247 #> 2908 47   28     2  1.951981757  0.3661143829 1  2.040229704 #> 2909 47   29     2  1.857362945  0.4243787949 1  1.905038368 #> 2910 47   30     2  2.334160597  2.4787458014 1  2.536588814 #> 2911 48    1     2           NA -0.3724387561 1 -1.860587630 #> 2912 48    2     2  1.959586900 -0.5946172675 1  1.891144083 #> 2913 48    3     2  1.731216647  0.6307541157 1  1.927477400 #> 2914 48    4     2  2.196255211  0.2119804334 1  2.033588129 #> 2915 48    5     2  2.563594688 -0.0330361593 1  2.168190726 #> 2916 48    6     2  1.829973588  0.7564064385 1  1.834719214 #> 2917 48    7     2  1.174003576 -0.4849875966 0  1.146260405 #> 2918 48    8     2  4.649332005 -2.0707510705 1  5.043243077 #> 2919 48    9     2  4.265114206 -0.5269251761 1  4.389257562 #> 2920 48   10     2  3.355235722 -1.4120257927 0  3.460117575 #> 2921 48   11     2  1.256186689  0.5384820321 0  1.514635101 #> 2922 48   12     2  4.400890052 -0.9042150256 1  4.225870266 #> 2923 48   13     2  2.967415279 -0.2014581470 0  2.887106935 #> 2924 48   14     2  0.740168744  2.1614158463 1  1.180290752 #> 2925 48   15     2  3.394938751 -0.3509178272 1  3.404101115 #> 2926 48   16     2  1.856819251 -0.0485683528 0  1.896778204 #> 2927 48   17     2  2.698413213  0.3104500805 1  3.120412371 #> 2928 48   18     2  0.384184569  2.4162073731 1  0.559301148 #> 2929 48   19     2  2.540864714  0.0545532458 1  2.565488407 #> 2930 48   20     2  3.101475973  0.0839306795 1  3.059357337 #> 2931 48   21     2  2.884569711  0.2782949133 1  2.808165232 #> 2932 48   22     2  1.608594893  1.1079950410 1  1.922539667 #> 2933 48   23     2  1.690639432  0.5919460034 1  1.692281599 #> 2934 48   24     2  2.164574513  0.1072350348 1  1.845048822 #> 2935 48   25     2  4.018545606 -1.4958268140 1  3.469631999 #> 2936 48   26     2  1.434469324  1.3646727815 1  1.455974773 #> 2937 48   27     2 -0.816841325  1.3693516880 0 -0.801217467 #> 2938 48   28     2  2.488342422 -0.8747813772 1  2.220614293 #> 2939 48   29     2  0.826844875 -1.1125453200 0  0.828384272 #> 2940 48   30     2  2.528816538  0.9897022081 1  2.512201874 #> 2941 49    1     2           NA  0.9769733867 1 -0.022834094 #> 2942 49    2     2  1.757820331  1.6509074673 1  1.890837374 #> 2943 49    3     2  2.509854748 -0.1136398955 1  2.291823876 #> 2944 49    4     2 -0.550498889  1.2366750464 0 -0.343103513 #> 2945 49    5     2  4.477859729 -2.4658981938 1  4.676090144 #> 2946 49    6     2  1.803207831 -0.5388091600 0  1.865438510 #> 2947 49    7     2  2.446463589  0.2306168306 1  2.344137305 #> 2948 49    8     2  2.861394838  0.1501201312 1  3.027341641 #> 2949 49    9     2  3.524688932 -0.1972648691 1  3.472271901 #> 2950 49   10     2  3.967008832 -0.2997624966 1  3.877525779 #> 2951 49   11     2  3.234282708  0.7690522950 1  3.118880658 #> 2952 49   12     2  1.812655235  0.2263249424 0  2.013905806 #> 2953 49   13     2  4.528500313 -2.0376824944 0  4.584207497 #> 2954 49   14     2  2.392913048  0.2763155321 0  2.114715566 #> 2955 49   15     2  1.232378542  0.1467084841 0  1.290089002 #> 2956 49   16     2  2.570101118  0.3013136517 1  2.487496598 #> 2957 49   17     2  5.502885745 -1.4211084475 1  5.475378564 #> 2958 49   18     2  3.693563825  0.6851982381 1  3.624085039 #> 2959 49   19     2  2.886739001  0.7163316195 1  2.940459805 #> 2960 49   20     2  5.205001695 -1.3199965265 1  5.212145772 #> 2961 49   21     2  5.488258001 -1.1855916490 1  5.459743360 #> 2962 49   22     2  2.387913882 -0.4895328712 0  2.515928090 #> 2963 49   23     2  2.835183742 -0.1196896641 1  2.672165305 #> 2964 49   24     2  1.816493988 -0.9440576916 0  1.515098647 #> 2965 49   25     2  1.268451941 -0.7684170270 0  1.583654432 #> 2966 49   26     2  3.946088187 -1.7015798027 1  3.771079259 #> 2967 49   27     2  2.074707398  0.7626511463 1  2.023128339 #> 2968 49   28     2  1.564612547  1.0244748630 1  1.937714972 #> 2969 49   29     2  2.870790572 -1.0510732262 1  2.891431822 #> 2970 49   30     2  2.530415907  1.6755721558 1  2.689318569 #> 2971 50    1     2           NA -0.3745808578 1  0.149938747 #> 2972 50    2     2  2.047609569 -0.0540281251 1  1.755086924 #> 2973 50    3     2  3.756304785 -1.5329020029 1  4.049610391 #> 2974 50    4     2  0.957677897  2.0375740182 1  1.076061989 #> 2975 50    5     2  0.104389907  2.5714581459 1 -0.044604420 #> 2976 50    6     2  1.998456004  0.2272919217 1  2.044199171 #> 2977 50    7     2  1.073128808 -0.2951578009 0  0.988926553 #> 2978 50    8     2  0.753779310 -0.0792117093 0  0.264026161 #> 2979 50    9     2  1.163323831 -0.6295787427 0  1.136211392 #> 2980 50   10     2  3.677085696 -0.8490611350 1  3.751728788 #> 2981 50   11     2  3.932975969  0.1207193293 1  3.677867529 #> 2982 50   12     2  3.333672129  0.7480811625 1  3.489499606 #> 2983 50   13     2  2.629433006 -0.1958892488 0  2.544599144 #> 2984 50   14     2  1.972920331 -0.1582940287 0  1.816004877 #> 2985 50   15     2  0.982140961  1.6236212077 1  1.004184589 #> 2986 50   16     2  2.481028668  0.2603614907 1  2.617673160 #> 2987 50   17     2  2.117560431  0.9553656397 1  2.219318416 #> 2988 50   18     2  1.964049034 -0.4469593090 0  1.868055357 #> 2989 50   19     2  0.446407483  0.5577309821 0  0.554567864 #> 2990 50   20     2  2.376821727  0.1612263513 1  2.272492856 #> 2991 50   21     2  2.130707760 -0.8358940534 0  2.206942818 #> 2992 50   22     2  2.485287349  0.2943533884 1  2.551791148 #> 2993 50   23     2  0.591142577  0.0740052117 0  0.892844219 #> 2994 50   24     2  2.183568549 -0.0003846487 1  2.208617975 #> 2995 50   25     2  0.093901192  0.4084885048 0 -0.121140002 #> 2996 50   26     2  2.246416470 -0.2806762797 1  2.381388225 #> 2997 50   27     2  0.091557606  0.4211471730 0  0.104957356 #> 2998 50   28     2 -0.464548757  0.9047588937 0 -0.711684545 #> 2999 50   29     2  1.915943916  0.5254124483 1  1.969896757 #> 3000 50   30     2  0.663753573  0.9149653183 0  0.677013200 # \\donttest{ set.seed(1) # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   fit <- dynamite(     dformula = obs(LakeHuron ~ 1, \"gaussian\") + lags(),     data = data.frame(LakeHuron, time = seq_len(length(LakeHuron)), id = 1),     time = \"time\",     group = \"id\",     chains = 1,     refresh = 0   )    if (requireNamespace(\"dplyr\") &&     requireNamespace(\"tidyr\") &&     base::getRversion() >= \"4.1.0\") {      # One-step ahead samples (fitted values) from the posterior     # (first time point is fixed due to lag in the model):     fitted(fit) |>       dplyr::filter(time > 2) |>       ggplot2::ggplot(ggplot2::aes(time, LakeHuron_fitted, group = .draw)) +       ggplot2::geom_line(alpha = 0.5) +       # observed values       ggplot2::geom_line(ggplot2::aes(y = LakeHuron), colour = \"tomato\") +       ggplot2::theme_bw()      # Posterior predictive distribution given the first time point:     predict(fit, type = \"mean\") |>       dplyr::filter(time > 2) |>       ggplot2::ggplot(ggplot2::aes(time, LakeHuron_mean, group = .draw)) +       ggplot2::geom_line(alpha = 0.5) +       # observed values       ggplot2::geom_line(ggplot2::aes(y = LakeHuron), colour = \"tomato\") +       ggplot2::theme_bw()   } }  # }"},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Data of a Gaussian Response — gaussian_example","title":"Simulated Data of a Gaussian Response — gaussian_example","text":"Simulated data containing Gaussian response variable y two covariates. dataset generated model time-varying effects covariate x lagged value response variable, time-varying intercept, time-invariant effect covariate z. time-varying coefficients vary according spline 20 degrees freedom.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Data of a Gaussian Response — gaussian_example","text":"","code":"gaussian_example"},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Data of a Gaussian Response — gaussian_example","text":"data frame 3000 rows 5 variables: y response variable. x continuous covariate. z binary covariate. id Variable defining individuals (1 50). time Variable defining time point measurement (1 30).","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Data of a Gaussian Response — gaussian_example","text":"data generated via gaussian_example.R https://github.com/ropensci/dynamite/tree/main/data-raw/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Fit for the Simulated Data of a Gaussian Response — gaussian_example_fit","title":"Model Fit for the Simulated Data of a Gaussian Response — gaussian_example_fit","text":"dynamitefit object obtained running dynamite gaussian_example dataset Note small number samples due size restrictions CRAN.","code":"set.seed(1) library(dynamite) gaussian_example_fit <- dynamite(   obs(y ~ -1 + z + varying(~ x + lag(y)) + random(~1), family = \"gaussian\") +     random_spec() + splines(df = 20),   data = gaussian_example,   time = \"time\",   group = \"id\",   iter = 2000,   warmup = 1000,   thin = 10,   chains = 2,   cores = 2,   refresh = 0,   save_warmup = FALSE,   pars = c(\"omega_alpha_1_y\", \"omega_raw_alpha_y\", \"nu_raw\", \"nu\", \"L\",     \"sigma_nu\", \"a_y\"),   include = FALSE )"},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Fit for the Simulated Data of a Gaussian Response — gaussian_example_fit","text":"","code":"gaussian_example_fit"},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example_fit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model Fit for the Simulated Data of a Gaussian Response — gaussian_example_fit","text":"dynamitefit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/gaussian_example_fit.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Model Fit for the Simulated Data of a Gaussian Response — gaussian_example_fit","text":"data generated via gaussian_example_fit.R https://github.com/ropensci/dynamite/tree/main/data-raw/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the algorithm used in a Stan model fit — get_algorithm","title":"Get the algorithm used in a Stan model fit — get_algorithm","text":"Get algorithm used Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the algorithm used in a Stan model fit — get_algorithm","text":"","code":"get_algorithm(x)  # S3 method for class 'stanfit' get_algorithm(x)  # S3 method for class 'CmdStanMCMC' get_algorithm(x)  # S3 method for class 'CmdStanMCMC_CSV' get_algorithm(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the algorithm used in a Stan model fit — get_algorithm","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Stan Code of the dynamite Model — get_code","title":"Extract the Stan Code of the dynamite Model — get_code","text":"Returns Stan code model. Mostly useful debugging building customized version model.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Stan Code of the dynamite Model — get_code","text":"","code":"get_code(x, ...)  # S3 method for class 'dynamiteformula' get_code(x, data, time, group = NULL, blocks = NULL, ...)  # S3 method for class 'dynamitefit' get_code(x, blocks = NULL, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Stan Code of the dynamite Model — get_code","text":"x [dynamiteformula dynamitefit] model formula existing dynamitefit object. See dynamiteformula() dynamite(). ... Ignored. data [data.frame, tibble::tibble, data.table::data.table] data contains variables model long format. Supported column types integer, logical, double, factor. Columns type character converted factors. Unused factor levels dropped. data can contain missing values simply ignored estimation case-wise fashion (per time-point per channel). Input data converted channel specific matrix representations via stats::model.matrix.lm(). time [character(1)] column name data denotes time index observations. variable factor, integer representation levels used internally defining time indexing. group [character(1)] column name data denotes unique groups NULL corresponding scenario without groups. group NULL, new column .group created constant value 1L created indicating observations belong group. case name conflicts data, see group_var element return object get column name new variable. blocks [character()] Stan block names extract. NULL, extracts full model code.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Stan Code of the dynamite Model — get_code","text":"Stan model blocks character string.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Stan Code of the dynamite Model — get_code","text":"","code":"data.table::setDTthreads(1) # For CRAN d <- data.frame(y = rnorm(10), x = 1:10, time = 1:10, id = 1) cat(get_code(obs(y ~ x, family = \"gaussian\"),   data = d, time = \"time\", group = \"id\" )) #> functions { #> } #> data { #>   int<lower=1> T; // number of time points #>   int<lower=1> N; // number of individuals #>   int<lower=0> K; // total number of covariates across all channels #>   array[T] matrix[N, K] X; // covariates as an array of N x K matrices #>   row_vector[K] X_m; // Means of all covariates at first time point #>   // number of fixed, varying and random coefficients, and related indices #>   int<lower=0> K_fixed_y; #>   int<lower=0> K_y; // K_fixed + K_varying #>   array[K_fixed_y] int J_fixed_y; #>   array[K_y] int J_y; // fixed and varying #>   array[K_fixed_y] int L_fixed_y; #>   // Parameters of vectorized priors #>   matrix[K_fixed_y, 2] beta_prior_pars_y; #>   matrix[N, T] y_y; #> } #> transformed data { #> } #> parameters { #>   vector[K_fixed_y] beta_y; // Fixed coefficients #>   real a_y; // Mean of the first time point #>   real<lower=0> sigma_y; // SD of the normal distribution #> } #> transformed parameters { #>   // Time-invariant intercept #>   real alpha_y; #>   // Define the first alpha using mean a_y #>   { #>     vector[K_y] gamma__y; #>     gamma__y[L_fixed_y] = beta_y; #>     alpha_y = a_y - X_m[J_y] * gamma__y; #>   } #> } #> model { #>   a_y ~ normal(0.61, 2.4); #>   beta_y ~ normal(beta_prior_pars_y[, 1], beta_prior_pars_y[, 2]); #>   sigma_y ~ exponential(0.83); #>   { #>     real ll = 0.0; #>     vector[K_y] gamma__y; #>     gamma__y[L_fixed_y] = beta_y; #>     for (t in 1:T) { #>       real intercept_y = alpha_y; #>       ll += normal_id_glm_lupdf(y_y[, t] | X[t][, J_y], intercept_y, gamma__y, sigma_y); #>     } #>     target += ll; #>   } #> } #> generated quantities { #> } # same as cat(dynamite(obs(y ~ x, family = \"gaussian\"),   data = d, time = \"time\", group = \"id\",   debug = list(model_code = TRUE, no_compile = TRUE) )$model_code) #> functions { #> } #> data { #>   int<lower=1> T; // number of time points #>   int<lower=1> N; // number of individuals #>   int<lower=0> K; // total number of covariates across all channels #>   array[T] matrix[N, K] X; // covariates as an array of N x K matrices #>   row_vector[K] X_m; // Means of all covariates at first time point #>   // number of fixed, varying and random coefficients, and related indices #>   int<lower=0> K_fixed_y; #>   int<lower=0> K_y; // K_fixed + K_varying #>   array[K_fixed_y] int J_fixed_y; #>   array[K_y] int J_y; // fixed and varying #>   array[K_fixed_y] int L_fixed_y; #>   // Parameters of vectorized priors #>   matrix[K_fixed_y, 2] beta_prior_pars_y; #>   matrix[N, T] y_y; #> } #> transformed data { #> } #> parameters { #>   vector[K_fixed_y] beta_y; // Fixed coefficients #>   real a_y; // Mean of the first time point #>   real<lower=0> sigma_y; // SD of the normal distribution #> } #> transformed parameters { #>   // Time-invariant intercept #>   real alpha_y; #>   // Define the first alpha using mean a_y #>   { #>     vector[K_y] gamma__y; #>     gamma__y[L_fixed_y] = beta_y; #>     alpha_y = a_y - X_m[J_y] * gamma__y; #>   } #> } #> model { #>   a_y ~ normal(0.61, 2.4); #>   beta_y ~ normal(beta_prior_pars_y[, 1], beta_prior_pars_y[, 2]); #>   sigma_y ~ exponential(0.83); #>   { #>     real ll = 0.0; #>     vector[K_y] gamma__y; #>     gamma__y[L_fixed_y] = beta_y; #>     for (t in 1:T) { #>       real intercept_y = alpha_y; #>       ll += normal_id_glm_lupdf(y_y[, t] | X[t][, J_y], intercept_y, gamma__y, sigma_y); #>     } #>     target += ll; #>   } #> } #> generated quantities { #> }"},{"path":"https://docs.ropensci.org/dynamite/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Model Data of the dynamite Model — get_data","title":"Extract the Model Data of the dynamite Model — get_data","text":"Returns input data Stan model. Mostly useful debugging.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Model Data of the dynamite Model — get_data","text":"","code":"get_data(x, ...)  # S3 method for class 'dynamiteformula' get_data(x, data, time, group = NULL, ...)  # S3 method for class 'dynamitefit' get_data(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Model Data of the dynamite Model — get_data","text":"x [dynamiteformula dynamitefit] model formula existing dynamitefit object. See dynamiteformula() dynamite(). ... Ignored. data [data.frame, tibble::tibble, data.table::data.table] data contains variables model long format. Supported column types integer, logical, double, factor. Columns type character converted factors. Unused factor levels dropped. data can contain missing values simply ignored estimation case-wise fashion (per time-point per channel). Input data converted channel specific matrix representations via stats::model.matrix.lm(). time [character(1)] column name data denotes time index observations. variable factor, integer representation levels used internally defining time indexing. group [character(1)] column name data denotes unique groups NULL corresponding scenario without groups. group NULL, new column .group created constant value 1L created indicating observations belong group. case name conflicts data, see group_var element return object get column name new variable.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Model Data of the dynamite Model — get_data","text":"list containing input data Stan.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Model Data of the dynamite Model — get_data","text":"","code":"data.table::setDTthreads(1) # For CRAN d <- data.frame(y = rnorm(10), x = 1:10, time = 1:10, id = 1) str(get_data(obs(y ~ x, family = \"gaussian\"),   data = d, time = \"time\", group = \"id\" )) #> List of 24 #>  $ K_fixed_y        : int 1 #>  $ K_varying_y      : int 0 #>  $ K_random_y       : int 0 #>  $ K_y              : int 1 #>  $ J_fixed_y        : int [1(1d)] 1 #>   ..- attr(*, \"dimnames\")=List of 1 #>   .. ..$ : chr \"x\" #>  $ J_varying_y      : int[0 (1d)]  #>  $ J_y              : int [1(1d)] 1 #>   ..- attr(*, \"dimnames\")=List of 1 #>   .. ..$ : chr \"x\" #>  $ J_random_y       : int[0 (1d)]  #>  $ L_fixed_y        : int [1(1d)] 1 #>  $ L_varying_y      : int[0 (1d)]  #>  $ obs_y            : int [1, 1:10] 1 1 1 1 1 1 1 1 1 1 #>  $ n_obs_y          : int [1:10] 1 1 1 1 1 1 1 1 1 1 #>  $ t_obs_y          : int [1:10(1d)] 1 2 3 4 5 6 7 8 9 10 #>  $ T_obs_y          : int 10 #>  $ y_y              : num [1, 1:10] 0.6224 0.5068 -0.4262 1.6364 0.0428 ... #>  $ beta_prior_pars_y: num [1, 1:2] 0 0.66 #>  $ N                : int 1 #>  $ K                : int 1 #>  $ X                : num [1:10, 1, 1] 1 2 3 4 5 6 7 8 9 10 #>  $ M                : int 0 #>  $ P                : num 0 #>  $ T                : int 10 #>  $ X_m              : num [1(1d)] 1 #>  $ grainsize        : num 10"},{"path":"https://docs.ropensci.org/dynamite/reference/get_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the diagnostics of a Stan model fit — get_diagnostics","title":"Get the diagnostics of a Stan model fit — get_diagnostics","text":"Get diagnostics Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the diagnostics of a Stan model fit — get_diagnostics","text":"","code":"get_diagnostics(x)  # S3 method for class 'stanfit' get_diagnostics(x)  # S3 method for class 'CmdStanMCMC' get_diagnostics(x)  # S3 method for class 'CmdStanMCMC_CSV' get_diagnostics(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the diagnostics of a Stan model fit — get_diagnostics","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the draws of a Stan model fit — get_draws","title":"Get the draws of a Stan model fit — get_draws","text":"Get draws Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the draws of a Stan model fit — get_draws","text":"","code":"get_draws(x, pars)  # S3 method for class 'stanfit' get_draws(x, pars)  # S3 method for class 'CmdStanMCMC' get_draws(x, pars)  # S3 method for class 'CMdStanMCMC_CSV' get_draws(x, pars)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the draws of a Stan model fit — get_draws","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object. pars character vector parameter names.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_elapsed_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the elapsed time of a Stan model fit — get_elapsed_time","title":"Get the elapsed time of a Stan model fit — get_elapsed_time","text":"Get elapsed time Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_elapsed_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the elapsed time of a Stan model fit — get_elapsed_time","text":"","code":"get_elapsed_time(x)  # S3 method for class 'stanfit' get_elapsed_time(x)  # S3 method for class 'CmdStanMCMC' get_elapsed_time(x)  # S3 method for class 'CmdStanMCMC_CSV' get_elapsed_time(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_elapsed_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the elapsed time of a Stan model fit — get_elapsed_time","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_max_treedepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the maximum treedepth of chains of a Stan model fit — get_max_treedepth","title":"Get the maximum treedepth of chains of a Stan model fit — get_max_treedepth","text":"Get maximum treedepth chains Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_max_treedepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the maximum treedepth of chains of a Stan model fit — get_max_treedepth","text":"","code":"get_max_treedepth(x)  # S3 method for class 'stanfit' get_max_treedepth(x)  # S3 method for class 'CmdStanMCMC' get_max_treedepth(x)  # S3 method for class 'CmdStanMCMC_CSV' get_max_treedepth(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_max_treedepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the maximum treedepth of chains of a Stan model fit — get_max_treedepth","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_model_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the model code of a Stan model fit — get_model_code","title":"Get the model code of a Stan model fit — get_model_code","text":"Get model code Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_model_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the model code of a Stan model fit — get_model_code","text":"","code":"get_model_code(x)  # S3 method for class 'stanfit' get_model_code(x)  # S3 method for class 'CmdStanMCMC' get_model_code(x)  # S3 method for class 'CmdStanMCMC_CSV' get_model_code(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_model_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the model code of a Stan model fit — get_model_code","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_nchains.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of chains of a Stan model fit — get_nchains","title":"Get the number of chains of a Stan model fit — get_nchains","text":"Get number chains Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_nchains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of chains of a Stan model fit — get_nchains","text":"","code":"get_nchains(x)  # S3 method for class 'stanfit' get_nchains(x)  # S3 method for class 'CmdStanMCMC' get_nchains(x)  # S3 method for class 'CmdStanMCMC_CSV' get_nchains(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_nchains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of chains of a Stan model fit — get_nchains","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_ndraws.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of draws of a Stan model fit — get_ndraws","title":"Get the number of draws of a Stan model fit — get_ndraws","text":"Get number draws Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_ndraws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of draws of a Stan model fit — get_ndraws","text":"","code":"get_ndraws(x)  # S3 method for class 'stanfit' get_ndraws(x)  # S3 method for class 'CmdStanMCMC' get_ndraws(x)  # S3 method for class 'CmdStanMCMC_CSV' get_ndraws(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_ndraws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of draws of a Stan model fit — get_ndraws","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parameter Dimensions of the dynamite Model — get_parameter_dims","title":"Get Parameter Dimensions of the dynamite Model — get_parameter_dims","text":"Extracts names dimensions parameters used dynamite model. See also get_parameter_types() get_parameter_names(). returned dimensions match stanfit element dynamitefit object. applied dynamiteformula objects, model compiled sampled 1 iteration get parameter dimensions.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parameter Dimensions of the dynamite Model — get_parameter_dims","text":"","code":"get_parameter_dims(x, ...)  # S3 method for class 'dynamiteformula' get_parameter_dims(x, data, time, group = NULL, ...)  # S3 method for class 'dynamitefit' get_parameter_dims(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Parameter Dimensions of the dynamite Model — get_parameter_dims","text":"x [dynamiteformula dynamitefit] model formula existing dynamitefit object. See dynamiteformula() dynamite(). ... Ignored. data [data.frame, tibble::tibble, data.table::data.table] data contains variables model long format. Supported column types integer, logical, double, factor. Columns type character converted factors. Unused factor levels dropped. data can contain missing values simply ignored estimation case-wise fashion (per time-point per channel). Input data converted channel specific matrix representations via stats::model.matrix.lm(). time [character(1)] column name data denotes time index observations. variable factor, integer representation levels used internally defining time indexing. group [character(1)] column name data denotes unique groups NULL corresponding scenario without groups. group NULL, new column .group created constant value 1L created indicating observations belong group. case name conflicts data, see group_var element return object get column name new variable.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parameter Dimensions of the dynamite Model — get_parameter_dims","text":"named list parameter dimensions input model.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Parameter Dimensions of the dynamite Model — get_parameter_dims","text":"","code":"data.table::setDTthreads(1) # For CRAN get_parameter_dims(multichannel_example_fit) #> $beta_g #> [1] 2 #>  #> $a_g #> [1] 1 #>  #> $sigma_g #> [1] 1 #>  #> $beta_p #> [1] 3 #>  #> $a_p #> [1] 1 #>  #> $beta_b #> [1] 5 #>  #> $a_b #> [1] 1 #>"},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parameter Names of the dynamite Model — get_parameter_names","title":"Get Parameter Names of the dynamite Model — get_parameter_names","text":"Extracts parameter names used dynamitefit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parameter Names of the dynamite Model — get_parameter_names","text":"","code":"get_parameter_names(x, types = NULL, ...)  # S3 method for class 'dynamitefit' get_parameter_names(x, types = NULL, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Parameter Names of the dynamite Model — get_parameter_names","text":"x [dynamitefit] model fit object. types [character()] Extract names parameter certain type. See get_parameter_types(). ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parameter Names of the dynamite Model — get_parameter_names","text":"character vector parameter names input model.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Parameter Names of the dynamite Model — get_parameter_names","text":"naming parameters generally follows style name starts parameter type (e.g. beta time-invariant regression coefficient), followed underscore name response variable, case time-invariant, time-varying random effect, name predictor. exception spline coefficients omega, also contain number denoting knot number.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Parameter Names of the dynamite Model — get_parameter_names","text":"","code":"data.table::setDTthreads(1) # For CRAN get_parameter_names(multichannel_example_fit) #>  [1] \"alpha_g\"                 \"beta_g_g_lag1\"           #>  [3] \"beta_g_logp_lag1\"        \"sigma_g\"                 #>  [5] \"alpha_p\"                 \"beta_p_g_lag1\"           #>  [7] \"beta_p_logp_lag1\"        \"beta_p_b_lag1\"           #>  [9] \"alpha_b\"                 \"beta_b_g_lag1\"           #> [11] \"beta_b_logp_lag1\"        \"beta_b_b_lag1\"           #> [13] \"beta_b_b_lag1:logp_lag1\" \"beta_b_b_lag1:g_lag1\""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parameter Types of the dynamite Model — get_parameter_types","title":"Get Parameter Types of the dynamite Model — get_parameter_types","text":"Extracts parameter types used dynamitefit object. See .data.frame.dynamitefit() explanations different types.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parameter Types of the dynamite Model — get_parameter_types","text":"","code":"get_parameter_types(x, ...)  # S3 method for class 'dynamitefit' get_parameter_types(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Parameter Types of the dynamite Model — get_parameter_types","text":"x [dynamitefit] model fit object. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parameter Types of the dynamite Model — get_parameter_types","text":"character vector parameter types input model.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_parameter_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Parameter Types of the dynamite Model — get_parameter_types","text":"","code":"data.table::setDTthreads(1) # For CRAN get_parameter_types(multichannel_example_fit) #> [1] \"alpha\" \"beta\"  \"sigma\""},{"path":"https://docs.ropensci.org/dynamite/reference/get_pars_oi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pars_oi of a Stan model fit — get_pars_oi","title":"Get pars_oi of a Stan model fit — get_pars_oi","text":"Get pars_oi Stan model fit","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_pars_oi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pars_oi of a Stan model fit — get_pars_oi","text":"","code":"get_pars_oi(x)  # S3 method for class 'stanfit' get_pars_oi(x)  # S3 method for class 'CmdStanMCMC' get_pars_oi(x)  # S3 method for class 'CmdStanMCMC_CSV' get_pars_oi(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_pars_oi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pars_oi of a Stan model fit — get_pars_oi","text":"x stanfit (rstan) CmdStanMCMC (cmdstanr) object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Prior Definitions of a dynamite Model — get_priors","title":"Get Prior Definitions of a dynamite Model — get_priors","text":"Extracts priors used dynamite model data frame. can alter priors changing contents prior column supplying data frame dynamite function using argument priors. See vignettes details.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Prior Definitions of a dynamite Model — get_priors","text":"","code":"get_priors(x, ...)  # S3 method for class 'dynamiteformula' get_priors(x, data, time, group = NULL, ...)  # S3 method for class 'dynamitefit' get_priors(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/get_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Prior Definitions of a dynamite Model — get_priors","text":"x [dynamiteformula dynamitefit] model formula existing dynamitefit object. See dynamiteformula() dynamite(). ... Ignored. data [data.frame, tibble::tibble, data.table::data.table] data contains variables model long format. Supported column types integer, logical, double, factor. Columns type character converted factors. Unused factor levels dropped. data can contain missing values simply ignored estimation case-wise fashion (per time-point per channel). Input data converted channel specific matrix representations via stats::model.matrix.lm(). time [character(1)] column name data denotes time index observations. variable factor, integer representation levels used internally defining time indexing. group [character(1)] column name data denotes unique groups NULL corresponding scenario without groups. group NULL, new column .group created constant value 1L created indicating observations belong group. case name conflicts data, see group_var element return object get column name new variable.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Prior Definitions of a dynamite Model — get_priors","text":"data.frame containing prior definitions.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/get_priors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Prior Definitions of a dynamite Model — get_priors","text":"prior column output altered defining user-defined priors dynamite.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/get_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Prior Definitions of a dynamite Model — get_priors","text":"","code":"data.table::setDTthreads(1) # For CRAN d <- data.frame(y = rnorm(10), x = 1:10, time = 1:10, id = 1) get_priors(obs(y ~ x, family = \"gaussian\"),   data = d, time = \"time\", group = \"id\" ) #>   parameter response             prior  type category #> 1   alpha_y        y normal(0.74, 2.4) alpha          #> 2  beta_y_x        y   normal(0, 0.78)  beta          #> 3   sigma_y        y exponential(0.84) sigma"},{"path":"https://docs.ropensci.org/dynamite/reference/hmc_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"HMC Diagnostics for a dynamite Model — hmc_diagnostics","title":"HMC Diagnostics for a dynamite Model — hmc_diagnostics","text":"Prints divergences, saturated treedepths, low E-BFMI warnings.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/hmc_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HMC Diagnostics for a dynamite Model — hmc_diagnostics","text":"","code":"hmc_diagnostics(x, ...)  # S3 method for class 'dynamitefit' hmc_diagnostics(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/hmc_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HMC Diagnostics for a dynamite Model — hmc_diagnostics","text":"x [dynamitefit] model fit object. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/hmc_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HMC Diagnostics for a dynamite Model — hmc_diagnostics","text":"Returns x (invisibly). data.table::setDTthreads(1) # CRAN hmc_diagnostics(gaussian_example_fit)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/lags.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Lagged Responses as Predictors to Each Channel of a dynamite Model — lags","title":"Add Lagged Responses as Predictors to Each Channel of a dynamite Model — lags","text":"Adds lagged value response channel specified via dynamiteformula() predictor channel. added predictors can either time-varying time-invariant.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Lagged Responses as Predictors to Each Channel of a dynamite Model — lags","text":"","code":"lags(k = 1L, type = c(\"fixed\", \"varying\", \"random\"))"},{"path":"https://docs.ropensci.org/dynamite/reference/lags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Lagged Responses as Predictors to Each Channel of a dynamite Model — lags","text":"k [integer()] Values lagged k units time observed response variable added predictor channel. positive (unrestricted) integer. type [integer(1)] Either \"fixed\" \"varying\" indicates whether coefficients added lag terms vary time .","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Lagged Responses as Predictors to Each Channel of a dynamite Model — lags","text":"object class lags.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/lags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Lagged Responses as Predictors to Each Channel of a dynamite Model — lags","text":"","code":"data.table::setDTthreads(1) # For CRAN obs(y ~ -1 + varying(~x), family = \"gaussian\") +   lags(type = \"varying\") + splines(df = 20) #>   Family   Formula              #> y gaussian y ~ -1 + varying(~x) #>  #> Lagged responses added as varying predictors with: k = 1  # A two-channel categorical model with time-invariant predictors # here, lag terms are specified manually obs(x ~ z + lag(x) + lag(y), family = \"categorical\") +   obs(y ~ z + lag(x) + lag(y), family = \"categorical\") #>   Family      Formula                 #> x categorical x ~ z + lag(x) + lag(y) #> y categorical y ~ z + lag(x) + lag(y)  # The same categorical model as above, but with the lag terms # added using 'lags' obs(x ~ z, family = \"categorical\") +   obs(y ~ z, family = \"categorical\") +   lags(type = \"fixed\") #>   Family      Formula #> x categorical x ~ z   #> y categorical y ~ z   #>  #> Lagged responses added as fixed predictors with: k = 1"},{"path":"https://docs.ropensci.org/dynamite/reference/lfactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Common Latent Factor for the dynamite Model. — lfactor","title":"Define a Common Latent Factor for the dynamite Model. — lfactor","text":"function can used part dynamiteformula() define common latent factor component. latent factor modeled spline similarly time-varying intercept, instead equal effect group, additional loading variable group linear predictor term \\(\\lambda_i \\psi_t\\) group \\(\\).","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lfactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Common Latent Factor for the dynamite Model. — lfactor","text":"","code":"lfactor(   responses = NULL,   nonzero_lambda = TRUE,   correlated = TRUE,   noncentered_psi = FALSE,   flip_sign = TRUE )"},{"path":"https://docs.ropensci.org/dynamite/reference/lfactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Common Latent Factor for the dynamite Model. — lfactor","text":"responses [character()] Names responses factor affect. Default responses defined obs except categorical responses, (yet) support factor component. nonzero_lambda [logical()] TRUE (default), assumes mean factor loadings nonzero . logical vector matching length responses single logical value case responses NULL. See details. correlated [logical()] TRUE (default), latent factors assumed correlated channels. noncentered_psi [logical(1)] TRUE, uses noncentered parametrization spline coefficients factors. number knots based splines() call. Default FALSE. flip_sign [logical(1)] TRUE (default), try avoid multimodality due sign-switching defining sign \\(\\lambda\\) \\(\\psi\\) based mean \\(\\omega_1,\\ldots, \\omega_D\\) coefficients. affects channels nonzero_lambda = FALSE. true mean \\(\\omega\\)s close zero, might help, case better set flip_sign = FALSE post-process samples ways (use one chain /suitable initial values). argument common factors.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lfactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Common Latent Factor for the dynamite Model. — lfactor","text":"object class latent_factor.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/lfactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Common Latent Factor for the dynamite Model. — lfactor","text":"","code":"data.table::setDTthreads(1) # For CRAN # three channel model with common factor affecting for responses x and y obs(y ~ 1, family = \"gaussian\") +   obs(x ~ 1, family = \"poisson\") +   obs(z ~ 1, family = \"gaussian\") +   lfactor(     responses = c(\"y\", \"x\"), nonzero_lambda = c(TRUE, FALSE),     correlated = TRUE, noncentered_psi = FALSE   ) #>   Family   Formula #> y gaussian y ~ 1   #> x poisson  x ~ 1   #> z gaussian z ~ 1"},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"Estimates leave-future-(LFO) information criterion dynamite models using Pareto smoothed importance sampling.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"","code":"lfo(x, ...)  # S3 method for class 'dynamitefit' lfo(x, L, verbose = TRUE, k_threshold = 0.7, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"x [dynamitefit] model fit object. ... Additional arguments passed rstan::sampling() $sample() method CmdStanModel object, chains cores (parallel_chains cmdstanr). L [integer(1)] Positive integer defining many time points used initial fit. verbose [logical(1)] TRUE (default), print progress LFO computations console. k_threshold [numeric(1)] Threshold Pareto k estimate triggering refit. Default 0.7.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"lfo object list following components: ELPD Expected log predictive density estimate. ELPD_SE Standard error ELPD. crude approximation take account potential serial correlations. pareto_k Pareto k values. refits Time points model re-estimated. L L value used LFO estimation. k_threshold Threshold used LFO estimation.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"multichannel models, log-likelihoods channels combined. models groups, expected log predictive densities (ELPDs) computed independently group, re-estimation model triggered Pareto k values group exceeds threshold.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"Paul-Christian Bürkner, Jonah Gabry, Aki Vehtari (2020). Approximate leave-future-cross-validation Bayesian time series models, Journal Statistical Computation Simulation, 90:14, 2499-2523.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/lfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate Leave-Future-Out (LFO) Cross-validation — lfo","text":"","code":"data.table::setDTthreads(1) # For CRAN # \\donttest{ # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   # this gives warnings due to the small number of iterations   out <- suppressWarnings(     lfo(gaussian_example_fit, L = 20, chains = 1, cores = 1)   )   out$ELPD   out$ELPD_SE   plot(out) } #> Estimating model with 20 time points. #> Estimating model with 22 time points. #> Estimating model with 25 time points. #> Estimating model with 27 time points.  # }"},{"path":"https://docs.ropensci.org/dynamite/reference/loo.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","title":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","text":"Estimates leave-one-(LOO) information criterion dynamite models using Pareto smoothed importance sampling loo package.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/loo.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' loo(x, separate_channels = FALSE, thin = 1L, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/loo.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","text":"x [dynamitefit] model fit object. separate_channels [logical(1)] TRUE, computes LOO separately channel. can useful diagnosing model fails. Default FALSE, case likelihoods different channels combined, .e., channels left . thin [integer(1)] Use every thin posterior sample computing LOO. can beneficial model object contains large number samples. Default 1 meaning samples used. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/loo.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","text":"output loo::loo() list outputs (separate_channels TRUE).","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/loo.dynamitefit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","text":"Aki Vehtari, Andrew, Gelman, Johah Gabry (2017). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing. 27(5), 1413–1432.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/loo.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate Leave-One-Out (LOO) Cross-validation — loo.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN # \\donttest{ # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   # this gives warnings due to the small number of iterations   suppressWarnings(loo(gaussian_example_fit))   suppressWarnings(loo(gaussian_example_fit, separate_channels = TRUE)) } #> $y_loglik #>  #> Computed from 200 by 1450 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo    243.2 27.0 #> p_loo        89.4  3.4 #> looic      -486.5 54.0 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.1, 1.7]). #>  #> Pareto k diagnostic values: #>                           Count Pct.    Min. ESS #> (-Inf, 0.57]   (good)     1442  99.4%   23       #>    (0.57, 1]   (bad)         8   0.6%   <NA>     #>     (1, Inf)   (very bad)    0   0.0%   <NA>     #> See help('pareto-k-diagnostic') for details. #>  # }"},{"path":"https://docs.ropensci.org/dynamite/reference/mcmc_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Values of a dynamite Model — mcmc_diagnostics","title":"Diagnostic Values of a dynamite Model — mcmc_diagnostics","text":"Prints HMC diagnostics lists parameters smallest effective sample sizes largest Rhat values. See hmc_diagnostics() posterior::default_convergence_measures() details.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/mcmc_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Values of a dynamite Model — mcmc_diagnostics","text":"","code":"mcmc_diagnostics(x, ...)  # S3 method for class 'dynamitefit' mcmc_diagnostics(x, n = 3L, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/mcmc_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Values of a dynamite Model — mcmc_diagnostics","text":"x [dynamitefit] model fit object. ... Ignored. n [integer(1)] many rows print parameter-specific convergence measures. default 3. positive (unrestricted) integer.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/mcmc_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Values of a dynamite Model — mcmc_diagnostics","text":"Returns x (invisibly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/mcmc_diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Values of a dynamite Model — mcmc_diagnostics","text":"","code":"data.table::setDTthreads(1) # For CRAN mcmc_diagnostics(gaussian_example_fit) #> NUTS sampler diagnostics: #>  #> No divergences, saturated max treedepths or low E-BFMIs. #>  #> Smallest bulk-ESS values:  #>                        #> nu_y_alpha_id16    106 #> alpha_y[28]        118 #> delta_y_y_lag1[14] 118 #>  #> Smallest tail-ESS values:  #>                   #> alpha_y[7]    109 #> alpha_y[14]   111 #> delta_y_x[13] 114 #>  #> Largest Rhat values:  #>                      #> delta_y_x[12]   1.04 #> delta_y_x[8]    1.03 #> nu_y_alpha_id39 1.03"},{"path":"https://docs.ropensci.org/dynamite/reference/mice.impute.lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Lagging Values of an Imputed Response — mice.impute.lag","title":"Compute Lagging Values of an Imputed Response — mice.impute.lag","text":"Function computing lagged values imputed response mice.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/mice.impute.lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Lagging Values of an Imputed Response — mice.impute.lag","text":"","code":"mice.impute.lag(y, ry, x, wy = NULL, group_val, group_var, resp, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/mice.impute.lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Lagging Values of an Imputed Response — mice.impute.lag","text":"y Vector imputed ry Logical vector length length(y) indicating subset y[ry] elements y imputation model fitted. ry generally distinguishes observed (TRUE) missing values (FALSE) y. x Numeric design matrix length(y) rows predictors y. Matrix x may missing values. wy Logical vector length length(y). TRUE value indicates locations y imputations created. group_val [vector()] Values grouping variable. group_var [character(1)] Name grouping variable. resp [character(1)] Name response variable. ... named arguments.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/mice.impute.lead.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Leading Values of an Imputed Response — mice.impute.lead","title":"Compute Leading Values of an Imputed Response — mice.impute.lead","text":"Function computing leading values imputed response mice.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/mice.impute.lead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Leading Values of an Imputed Response — mice.impute.lead","text":"","code":"mice.impute.lead(y, ry, x, wy = NULL, group_val, group_var, resp, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/mice.impute.lead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Leading Values of an Imputed Response — mice.impute.lead","text":"y Vector imputed ry Logical vector length length(y) indicating subset y[ry] elements y imputation model fitted. ry generally distinguishes observed (TRUE) missing values (FALSE) y. x Numeric design matrix length(y) rows predictors y. Matrix x may missing values. wy Logical vector length length(y). TRUE value indicates locations y imputations created. group_val [vector()] Values grouping variable. group_var [character(1)] Name grouping variable. resp [character(1)] Name response variable. ... named arguments.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Multivariate Panel Data — multichannel_example","title":"Simulated Multivariate Panel Data — multichannel_example","text":"simulated multichannel data containing multiple individuals multiple response variables different distributions.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Multivariate Panel Data — multichannel_example","text":"","code":"multichannel_example"},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Multivariate Panel Data — multichannel_example","text":"data frame 3000 rows 5 variables: id Variable defining individuals (1 50). time Variable defining time point measurement (1 20). g Response variable following gaussian distribution. p Response variable following Poisson distribution. b Response variable following Bernoulli distribution.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Multivariate Panel Data — multichannel_example","text":"data generated via multichannel_example.R https://github.com/ropensci/dynamite/tree/main/data-raw/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Fit for the Simulated Multivariate Panel Data — multichannel_example_fit","title":"Model Fit for the Simulated Multivariate Panel Data — multichannel_example_fit","text":"dynamitefit object obtained running dynamite multichannel_example dataset Note small number samples due size restrictions CRAN.","code":"set.seed(1) library(dynamite) f <- obs(g ~ lag(g) + lag(logp), family = \"gaussian\") +   obs(p ~ lag(g) + lag(logp) + lag(b), family = \"poisson\") +   obs(b ~ lag(b) * lag(logp) + lag(b) * lag(g), family = \"bernoulli\") +   aux(numeric(logp) ~ log(p + 1)) multichannel_example_fit <- dynamite(   f,   data = multichannel_example,   time = \"time\",   group = \"id\",   chains = 1,   cores = 1,   iter = 2000,   warmup = 1000,   init = 0,   refresh = 0,   thin = 5,   save_warmup = FALSE )"},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Fit for the Simulated Multivariate Panel Data — multichannel_example_fit","text":"","code":"multichannel_example_fit"},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example_fit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model Fit for the Simulated Multivariate Panel Data — multichannel_example_fit","text":"dynamitefit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/multichannel_example_fit.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Model Fit for the Simulated Multivariate Panel Data — multichannel_example_fit","text":"data generated via multichannel_example_fit.R https://github.com/ropensci/dynamite/tree/main/data-raw/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/ndraws.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the Number of Posterior Draws of a dynamitefit Object — ndraws.dynamitefit","title":"Return the Number of Posterior Draws of a dynamitefit Object — ndraws.dynamitefit","text":"Return Number Posterior Draws dynamitefit Object","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/ndraws.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the Number of Posterior Draws of a dynamitefit Object — ndraws.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' ndraws(x)"},{"path":"https://docs.ropensci.org/dynamite/reference/ndraws.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the Number of Posterior Draws of a dynamitefit Object — ndraws.dynamitefit","text":"x [dynamitefit] model fit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/ndraws.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the Number of Posterior Draws of a dynamitefit Object — ndraws.dynamitefit","text":"Number posterior draws single integer value.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/ndraws.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the Number of Posterior Draws of a dynamitefit Object — ndraws.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN ndraws(gaussian_example_fit) #> [1] 200"},{"path":"https://docs.ropensci.org/dynamite/reference/nobs.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Number of Observations Used to Fit a dynamite Model — nobs.dynamitefit","title":"Extract the Number of Observations Used to Fit a dynamite Model — nobs.dynamitefit","text":"Extract Number Observations Used Fit dynamite Model","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/nobs.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Number of Observations Used to Fit a dynamite Model — nobs.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' nobs(object, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/nobs.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Number of Observations Used to Fit a dynamite Model — nobs.dynamitefit","text":"object [dynamitefit] model fit object. ... used.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/nobs.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Number of Observations Used to Fit a dynamite Model — nobs.dynamitefit","text":"Total number non-missing observations integer.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/nobs.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Number of Observations Used to Fit a dynamite Model — nobs.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN nobs(gaussian_example_fit) #> [1] 1450"},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots for dynamitefit Objects — plot.dynamitefit","title":"Plots for dynamitefit Objects — plot.dynamitefit","text":"Produces traceplots density plots model parameters. Can also used plot time-varying time-invariant parameters model along posterior intervals. See plot_type argument details available plots.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots for dynamitefit Objects — plot.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' plot(   x,   plot_type = c(\"default\", \"trace\", \"dag\"),   types = NULL,   parameters = NULL,   responses = NULL,   groups = NULL,   times = NULL,   level = 0.05,   alpha = 0.5,   facet = TRUE,   scales = c(\"fixed\", \"free\"),   n_params = NULL,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots for dynamitefit Objects — plot.dynamitefit","text":"x [dynamitefit] model fit object. plot_type [character(1)] type plot draw? default \"default\" draws posterior means intervals parameters selected types parameters. \"types\" parameters NULL, parameters drawn maximum specified n_params. Option \"trace\" instead draws posterior densities traceplots parameters. Option \"dag\" instead plots directed acyclic graph model formula, see plot.dynamiteformula() arguments available option. types [character(1)] Types parameter plots drawn. Possible options can found function get_parameter_types(). Ignored argument parameters supplied. parameters [charecter()] Parameter name(s) plots drawn. Possible options can found function get_parameter_names(). default parameters, limited n_params. responses [character()] Response(s) plots drawn. Possible options unique(x$priors$response). Default responses. Ignored argument parameters supplied. groups [character(1)] Group name(s) plots drawn group-specific parameters. times [double()] Time point(s) plots drawn time-varying parameters. default, time points included, maximum number parameters specified n_params starting first non-fixed time point. level [numeric(1)] Level posterior intervals. Default 0.05, leading 90% intervals. alpha [numeric(1)] Opacity level geom_ribbon. Default 0.5. facet [logical(1)] time-invariant parameters plotted separately (TRUE) single plot (FALSE)? scales [character(1)] y-axis panels \"fixed\" (default) \"free\"? See ggplot2::facet_wrap(). n_params [integer()] single value vector length 2 specifying maximum number parameters plot. single value provided, limit used parameters. vector supplied, first element defines maximum number time-invariant parameters plot second maximum number time-varying parameters plot. defaults values 20 time-invariant parameters 3 time-varying parameters. default value 5 plot_type == \"trace\". ... Arguments passed plot.dynamiteformula() using plot_type = \"dag\".","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots for dynamitefit Objects — plot.dynamitefit","text":"ggplot object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots for dynamitefit Objects — plot.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN plot(gaussian_example_fit, type = \"beta\")"},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamiteformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Model Structure as a Directed Acyclic Graph (DAG) — plot.dynamiteformula","title":"Plot the Model Structure as a Directed Acyclic Graph (DAG) — plot.dynamiteformula","text":"Plot snapshot model structure specific time point window highest-order lag dependency past future directed acyclic graph (DAG). response variables shown plot. function can also produce TikZ code DAG used reports publications.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamiteformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Model Structure as a Directed Acyclic Graph (DAG) — plot.dynamiteformula","text":"","code":"# S3 method for class 'dynamiteformula' plot(   x,   show_auxiliary = TRUE,   show_covariates = FALSE,   tikz = FALSE,   vertex_size = 0.25,   label_size = 18,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamiteformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Model Structure as a Directed Acyclic Graph (DAG) — plot.dynamiteformula","text":"x [dynamiteformula] model formula. show_auxiliary [logical(1)] deterministic auxiliary responses shown plot? FALSE, vertices corresponding responses projected . default TRUE. show_covariates [logical(1)] unmodeled covariates shown plot? defaults FALSE. tikz [logical(1)] DAG returned TikZ format? default FALSE returning ggplot object instead. vertex_size [double(1)] size (radius) vertex circles used ggplot DAG. (vertical horizontal distances vertices grid 1, reference.) label_size [double(1)] Font size (points) use vertex labels ggplot DAG. ... used..","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamiteformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Model Structure as a Directed Acyclic Graph (DAG) — plot.dynamiteformula","text":"ggplot object, character string tikz = TRUE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/plot.dynamiteformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Model Structure as a Directed Acyclic Graph (DAG) — plot.dynamiteformula","text":"","code":"data.table::setDTthreads(1) # For CRAN multichannel_formula <- obs(g ~ lag(g) + lag(logp), family = \"gaussian\") +   obs(p ~ lag(g) + lag(logp) + lag(b), family = \"poisson\") +   obs(b ~ lag(b) * lag(logp) + lag(b) * lag(g), family = \"bernoulli\") +   aux(numeric(logp) ~ log(p + 1)) # A ggplot plot(multichannel_formula)  # TikZ format plot(multichannel_formula, tikz = TRUE) #> [1] \"% Preamble\\n\\\\usepackage{tikz}\\n\\\\usetikzlibrary{positioning, arrows.meta, shapes.geometric}\\n\\\\tikzset{%\\n  semithick,\\n  >={Stealth[width=1.5mm,length=2mm]},\\n  obs/.style 2 args = {\\n    name = #1, circle, draw, inner sep = 8pt, label = center:$#2$\\n  }\\n}\\n% DAG\\n\\\\begin{tikzpicture}\\n  \\\\node [obs = {v1}{g_{t - 1}}] at (-1, 4) {\\\\vphantom{0}};\\n  \\\\node [obs = {v2}{p_{t - 1}}] at (-1, 3) {\\\\vphantom{0}};\\n  \\\\node [obs = {v3}{b_{t - 1}}] at (-1, 2) {\\\\vphantom{0}};\\n  \\\\node [obs = {v4}{logp_{t - 1}}] at (-1, 1) {\\\\vphantom{0}};\\n  \\\\node [obs = {v5}{g_{t + 1}}] at (1, 4) {\\\\vphantom{0}};\\n  \\\\node [obs = {v6}{p_{t + 1}}] at (1, 3) {\\\\vphantom{0}};\\n  \\\\node [obs = {v7}{b_{t + 1}}] at (1, 2) {\\\\vphantom{0}};\\n  \\\\node [obs = {v8}{logp_{t + 1}}] at (1, 1) {\\\\vphantom{0}};\\n  \\\\node [obs = {v9}{g_{t}}] at (0, 4) {\\\\vphantom{0}};\\n  \\\\node [obs = {v10}{p_{t}}] at (0, 3) {\\\\vphantom{0}};\\n  \\\\node [obs = {v11}{b_{t}}] at (0, 2) {\\\\vphantom{0}};\\n  \\\\node [obs = {v12}{logp_{t}}] at (0, 1) {\\\\vphantom{0}};\\n  \\\\draw [->] (v1) -- (v9);\\n  \\\\draw [->] (v4) -- (v9);\\n  \\\\draw [->] (v1) -- (v10);\\n  \\\\draw [->] (v4) -- (v10);\\n  \\\\draw [->] (v3) -- (v10);\\n  \\\\draw [->] (v3) -- (v11);\\n  \\\\draw [->] (v4) -- (v11);\\n  \\\\draw [->] (v1) -- (v11);\\n  \\\\draw [->] (v9) -- (v5);\\n  \\\\draw [->] (v12) -- (v5);\\n  \\\\draw [->] (v9) -- (v6);\\n  \\\\draw [->] (v12) -- (v6);\\n  \\\\draw [->] (v11) -- (v6);\\n  \\\\draw [->] (v11) -- (v7);\\n  \\\\draw [->] (v12) -- (v7);\\n  \\\\draw [->] (v9) -- (v7);\\n  \\\\draw [->] (v10) to[bend right=45] (v12);\\n  \\\\draw [->] (v2) to[bend right=45] (v4);\\n  \\\\draw [->] (v6) to[bend right=45] (v8);\\n\\\\end{tikzpicture}\""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.lfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Plot for Pareto k Values from LFO — plot.lfo","title":"Diagnostic Plot for Pareto k Values from LFO — plot.lfo","text":"Plots Pareto k values per time point (one point per group), together horizontal line representing used threshold.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.lfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Plot for Pareto k Values from LFO — plot.lfo","text":"","code":"# S3 method for class 'lfo' plot(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/plot.lfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Plot for Pareto k Values from LFO — plot.lfo","text":"x [lfo] Output lfo method. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.lfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Plot for Pareto k Values from LFO — plot.lfo","text":"ggplot object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/plot.lfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Plot for Pareto k Values from LFO — plot.lfo","text":"","code":"data.table::setDTthreads(1) # For CRAN # \\donttest{ # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   # This gives warnings due to the small number of iterations   plot(suppressWarnings(     lfo(gaussian_example_fit, L = 20, chains = 1, cores = 1)   )) } #> Estimating model with 20 time points. #> recompiling to avoid crashing R session #> Estimating model with 21 time points. #> Estimating model with 22 time points. #> Estimating model with 24 time points. #> Estimating model with 26 time points.  # }"},{"path":"https://docs.ropensci.org/dynamite/reference/predict.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for a dynamite Model — predict.dynamitefit","title":"Predict Method for a dynamite Model — predict.dynamitefit","text":"Obtain counterfactual predictions dynamitefit object.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/predict.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for a dynamite Model — predict.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' predict(   object,   newdata = NULL,   type = c(\"response\", \"mean\", \"link\"),   funs = list(),   impute = c(\"none\", \"locf\", \"nocb\"),   new_levels = c(\"none\", \"bootstrap\", \"gaussian\", \"original\"),   global_fixed = FALSE,   n_draws = NULL,   thin = 1,   expand = TRUE,   df = TRUE,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/predict.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for a dynamite Model — predict.dynamitefit","text":"object [dynamitefit] model fit object. newdata [data.frame] Data used predictions. Predictions computed missing (NA) values response variable columns, non-missing values assumed fixed. NULL (default), data used model estimation used predictions well, values response variable columns first fixed time point converted NA values. Missing values predictor columns can imputed (argument impute). new time points present data used fit model. New group levels can included, model contains random effects, option random effects new levels must chosen (argument new_levels). grouping variable original data missing, assumed observations newdata belong first group original data. New group levels allowed models using latent factors. type [character(1)] Type prediction, \"response\" (default), \"mean\", \"link\". funs [list()] named list whose names correspond response variables model. element funs named list functions applied corresponding predicted type channel individuals combination posterior draws time points. words, resulting predictions averages individuals. functions take corresponding type variable values argument. funs empty, full individual level values returned instead. Note argument can used multiple individuals (.e., group NULL dynamite call). impute [character(1)] imputation scheme use missing exogenous predictor values. Currently supported options imputation: \"none\" (default), last observation carried forward: \"locf\", next observation carried backward: \"nocb\". new_levels [character(1)] Defines sample random effects observations whose group level present original data. options : \"none\" (default) signal error new levels encountered. \"bootstrap\" randomly draw posterior samples random effects across original levels. \"gaussian\" randomly draw Gaussian distribution using posterior samples random effects standard deviation (correlation matrix applicable). \"original\" randomly match new level one original levels. posterior samples random effects matched levels used new levels. argument ignored model contain random effects. global_fixed [logical(1)] FALSE (default), first non-fixed time point counted first non-NA observation group member separately. Otherwise, first non-fixed time point counted first time point globally. groups, options equivalent. n_draws [integer(1)] Number posterior samples use, default NULL uses samples without permuting (chains concatenated). n_drawsis smaller ndraws(object), random subset n_draws posterior samples used. thin [integer(1)] Use every thin posterior sample. can beneficial model object contains large number samples. Default 1 meaning samples used. expand [logical(1)] TRUE (default), output single data.frame containing original newdata predicted values. Otherwise, list returned two components, simulated observed, first contains predicted values, second contains original newdata. Setting expand FALSE can help conserve memory newdata replicated n_draws times output. argument ignored funs provided. df [logical(1)] TRUE (default) output consists data.frame objects, data.table objects otherwise. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/predict.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for a dynamite Model — predict.dynamitefit","text":"data.frame containing predicted values list two data.frames. See expand argument details. Note .draw column .draw .data.frame as_draws methods predict uses permuted samples. mapping variables can done using information object$stanfit@sim$permutation.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/predict.dynamitefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for a dynamite Model — predict.dynamitefit","text":"Note forecasting (.e., predictions time indices beyond last time index original data) supported dynamite package. However, predictions can obtained augmenting original data NA values model estimation.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/predict.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Method for a dynamite Model — predict.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN out <- predict(gaussian_example_fit, type = \"response\", n_draws = 2L) head(out) #>   id time .draw     y_new          x z         y #> 1  1    1     1 0.4046907 -0.5753470 0 0.4046907 #> 2  1    2     1 2.1157969  1.0527115 1 1.3665618 #> 3  1    3     1 0.4849242  0.1192452 0 0.1047957 #> 4  1    4     1 0.4413383 -0.5211173 0 0.9295666 #> 5  1    5     1 1.0301223  1.3011760 1 0.8605904 #> 6  1    6     1 2.8054966 -0.2052993 1 2.1160820  # using summary functions sumr <- predict(multichannel_example_fit, type = \"mean\",   funs = list(g = list(m = mean, s = sd), b = list(sum = sum)),   n_draws = 2L) head(sumr$simulated) #>         m_g       s_g    sum_b time .draw #> 1        NA        NA       NA    1     1 #> 2 0.3755056 0.7000052 27.14166    2     1 #> 3 0.5766777 0.6202268 28.60584    3     1 #> 4 0.7728294 0.4951259 30.10362    4     1 #> 5 0.9144364 0.4248908 31.66146    5     1 #> 6 1.0603167 0.4172720 31.90943    6     1 # \\donttest{ # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   # Simulate from the prior predictive distribution    f <- obs(y ~ lag(y) + varying(~ -1 + x), \"gaussian\") +     splines(df = 10, noncentered = TRUE)    # Create data with missing observations   # Note that due to the lagged term in the model,   # we need to fix the first time point   d <- data.frame(y = c(0, rep(NA, 49)), x = rnorm(50), time = 1:50)    # Suppress warnings due to the lack of data   suppressWarnings(     priors <- get_priors(f, data = d, time = \"time\")   )    # Modify default priors which can produce exploding behavior when used   # without data   priors$prior <- c(     \"normal(0, 1)\",     \"normal(0.6, 0.1)\",     \"normal(-0.2, 0.5)\",     \"normal(0.2, 0.1)\",     \"normal(0.5, 0.1)\"   )    # Samples from the prior conditional on the first time point and x   fit <- dynamite(     dformula = f,     data = d,     time = \"time\",     verbose = FALSE,     priors = priors,     chains = 1   )    # Simulate new data   pp <- predict(fit)    ggplot2::ggplot(pp, ggplot2::aes(time, y_new, group = .draw)) +     ggplot2::geom_line(alpha = 0.1) +     ggplot2::theme_bw() } #>  #> SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 2e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.176 seconds (Warm-up) #> Chain 1:                0.157 seconds (Sampling) #> Chain 1:                0.333 seconds (Total) #> Chain 1:   # }"},{"path":"https://docs.ropensci.org/dynamite/reference/print.lfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results from the LFO — print.lfo","title":"Print the results from the LFO — print.lfo","text":"Prints summary leave-future-cross-validation.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/print.lfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results from the LFO — print.lfo","text":"","code":"# S3 method for class 'lfo' print(x, ...)"},{"path":"https://docs.ropensci.org/dynamite/reference/print.lfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results from the LFO — print.lfo","text":"x [lfo] Output lfo method. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/print.lfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the results from the LFO — print.lfo","text":"Returns x invisibly.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/print.lfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the results from the LFO — print.lfo","text":"","code":"data.table::setDTthreads(1) # For CRAN # \\donttest{ # Please update your rstan and StanHeaders installation before running # on Windows if (!identical(.Platform$OS.type, \"windows\")) {   # This gives warnings due to the small number of iterations   suppressWarnings(lfo(gaussian_example_fit, L = 20)) } #> Estimating model with 20 time points. #> recompiling to avoid crashing R session #> Estimating model with 22 time points. #> Estimating model with 25 time points. #> Estimating model with 26 time points. #> Estimating model with 29 time points. #>  #> Approximate LFO starting from time point 20 #> Model was re-estimated at time points 20, 22, 25, 26, 29 (Based on Pareto k threshold of 0.7) #>  #> Estimated expected log predictive density (ELPD): -171.2103 #> Standard error estimate of the ELPD: 22.10947 # }"},{"path":"https://docs.ropensci.org/dynamite/reference/random_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","title":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","text":"function can used part dynamiteformula() define whether group-level random effects modeled correlated .","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/random_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","text":"","code":"random_spec(correlated = TRUE, noncentered = TRUE)"},{"path":"https://docs.ropensci.org/dynamite/reference/random_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","text":"correlated [logical(1)] TRUE (default), correlations random effects modeled multivariate normal. noncentered [logical(1)] TRUE (default), use noncentered parameterization random effects. Try changing encounter divergences problems sampling.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/random_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","text":"object class random_spec.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/random_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","text":"large number time points random intercepts can become challenging sample default priors. large group sizes group-level intercepts tend behave similarly fixed group-factor variable model becomes overparameterized given common intercept term. Another potential cause sampling problems relatively large variation intercepts (large sigma_nu) compared sampling variation (sigma) Gaussian case.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/random_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Specifications for the Group-level Random Effects of the DMPM — random_spec","text":"","code":"data.table::setDTthreads(1) # For CRAN # two channel model with correlated random effects for responses x and y obs(y ~ 1 + random(~1), family = \"gaussian\") +   obs(x ~ 1 + random(~1 + z), family = \"poisson\") +   random_spec(correlated = TRUE) #>   Family   Formula                #> y gaussian y ~ 1 + random(~1)     #> x poisson  x ~ 1 + random(~1 + z) #>  #> Correlated random effects added for response(s): y, x"},{"path":"https://docs.ropensci.org/dynamite/reference/splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the B-splines Used for the Time-varying Coefficients of the Model. — splines","title":"Define the B-splines Used for the Time-varying Coefficients of the Model. — splines","text":"function can used part dynamiteformula() define splines used time-varying coefficients \\(\\delta\\).","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the B-splines Used for the Time-varying Coefficients of the Model. — splines","text":"","code":"splines(   df = NULL,   degree = 3L,   lb_tau = 0,   noncentered = FALSE,   override = FALSE )"},{"path":"https://docs.ropensci.org/dynamite/reference/splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the B-splines Used for the Time-varying Coefficients of the Model. — splines","text":"df [integer(1)] Degrees freedom, .e., total number spline coefficients. See splines::bs(). Note knots always defined equidistant sequence interval starting first non-fixed time point last time point data. See dynamiteformula() information fixed time points. (unrestricted) positive integer. degree [integer(1)] See splines::bs(). (unrestricted) positive integer. lb_tau [numeric()] Hard constraint(s) lower bound standard deviation parameters \\(\\tau\\) random walk priors. Can useful avoiding divergences cases. See also noncentered argument. Can single positive value, vector defining lower bound separately channel, even channels without varying effects. ordering based order channel definitions dynamiteformula object. noncentered [logical()] TRUE, use noncentered parameterization spline coefficients. Default FALSE. Try changing encounter divergences problems sampling example simulating prior predictive distribution. Can single logical value, vector logical values, defining parameterization separately channel, even channels without varying effects. override [logical(1)] FALSE (default), existing definition splines overridden another call splines(). TRUE, existing definitions replaced.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the B-splines Used for the Time-varying Coefficients of the Model. — splines","text":"object class splines.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the B-splines Used for the Time-varying Coefficients of the Model. — splines","text":"","code":"data.table::setDTthreads(1) # For CRAN # Two channel model with varying effects, with explicit lower bounds for the # random walk prior standard deviations, with noncentered parameterization # for the first channel and centered for the second channel. obs(y ~ 1, family = \"gaussian\") + obs(x ~ 1, family = \"gaussian\") +   lags(type = \"varying\") +   splines(     df = 20, degree = 3, lb_tau = c(0, 0.1),     noncentered = c(TRUE, FALSE)   ) #>   Family   Formula #> y gaussian y ~ 1   #> x gaussian x ~ 1   #>  #> Lagged responses added as varying predictors with: k = 1"},{"path":"https://docs.ropensci.org/dynamite/reference/update.dynamitefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a dynamite Model — update.dynamitefit","title":"Update a dynamite Model — update.dynamitefit","text":"Note using different backend original model fit updating can lead error due different naming cmdstanr rstan sampling arguments.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/update.dynamitefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a dynamite Model — update.dynamitefit","text":"","code":"# S3 method for class 'dynamitefit' update(   object,   dformula = NULL,   data = NULL,   priors = NULL,   recompile = NULL,   ... )"},{"path":"https://docs.ropensci.org/dynamite/reference/update.dynamitefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a dynamite Model — update.dynamitefit","text":"object [dynamitefit] model fit object. dformula [dynamiteformula] Updated model formula. default original formula used. data [data.frame, tibble::tibble, data.table::data.table] Data updated model. default original data used. priors [data.frame] Updated priors. default priors original model used. recompile [logical(1)] model recompiled? NULL (default), tries avoid recompilation. Recompilation forced model formula priors changed, new data contains missing values channel contain missing values original data. Recompilation also forced case backend previous new backend cmdstanr. ... Additional parameters dynamite.","code":""},{"path":"https://docs.ropensci.org/dynamite/reference/update.dynamitefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a dynamite Model — update.dynamitefit","text":"updated dynamitefit object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/dynamite/reference/update.dynamitefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a dynamite Model — update.dynamitefit","text":"","code":"data.table::setDTthreads(1) # For CRAN if (FALSE) { # \\dontrun{ # re-estimate the example fit without thinning: # As the model is compiled on Windows, this will fail on other platforms if (identical(.Platform$OS.type, \"windows\")) {   fit <- update(gaussian_example_fit, thin = 1) } } # }"},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-154","dir":"Changelog","previous_headings":"","what":"dynamite 1.5.4","title":"dynamite 1.5.4","text":"Obtaining model parameter dimensions via get_parameter_dims() longer requires compiled Stan model. leads significant performance improvement applied dynamiteformula objects. Model fitting using cmdstanr backend longer relies rstan::read_stan_csv() construct fit object. Instead, resulting CmdStanMCMC object used directly. provide substantial performance improvement instances. dynamice(), samples different imputed datasets combined using cmdstanr::as_cmdstan_fit() instead.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-153","dir":"Changelog","previous_headings":"","what":"dynamite 1.5.3","title":"dynamite 1.5.3","text":"Restored updated main package vignette. vignette now also contains real data example information multiple imputation. package data gaussian_simulation_fit removed accommodate CRAN package size requirements. code generate data still available data_raw directory.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-152","dir":"Changelog","previous_headings":"","what":"dynamite 1.5.2","title":"dynamite 1.5.2","text":"CRAN release: 2024-05-28 main package vignette temporarily removed contained --date information. Please see arXiv preprint --date information instead: https://arxiv.org/abs/2302.01607","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-151","dir":"Changelog","previous_headings":"","what":"dynamite 1.5.1","title":"dynamite 1.5.1","text":"type argument coef() plot() replaced types accepting multiple types simultaneously, similar .data.table() .data.frame(). functions plot_betas(), plot_deltas(), plot_nus(), plot_lambdas() plot_psis() deprecated now provided via default plot method selecting appropriate types. new argument plot_type added control type plot drawn plot() method. default value \"default\" draws posterior means posterior intervals parameters. old functionality drawing posterior densities traceplots provided option \"trace\". plot() method gained argument n_params limit amount parameters drawn (per parameter type). time-varying time-invariant parameters can now plotted simultaneously. Fixed issue predict() fitted() multinomial responses. Priors cutpoint parameters cumulative family now customizable. factor ordered factor responses now supported categorical cumulative families. addition, ordered factor columns data longer converted factor columns. Arguments different names functionality rstan cmdstanr can now used interchangeably either backend, iter iter_samples. latent factor component reparametrized additional robustness. User-visible changes related priors: Instead prior standard deviations sigma_lambda tau_psi, prior now defined zeta, sum , well kappa, proportion zeta attributable sigma_lambda.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-150","dir":"Changelog","previous_headings":"","what":"dynamite 1.5.0","title":"dynamite 1.5.0","text":"Estimation dynamic multivariate panel models multiple imputation now available via function dynamice() uses mice package. predict fitted functions longer permutes posterior samples samples used .e. n_draws = NULL (default). also corrects standard error estimates loo(), correct earlier due mixing chains. Added argument thin loo(), predict() fitted() methods. Print method now prints run time fastest slowest chain instead chains. new exported function hmc_diagnostics() now available. Added vignette get_code() get_data() functions can used modify generated Stan code perform variational Bayes inference. Contemporaneous dependencies now allowed different components multivariate distributions, e.g., obs(c(y, x) ~ x | 1, family = \"mvgaussian\"). Ordered probit logit regressions now available via obs(., family = \"cumulative\", link = \"probit\") obs(., family = \"cumulative\", link = \"logit\"), respectively.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-1411","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.11","title":"dynamite 1.4.11","text":"package now depends data.table version 1.15.0 higher ggforce package. Added plot method dynamiteformula objects. method draws directed acyclic graph (DAG) model structure snapshot time timepoints past future equal highest-order lag dependency model ggplot object. Alternatively, setting argument tikz = TRUE returns DAG character string TikZ format. See documentation details.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-1410","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.10","title":"dynamite 1.4.10","text":"formula interface now prohibits additional invalid fixed(), varying(), random() definitions obs(). Fixed error Stan code generation offset term included model formula. Fixed issue using character type group variables.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-149","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.9","title":"dynamite 1.4.9","text":"CRAN release: 2024-02-02 Added option input custom model code dynamite can used tweak aspects model (checks compatibility post processing made). Changed default optimization level cmdstanr backend O0, O1 necessarily stable cases. Added new argument full_diagnostics print() method can used control computation ESS Rhat values. default, now computed time- group-invariant parameters (also printed). print() method now also warns possible divergences, treedepth saturation, low E-BMFI. Fixed error related predict() code generation.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-148","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.8","title":"dynamite 1.4.8","text":"Made several performance improvements data parsing. dynamite() now retain original column order data circumstances.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-147","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.7","title":"dynamite 1.4.7","text":"Added note priors vignette regarding default priors tau parameters. Fixed mcmc_diagnostics() function HMC diagnostics checked also models run cmdstanr backend.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-146","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.6","title":"dynamite 1.4.6","text":"Fixed construction latent factors categorical responses.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-145","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.5","title":"dynamite 1.4.5","text":"CRAN release: 2023-08-23 get_data() method dynamitefit objects now correctly uses previously defined priors instead default ones. Fixed bug indexing random effect terms. Limited number parallel threads used data.table package 1 examples, tests, vignettes CRAN.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-144","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.4","title":"dynamite 1.4.4","text":"Example lfo() method now uses single chain core avoid compatibility issue CRAN. Fixed plot_nus() categorical responses. Fixed issue caused error error message predict() fitted() methods newdata contained duplicate time points within group. Fixed issue (#72) caused NA ELPD value lfo() case missing data.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-143","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.3","title":"dynamite 1.4.3","text":"CRAN release: 2023-05-30 Fixed issue formula.dynamitefit() models defined using lags() vector k argument one value. Fixed issue lfo() method resulted wrong ELPD estimates panel data setting. Fixed issue lfo() method case lagged responses caused ELPD computations skip last time points.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-142","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.2","title":"dynamite 1.4.2","text":"CRAN release: 2023-05-18 Added checks fixes backwards compatibility Stan. Fixed code generation intercept-categorical model. Fixed code generation transformed data block backwards compatible Stan.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-141","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.1","title":"dynamite 1.4.1","text":"CRAN release: 2023-05-10 Fixed issue dynamite() data parsing caused substantial memory usage instances. Fixed issue Stan code generation categorical responses. Fixed issue formula.dynamitefit() models multinomial channels. Fixed issue formula.dynamitefit() df argument splines() NULL. Formulas trials() offset() terms now properly parsed using lags(). Removed experimental shrinkage feature.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-140","dir":"Changelog","previous_headings":"","what":"dynamite 1.4.0","title":"dynamite 1.4.0","text":"dynamite() now supports parallel computation via reduce-sum functionality Stan. Fixed issue predict() resulted redundant NAs produced warnings. Fixed issue formula.dynamitefit() models multivariate channels.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-133","dir":"Changelog","previous_headings":"","what":"dynamite 1.3.3","title":"dynamite 1.3.3","text":"CRAN release: 2023-04-18 Fixed partial argument name issue internal update() method used lfo().","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-132","dir":"Changelog","previous_headings":"","what":"dynamite 1.3.2","title":"dynamite 1.3.2","text":"Fixed regularization default priors match priors vignette. Fixed issue update() method model fit objects without group variable. Fixed issue update() method lfo(). Fixed issue \"tau\" \"tau_alpha\" type parameters as_draws() method categorical responses. Fixed issue Stan code generation models time-varying covariates categorical responses. Fixed issue formula.dynamitefit() model contained splines component.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-131","dir":"Changelog","previous_headings":"","what":"dynamite 1.3.1","title":"dynamite 1.3.1","text":"CRAN release: 2023-03-31 Fixed incorrect URL main vignette. \"dynamitefit\" objects longer contain data used Stan sampling default. data can still retrieved via get_data(). Added new package data gaussian_simulation_fit includes model fit dynamite_simulation vignette example time-varying effects. package data latent_factor_example latent_factor_example_fit removed accommodate CRAN package size requirements. code generate data still available data_raw directory. Fixed issue formula.dynamitefit() model formula contained lags component lfactor component.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-130","dir":"Changelog","previous_headings":"","what":"dynamite 1.3.0","title":"dynamite 1.3.0","text":"Added support Student’s t-distribution via \"student\" family obs(). Added support multinomial distribution via \"multinomial\" family obs(). trials() term now mandatory multinomial channels. generated Stan code now automatically switches array keyword syntax deprecated syntax based backend Stan version (see https://mc-stan.org/docs/reference-manual/brackets-array-syntax.html details). presence variables used trials() offset() now properly checked data. model components trials() offset() now function correctly predict() contain response variables model. Fixed calculation number observations nobs() models multivariate channels. Fixed issue predict() models contained multivariate channels random effects. Scenarios zero non-missing observations specific time indices now handled properly Stan code generation. names additional arguments passed rstan::sampling() sample() method cmdstanr Stan model via ... call dynamite now checked unrecognized arguments ignored. Added new function get_parameter_dims() returns parameter dimensions Stan model \"dynamitefit\" \"dynamiteformula\" objects. Group-level random effects now supported also categorical multinomial channels. Added new vignette describes package can used simulate data dynamic multivariate panel model. Added new vignette describes default priors model parameters defined.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-121","dir":"Changelog","previous_headings":"","what":"dynamite 1.2.1","title":"dynamite 1.2.1","text":"Removed argument noncentered_lambda lfactor() work intended. Added next observation carried backward imputation scheme fixed predictors predict option \"nocb\". Changed naming omega parameters, now include also channel name. Fixed issue related channels latent factors predictors. Improved efficiency sum--zero constraints based post @aaronjg Stan forums. Fixed several issues related Stan code generation multivariate gaussian distribution. package longer uses gregexec() internally made dependent R version 4.1.0 higher. Corrected R version dependency 3.6.0 higher based package dependencies.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-120","dir":"Changelog","previous_headings":"","what":"dynamite 1.2.0","title":"dynamite 1.2.0","text":"Added support multivariate gaussian distribution via \"mvgaussian\" family obs(). See documentation dynamiteformula() function details define multivariate channels. Latent factors previously used predict error, now fixed. However, due identifiability constraints new group levels allowed models using latent factors. Response variable names channels now processed avoid invalid variable names generated Stan code. Note variables names used defining priors using methods \"dynamitefit\" class. can use functions get_priors() get_parameter_names() see names available, . Optimized prediction code removing redundant expressions using better indexing.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-112","dir":"Changelog","previous_headings":"","what":"dynamite 1.1.2","title":"dynamite 1.1.2","text":"argument verbose_stan now ignored backend = \"cmdstanr\". stanc_options argument defining compiler options using cmdstanr can now controlled via dynamite(). Optimized column binding \"data.table\" objects predict() leading faster computation. update() method now checks backend changed original model fit. update() method now properly recompiles model (necessary) cases update() used already updated \"dynamitefit\" object. Fixed bug default prior definitions intercept families using log-link lead -Inf prior mean observations first time point zero. Fixed issues code generation latent factor components.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-111","dir":"Changelog","previous_headings":"","what":"dynamite 1.1.1","title":"dynamite 1.1.1","text":"CRAN release: 2023-02-03 plot_deltas() plotting functions now throw error user tries plot parameters incorrect type .","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-110","dir":"Changelog","previous_headings":"","what":"dynamite 1.1.0","title":"dynamite 1.1.0","text":"dynamite() now supports general group-level random effects. New random() works analogously varying() inside obs(), new optional random_spec() component can used define whether random effects correlated whether use noncentered parameterization. package longer depends bayesplot package. Instead, ggplot2 patchwork packages used plot method. Argument order dynamite() function changed: time now precedes group backend now precedes verbose. change also reflected get_data(), get_priors(), get_code() functions. Vectorized priors various indexing variables now passed data Stan instead hard-coded generated model code. package now supports contemporaneous dependencies channels dependency structure acyclic. example, y ~ x x ~ z simultaneously valid, adding z ~ y result cycle. output mcmc_diagnostics() now clearer. default value summary argument changed FALSE .data.frame() .data.table() methods, whereas now hard-coded TRUE summary() method. column ordering output methods also changed estimate columns placed extra columns time. standard deviation default priors spline coefficient standard deviations now scaled based data analogously regression coefficients. Added argument parameters .data.frame() similar methods well plotting functions. Added functions get_parameter_types() get_parameter_names() extracting model parameter types names respectively.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-102","dir":"Changelog","previous_headings":"","what":"dynamite 1.0.2","title":"dynamite 1.0.2","text":"Fixed name clash issue Stan code generation.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-101","dir":"Changelog","previous_headings":"","what":"dynamite 1.0.1","title":"dynamite 1.0.1","text":"CRAN release: 2022-12-23 package longer depends development version data.table package. Removed Grunfeld example vignette due CRAN file size restrictions. multichannel_example corresponding fit modified: standard deviation parameter Gaussian channel used data generation decreased order make example vignette interesting. latent factor model also modified removing random() component order reduce size model fit object. Fixed name extraction supplied data. plot_deltas() longer unnecessarily warns missing values.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-100","dir":"Changelog","previous_headings":"","what":"dynamite 1.0.0","title":"dynamite 1.0.0","text":"Increased version number 1.0.0 reflect fact package now fully functional successfully passed rOpenSci review.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-003","dir":"Changelog","previous_headings":"","what":"dynamite 0.0.3","title":"dynamite 0.0.3","text":"get_prior(), get_code(), get_data() now support case without group argument, per issue #48. Fixed typos issues vignette raised @nicholasjclark rOpenSci review process. Added example simulating prior predictive distribution documentation predict(). Declarations now occur statements generated Stan code. Added support cmdstanr via argument backend dynamite. Added link contributing guidelines README. package longer depends development version rstan. Dropped R version dependency 4.1.0 3.5.0. Moved dplyr tidyr ‘Suggests’. categorical_logit() now used instead categorical_logit_glm() older rstan cmdstanr versions. Random intercepts random() now also support centered parametrization. Added comments generated Stan code. Fixed output formula.dynamitefit() now compatible update() method. Also added required \"call\" object \"dynamitefit\" object. Added loo() lfo() methods dynamite models can used approximate leave-one-leave-future-cross validation. Cleaned NAMESPACE. env argument data.table() now used avoid possible variable name conflicts. Breaking change: shrinkage parameter previously named lambda now xi order free lambda factor loadings parameter customary factor analysis. Added support correlated latent dynamic factors (modeled splines). get_code() applied fitted model now correctly returns model code stanmodel object. Fixed .draw column .data.frame() output.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-002","dir":"Changelog","previous_headings":"","what":"dynamite 0.0.2","title":"dynamite 0.0.2","text":"Improved memory usage predict() fitted() separating simulated values predictors independent posterior draws. Added support summarized predictions via new argument funs, can significantly reduce memory usage individual level predictions interest.","code":""},{"path":"https://docs.ropensci.org/dynamite/news/index.html","id":"dynamite-001","dir":"Changelog","previous_headings":"","what":"dynamite 0.0.1","title":"dynamite 0.0.1","text":"First version dynamite","code":""}]
